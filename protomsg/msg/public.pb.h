// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: public.proto

#ifndef PROTOBUF_public_2eproto__INCLUDED
#define PROTOBUF_public_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sglib {
namespace publicproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_public_2eproto();
void protobuf_AssignDesc_public_2eproto();
void protobuf_ShutdownFile_public_2eproto();

class GameInfo;
class GameServerInfo;
class GateServerInfo;
class RoomPlayerInfo;
class GroupInfo;
class GroupMemberInfo;
class GroupMemberPosInfo;

// ===================================================================

class GameInfo : public ::google::protobuf::Message {
 public:
  GameInfo();
  virtual ~GameInfo();

  GameInfo(const GameInfo& from);

  inline GameInfo& operator=(const GameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameInfo& default_instance();

  void Swap(GameInfo* other);

  // implements Message ----------------------------------------------

  GameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameInfo& from);
  void MergeFrom(const GameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 cur_count = 2;
  inline bool has_cur_count() const;
  inline void clear_cur_count();
  static const int kCurCountFieldNumber = 2;
  inline ::google::protobuf::int32 cur_count() const;
  inline void set_cur_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.publicproto.GameInfo)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_cur_count();
  inline void clear_has_cur_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 cur_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_public_2eproto();
  friend void protobuf_AssignDesc_public_2eproto();
  friend void protobuf_ShutdownFile_public_2eproto();

  void InitAsDefaultInstance();
  static GameInfo* default_instance_;
};
// -------------------------------------------------------------------

class GameServerInfo : public ::google::protobuf::Message {
 public:
  GameServerInfo();
  virtual ~GameServerInfo();

  GameServerInfo(const GameServerInfo& from);

  inline GameServerInfo& operator=(const GameServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GameServerInfo& default_instance();

  void Swap(GameServerInfo* other);

  // implements Message ----------------------------------------------

  GameServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GameServerInfo& from);
  void MergeFrom(const GameServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required int32 cur_count = 2;
  inline bool has_cur_count() const;
  inline void clear_cur_count();
  static const int kCurCountFieldNumber = 2;
  inline ::google::protobuf::int32 cur_count() const;
  inline void set_cur_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.publicproto.GameServerInfo)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_cur_count();
  inline void clear_has_cur_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 cur_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_public_2eproto();
  friend void protobuf_AssignDesc_public_2eproto();
  friend void protobuf_ShutdownFile_public_2eproto();

  void InitAsDefaultInstance();
  static GameServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GateServerInfo : public ::google::protobuf::Message {
 public:
  GateServerInfo();
  virtual ~GateServerInfo();

  GateServerInfo(const GateServerInfo& from);

  inline GateServerInfo& operator=(const GateServerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateServerInfo& default_instance();

  void Swap(GateServerInfo* other);

  // implements Message ----------------------------------------------

  GateServerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateServerInfo& from);
  void MergeFrom(const GateServerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 cur_count = 4;
  inline bool has_cur_count() const;
  inline void clear_cur_count();
  static const int kCurCountFieldNumber = 4;
  inline ::google::protobuf::int32 cur_count() const;
  inline void set_cur_count(::google::protobuf::int32 value);

  // required int32 max_count = 5;
  inline bool has_max_count() const;
  inline void clear_max_count();
  static const int kMaxCountFieldNumber = 5;
  inline ::google::protobuf::int32 max_count() const;
  inline void set_max_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.publicproto.GateServerInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_cur_count();
  inline void clear_has_cur_count();
  inline void set_has_max_count();
  inline void clear_has_max_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 cur_count_;
  ::google::protobuf::int32 max_count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_public_2eproto();
  friend void protobuf_AssignDesc_public_2eproto();
  friend void protobuf_ShutdownFile_public_2eproto();

  void InitAsDefaultInstance();
  static GateServerInfo* default_instance_;
};
// -------------------------------------------------------------------

class RoomPlayerInfo : public ::google::protobuf::Message {
 public:
  RoomPlayerInfo();
  virtual ~RoomPlayerInfo();

  RoomPlayerInfo(const RoomPlayerInfo& from);

  inline RoomPlayerInfo& operator=(const RoomPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomPlayerInfo& default_instance();

  void Swap(RoomPlayerInfo* other);

  // implements Message ----------------------------------------------

  RoomPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoomPlayerInfo& from);
  void MergeFrom(const RoomPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required int32 isready = 2;
  inline bool has_isready() const;
  inline void clear_isready();
  static const int kIsreadyFieldNumber = 2;
  inline ::google::protobuf::int32 isready() const;
  inline void set_isready(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.publicproto.RoomPlayerInfo)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_isready();
  inline void clear_has_isready();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::int32 isready_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_public_2eproto();
  friend void protobuf_AssignDesc_public_2eproto();
  friend void protobuf_ShutdownFile_public_2eproto();

  void InitAsDefaultInstance();
  static RoomPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupInfo : public ::google::protobuf::Message {
 public:
  GroupInfo();
  virtual ~GroupInfo();

  GroupInfo(const GroupInfo& from);

  inline GroupInfo& operator=(const GroupInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupInfo& default_instance();

  void Swap(GroupInfo* other);

  // implements Message ----------------------------------------------

  GroupInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupInfo& from);
  void MergeFrom(const GroupInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string icon = 3;
  inline bool has_icon() const;
  inline void clear_icon();
  static const int kIconFieldNumber = 3;
  inline const ::std::string& icon() const;
  inline void set_icon(const ::std::string& value);
  inline void set_icon(const char* value);
  inline void set_icon(const char* value, size_t size);
  inline ::std::string* mutable_icon();
  inline ::std::string* release_icon();
  inline void set_allocated_icon(::std::string* icon);

  // required int32 count = 4;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 4;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.publicproto.GroupInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_icon();
  inline void clear_has_icon();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::std::string* name_;
  ::std::string* icon_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_public_2eproto();
  friend void protobuf_AssignDesc_public_2eproto();
  friend void protobuf_ShutdownFile_public_2eproto();

  void InitAsDefaultInstance();
  static GroupInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupMemberInfo : public ::google::protobuf::Message {
 public:
  GroupMemberInfo();
  virtual ~GroupMemberInfo();

  GroupMemberInfo(const GroupMemberInfo& from);

  inline GroupMemberInfo& operator=(const GroupMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberInfo& default_instance();

  void Swap(GroupMemberInfo* other);

  // implements Message ----------------------------------------------

  GroupMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMemberInfo& from);
  void MergeFrom(const GroupMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string nickname = 2;
  inline bool has_nickname() const;
  inline void clear_nickname();
  static const int kNicknameFieldNumber = 2;
  inline const ::std::string& nickname() const;
  inline void set_nickname(const ::std::string& value);
  inline void set_nickname(const char* value);
  inline void set_nickname(const char* value, size_t size);
  inline ::std::string* mutable_nickname();
  inline ::std::string* release_nickname();
  inline void set_allocated_nickname(::std::string* nickname);

  // required string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // required int32 online = 4;
  inline bool has_online() const;
  inline void clear_online();
  static const int kOnlineFieldNumber = 4;
  inline ::google::protobuf::int32 online() const;
  inline void set_online(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.publicproto.GroupMemberInfo)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_nickname();
  inline void clear_has_nickname();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_online();
  inline void clear_has_online();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* nickname_;
  ::std::string* head_;
  ::google::protobuf::int32 online_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_public_2eproto();
  friend void protobuf_AssignDesc_public_2eproto();
  friend void protobuf_ShutdownFile_public_2eproto();

  void InitAsDefaultInstance();
  static GroupMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupMemberPosInfo : public ::google::protobuf::Message {
 public:
  GroupMemberPosInfo();
  virtual ~GroupMemberPosInfo();

  GroupMemberPosInfo(const GroupMemberPosInfo& from);

  inline GroupMemberPosInfo& operator=(const GroupMemberPosInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMemberPosInfo& default_instance();

  void Swap(GroupMemberPosInfo* other);

  // implements Message ----------------------------------------------

  GroupMemberPosInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMemberPosInfo& from);
  void MergeFrom(const GroupMemberPosInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.publicproto.GroupMemberPosInfo)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_public_2eproto();
  friend void protobuf_AssignDesc_public_2eproto();
  friend void protobuf_ShutdownFile_public_2eproto();

  void InitAsDefaultInstance();
  static GroupMemberPosInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// GameInfo

// required int32 gameid = 1;
inline bool GameInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GameInfo::gameid() const {
  return gameid_;
}
inline void GameInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 cur_count = 2;
inline bool GameInfo::has_cur_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameInfo::set_has_cur_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameInfo::clear_has_cur_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameInfo::clear_cur_count() {
  cur_count_ = 0;
  clear_has_cur_count();
}
inline ::google::protobuf::int32 GameInfo::cur_count() const {
  return cur_count_;
}
inline void GameInfo::set_cur_count(::google::protobuf::int32 value) {
  set_has_cur_count();
  cur_count_ = value;
}

// -------------------------------------------------------------------

// GameServerInfo

// required int32 serverid = 1;
inline bool GameServerInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameServerInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GameServerInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GameServerInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GameServerInfo::serverid() const {
  return serverid_;
}
inline void GameServerInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required int32 cur_count = 2;
inline bool GameServerInfo::has_cur_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameServerInfo::set_has_cur_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GameServerInfo::clear_has_cur_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GameServerInfo::clear_cur_count() {
  cur_count_ = 0;
  clear_has_cur_count();
}
inline ::google::protobuf::int32 GameServerInfo::cur_count() const {
  return cur_count_;
}
inline void GameServerInfo::set_cur_count(::google::protobuf::int32 value) {
  set_has_cur_count();
  cur_count_ = value;
}

// -------------------------------------------------------------------

// GateServerInfo

// required int32 id = 1;
inline bool GateServerInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateServerInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateServerInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateServerInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GateServerInfo::id() const {
  return id_;
}
inline void GateServerInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool GateServerInfo::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateServerInfo::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateServerInfo::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateServerInfo::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GateServerInfo::ip() const {
  return *ip_;
}
inline void GateServerInfo::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GateServerInfo::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GateServerInfo::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GateServerInfo::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GateServerInfo::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GateServerInfo::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool GateServerInfo::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateServerInfo::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateServerInfo::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateServerInfo::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GateServerInfo::port() const {
  return port_;
}
inline void GateServerInfo::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required int32 cur_count = 4;
inline bool GateServerInfo::has_cur_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateServerInfo::set_has_cur_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateServerInfo::clear_has_cur_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateServerInfo::clear_cur_count() {
  cur_count_ = 0;
  clear_has_cur_count();
}
inline ::google::protobuf::int32 GateServerInfo::cur_count() const {
  return cur_count_;
}
inline void GateServerInfo::set_cur_count(::google::protobuf::int32 value) {
  set_has_cur_count();
  cur_count_ = value;
}

// required int32 max_count = 5;
inline bool GateServerInfo::has_max_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateServerInfo::set_has_max_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateServerInfo::clear_has_max_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateServerInfo::clear_max_count() {
  max_count_ = 0;
  clear_has_max_count();
}
inline ::google::protobuf::int32 GateServerInfo::max_count() const {
  return max_count_;
}
inline void GateServerInfo::set_max_count(::google::protobuf::int32 value) {
  set_has_max_count();
  max_count_ = value;
}

// -------------------------------------------------------------------

// RoomPlayerInfo

// required string user = 1;
inline bool RoomPlayerInfo::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoomPlayerInfo::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoomPlayerInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoomPlayerInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& RoomPlayerInfo::user() const {
  return *user_;
}
inline void RoomPlayerInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void RoomPlayerInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void RoomPlayerInfo::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RoomPlayerInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* RoomPlayerInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RoomPlayerInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 isready = 2;
inline bool RoomPlayerInfo::has_isready() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoomPlayerInfo::set_has_isready() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoomPlayerInfo::clear_has_isready() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoomPlayerInfo::clear_isready() {
  isready_ = 0;
  clear_has_isready();
}
inline ::google::protobuf::int32 RoomPlayerInfo::isready() const {
  return isready_;
}
inline void RoomPlayerInfo::set_isready(::google::protobuf::int32 value) {
  set_has_isready();
  isready_ = value;
}

// -------------------------------------------------------------------

// GroupInfo

// required uint64 id = 1;
inline bool GroupInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupInfo::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 GroupInfo::id() const {
  return id_;
}
inline void GroupInfo::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required string name = 2;
inline bool GroupInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupInfo::name() const {
  return *name_;
}
inline void GroupInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GroupInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string icon = 3;
inline bool GroupInfo::has_icon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupInfo::set_has_icon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupInfo::clear_has_icon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupInfo::clear_icon() {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    icon_->clear();
  }
  clear_has_icon();
}
inline const ::std::string& GroupInfo::icon() const {
  return *icon_;
}
inline void GroupInfo::set_icon(const ::std::string& value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GroupInfo::set_icon(const char* value) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(value);
}
inline void GroupInfo::set_icon(const char* value, size_t size) {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  icon_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupInfo::mutable_icon() {
  set_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    icon_ = new ::std::string;
  }
  return icon_;
}
inline ::std::string* GroupInfo::release_icon() {
  clear_has_icon();
  if (icon_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = icon_;
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupInfo::set_allocated_icon(::std::string* icon) {
  if (icon_ != &::google::protobuf::internal::kEmptyString) {
    delete icon_;
  }
  if (icon) {
    set_has_icon();
    icon_ = icon;
  } else {
    clear_has_icon();
    icon_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 count = 4;
inline bool GroupInfo::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupInfo::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GroupInfo::count() const {
  return count_;
}
inline void GroupInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// GroupMemberInfo

// required string user = 1;
inline bool GroupMemberInfo::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupMemberInfo::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupMemberInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupMemberInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupMemberInfo::user() const {
  return *user_;
}
inline void GroupMemberInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupMemberInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupMemberInfo::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupMemberInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupMemberInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupMemberInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string nickname = 2;
inline bool GroupMemberInfo::has_nickname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupMemberInfo::set_has_nickname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupMemberInfo::clear_has_nickname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupMemberInfo::clear_nickname() {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    nickname_->clear();
  }
  clear_has_nickname();
}
inline const ::std::string& GroupMemberInfo::nickname() const {
  return *nickname_;
}
inline void GroupMemberInfo::set_nickname(const ::std::string& value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GroupMemberInfo::set_nickname(const char* value) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(value);
}
inline void GroupMemberInfo::set_nickname(const char* value, size_t size) {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  nickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupMemberInfo::mutable_nickname() {
  set_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    nickname_ = new ::std::string;
  }
  return nickname_;
}
inline ::std::string* GroupMemberInfo::release_nickname() {
  clear_has_nickname();
  if (nickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nickname_;
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupMemberInfo::set_allocated_nickname(::std::string* nickname) {
  if (nickname_ != &::google::protobuf::internal::kEmptyString) {
    delete nickname_;
  }
  if (nickname) {
    set_has_nickname();
    nickname_ = nickname;
  } else {
    clear_has_nickname();
    nickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string head = 3;
inline bool GroupMemberInfo::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupMemberInfo::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupMemberInfo::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupMemberInfo::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& GroupMemberInfo::head() const {
  return *head_;
}
inline void GroupMemberInfo::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupMemberInfo::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupMemberInfo::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupMemberInfo::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* GroupMemberInfo::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupMemberInfo::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 online = 4;
inline bool GroupMemberInfo::has_online() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupMemberInfo::set_has_online() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupMemberInfo::clear_has_online() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupMemberInfo::clear_online() {
  online_ = 0;
  clear_has_online();
}
inline ::google::protobuf::int32 GroupMemberInfo::online() const {
  return online_;
}
inline void GroupMemberInfo::set_online(::google::protobuf::int32 value) {
  set_has_online();
  online_ = value;
}

// -------------------------------------------------------------------

// GroupMemberPosInfo

// required string user = 1;
inline bool GroupMemberPosInfo::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupMemberPosInfo::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupMemberPosInfo::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupMemberPosInfo::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupMemberPosInfo::user() const {
  return *user_;
}
inline void GroupMemberPosInfo::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupMemberPosInfo::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupMemberPosInfo::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupMemberPosInfo::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupMemberPosInfo::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupMemberPosInfo::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 gateresid = 2;
inline bool GroupMemberPosInfo::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupMemberPosInfo::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupMemberPosInfo::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupMemberPosInfo::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupMemberPosInfo::gateresid() const {
  return gateresid_;
}
inline void GroupMemberPosInfo::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupMemberPosInfo::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupMemberPosInfo::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupMemberPosInfo::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupMemberPosInfo::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupMemberPosInfo::clientid() const {
  return clientid_;
}
inline void GroupMemberPosInfo::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace publicproto
}  // namespace sglib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_public_2eproto__INCLUDED
