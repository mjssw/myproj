// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center.proto

#ifndef PROTOBUF_center_2eproto__INCLUDED
#define PROTOBUF_center_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "public.pb.h"
// @@protoc_insertion_point(includes)

namespace sglib {
namespace centerproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_center_2eproto();
void protobuf_AssignDesc_center_2eproto();
void protobuf_ShutdownFile_center_2eproto();

class CenterServerEnterGameRsp;
class CenterLoginUserLoginRsp;
class CenterLoginGameInfoNotify;
class ServerCenterEnterGameReq;
class ServerCenterUserLogoutNotify;

// ===================================================================

class CenterServerEnterGameRsp : public ::google::protobuf::Message {
 public:
  CenterServerEnterGameRsp();
  virtual ~CenterServerEnterGameRsp();

  CenterServerEnterGameRsp(const CenterServerEnterGameRsp& from);

  inline CenterServerEnterGameRsp& operator=(const CenterServerEnterGameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterServerEnterGameRsp& default_instance();

  void Swap(CenterServerEnterGameRsp* other);

  // implements Message ----------------------------------------------

  CenterServerEnterGameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterServerEnterGameRsp& from);
  void MergeFrom(const CenterServerEnterGameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 serverid = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 7;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // optional uint64 gsid = 8;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 8;
  inline ::google::protobuf::uint64 gsid() const;
  inline void set_gsid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.centerproto.CenterServerEnterGameRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_gsid();
  inline void clear_has_gsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::uint64 gsid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_center_2eproto();
  friend void protobuf_AssignDesc_center_2eproto();
  friend void protobuf_ShutdownFile_center_2eproto();

  void InitAsDefaultInstance();
  static CenterServerEnterGameRsp* default_instance_;
};
// -------------------------------------------------------------------

class CenterLoginUserLoginRsp : public ::google::protobuf::Message {
 public:
  CenterLoginUserLoginRsp();
  virtual ~CenterLoginUserLoginRsp();

  CenterLoginUserLoginRsp(const CenterLoginUserLoginRsp& from);

  inline CenterLoginUserLoginRsp& operator=(const CenterLoginUserLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterLoginUserLoginRsp& default_instance();

  void Swap(CenterLoginUserLoginRsp* other);

  // implements Message ----------------------------------------------

  CenterLoginUserLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterLoginUserLoginRsp& from);
  void MergeFrom(const CenterLoginUserLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string token = 5;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 5;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:sglib.centerproto.CenterLoginUserLoginRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::std::string* token_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_center_2eproto();
  friend void protobuf_AssignDesc_center_2eproto();
  friend void protobuf_ShutdownFile_center_2eproto();

  void InitAsDefaultInstance();
  static CenterLoginUserLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class CenterLoginGameInfoNotify : public ::google::protobuf::Message {
 public:
  CenterLoginGameInfoNotify();
  virtual ~CenterLoginGameInfoNotify();

  CenterLoginGameInfoNotify(const CenterLoginGameInfoNotify& from);

  inline CenterLoginGameInfoNotify& operator=(const CenterLoginGameInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CenterLoginGameInfoNotify& default_instance();

  void Swap(CenterLoginGameInfoNotify* other);

  // implements Message ----------------------------------------------

  CenterLoginGameInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CenterLoginGameInfoNotify& from);
  void MergeFrom(const CenterLoginGameInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 2;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // repeated .sglib.publicproto.GameInfo games = 3;
  inline int games_size() const;
  inline void clear_games();
  static const int kGamesFieldNumber = 3;
  inline const ::sglib::publicproto::GameInfo& games(int index) const;
  inline ::sglib::publicproto::GameInfo* mutable_games(int index);
  inline ::sglib::publicproto::GameInfo* add_games();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >&
      games() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >*
      mutable_games();

  // @@protoc_insertion_point(class_scope:sglib.centerproto.CenterLoginGameInfoNotify)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo > games_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_center_2eproto();
  friend void protobuf_AssignDesc_center_2eproto();
  friend void protobuf_ShutdownFile_center_2eproto();

  void InitAsDefaultInstance();
  static CenterLoginGameInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class ServerCenterEnterGameReq : public ::google::protobuf::Message {
 public:
  ServerCenterEnterGameReq();
  virtual ~ServerCenterEnterGameReq();

  ServerCenterEnterGameReq(const ServerCenterEnterGameReq& from);

  inline ServerCenterEnterGameReq& operator=(const ServerCenterEnterGameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerCenterEnterGameReq& default_instance();

  void Swap(ServerCenterEnterGameReq* other);

  // implements Message ----------------------------------------------

  ServerCenterEnterGameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerCenterEnterGameReq& from);
  void MergeFrom(const ServerCenterEnterGameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 2;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 gameid = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 3;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional uint64 gsid = 4;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 4;
  inline ::google::protobuf::uint64 gsid() const;
  inline void set_gsid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.centerproto.ServerCenterEnterGameReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gsid();
  inline void clear_has_gsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 gsid_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_center_2eproto();
  friend void protobuf_AssignDesc_center_2eproto();
  friend void protobuf_ShutdownFile_center_2eproto();

  void InitAsDefaultInstance();
  static ServerCenterEnterGameReq* default_instance_;
};
// -------------------------------------------------------------------

class ServerCenterUserLogoutNotify : public ::google::protobuf::Message {
 public:
  ServerCenterUserLogoutNotify();
  virtual ~ServerCenterUserLogoutNotify();

  ServerCenterUserLogoutNotify(const ServerCenterUserLogoutNotify& from);

  inline ServerCenterUserLogoutNotify& operator=(const ServerCenterUserLogoutNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerCenterUserLogoutNotify& default_instance();

  void Swap(ServerCenterUserLogoutNotify* other);

  // implements Message ----------------------------------------------

  ServerCenterUserLogoutNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerCenterUserLogoutNotify& from);
  void MergeFrom(const ServerCenterUserLogoutNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.centerproto.ServerCenterUserLogoutNotify)
 private:
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_center_2eproto();
  friend void protobuf_AssignDesc_center_2eproto();
  friend void protobuf_ShutdownFile_center_2eproto();

  void InitAsDefaultInstance();
  static ServerCenterUserLogoutNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// CenterServerEnterGameRsp

// required int32 result = 1;
inline bool CenterServerEnterGameRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CenterServerEnterGameRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CenterServerEnterGameRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CenterServerEnterGameRsp::result() const {
  return result_;
}
inline void CenterServerEnterGameRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 gateid = 2;
inline bool CenterServerEnterGameRsp::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CenterServerEnterGameRsp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CenterServerEnterGameRsp::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 CenterServerEnterGameRsp::gateid() const {
  return gateid_;
}
inline void CenterServerEnterGameRsp::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 3;
inline bool CenterServerEnterGameRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CenterServerEnterGameRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CenterServerEnterGameRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 CenterServerEnterGameRsp::clientid() const {
  return clientid_;
}
inline void CenterServerEnterGameRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 gameid = 4;
inline bool CenterServerEnterGameRsp::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CenterServerEnterGameRsp::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CenterServerEnterGameRsp::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 CenterServerEnterGameRsp::gameid() const {
  return gameid_;
}
inline void CenterServerEnterGameRsp::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional string ip = 5;
inline bool CenterServerEnterGameRsp::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CenterServerEnterGameRsp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CenterServerEnterGameRsp::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& CenterServerEnterGameRsp::ip() const {
  return *ip_;
}
inline void CenterServerEnterGameRsp::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CenterServerEnterGameRsp::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void CenterServerEnterGameRsp::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CenterServerEnterGameRsp::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* CenterServerEnterGameRsp::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CenterServerEnterGameRsp::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 6;
inline bool CenterServerEnterGameRsp::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CenterServerEnterGameRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CenterServerEnterGameRsp::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 CenterServerEnterGameRsp::port() const {
  return port_;
}
inline void CenterServerEnterGameRsp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 serverid = 7;
inline bool CenterServerEnterGameRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CenterServerEnterGameRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CenterServerEnterGameRsp::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 CenterServerEnterGameRsp::serverid() const {
  return serverid_;
}
inline void CenterServerEnterGameRsp::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional uint64 gsid = 8;
inline bool CenterServerEnterGameRsp::has_gsid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CenterServerEnterGameRsp::set_has_gsid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CenterServerEnterGameRsp::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CenterServerEnterGameRsp::clear_gsid() {
  gsid_ = GOOGLE_ULONGLONG(0);
  clear_has_gsid();
}
inline ::google::protobuf::uint64 CenterServerEnterGameRsp::gsid() const {
  return gsid_;
}
inline void CenterServerEnterGameRsp::set_gsid(::google::protobuf::uint64 value) {
  set_has_gsid();
  gsid_ = value;
}

// -------------------------------------------------------------------

// CenterLoginUserLoginRsp

// required int32 result = 1;
inline bool CenterLoginUserLoginRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CenterLoginUserLoginRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CenterLoginUserLoginRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CenterLoginUserLoginRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 CenterLoginUserLoginRsp::result() const {
  return result_;
}
inline void CenterLoginUserLoginRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 gateid = 2;
inline bool CenterLoginUserLoginRsp::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CenterLoginUserLoginRsp::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CenterLoginUserLoginRsp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CenterLoginUserLoginRsp::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 CenterLoginUserLoginRsp::gateid() const {
  return gateid_;
}
inline void CenterLoginUserLoginRsp::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 3;
inline bool CenterLoginUserLoginRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CenterLoginUserLoginRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CenterLoginUserLoginRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CenterLoginUserLoginRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 CenterLoginUserLoginRsp::clientid() const {
  return clientid_;
}
inline void CenterLoginUserLoginRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 4;
inline bool CenterLoginUserLoginRsp::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CenterLoginUserLoginRsp::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CenterLoginUserLoginRsp::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CenterLoginUserLoginRsp::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& CenterLoginUserLoginRsp::user() const {
  return *user_;
}
inline void CenterLoginUserLoginRsp::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CenterLoginUserLoginRsp::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CenterLoginUserLoginRsp::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CenterLoginUserLoginRsp::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* CenterLoginUserLoginRsp::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CenterLoginUserLoginRsp::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string token = 5;
inline bool CenterLoginUserLoginRsp::has_token() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CenterLoginUserLoginRsp::set_has_token() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CenterLoginUserLoginRsp::clear_has_token() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CenterLoginUserLoginRsp::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& CenterLoginUserLoginRsp::token() const {
  return *token_;
}
inline void CenterLoginUserLoginRsp::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CenterLoginUserLoginRsp::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CenterLoginUserLoginRsp::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CenterLoginUserLoginRsp::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* CenterLoginUserLoginRsp::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CenterLoginUserLoginRsp::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CenterLoginGameInfoNotify

// required uint64 gateid = 1;
inline bool CenterLoginGameInfoNotify::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CenterLoginGameInfoNotify::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CenterLoginGameInfoNotify::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CenterLoginGameInfoNotify::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 CenterLoginGameInfoNotify::gateid() const {
  return gateid_;
}
inline void CenterLoginGameInfoNotify::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 2;
inline bool CenterLoginGameInfoNotify::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CenterLoginGameInfoNotify::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CenterLoginGameInfoNotify::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CenterLoginGameInfoNotify::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 CenterLoginGameInfoNotify::clientid() const {
  return clientid_;
}
inline void CenterLoginGameInfoNotify::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// repeated .sglib.publicproto.GameInfo games = 3;
inline int CenterLoginGameInfoNotify::games_size() const {
  return games_.size();
}
inline void CenterLoginGameInfoNotify::clear_games() {
  games_.Clear();
}
inline const ::sglib::publicproto::GameInfo& CenterLoginGameInfoNotify::games(int index) const {
  return games_.Get(index);
}
inline ::sglib::publicproto::GameInfo* CenterLoginGameInfoNotify::mutable_games(int index) {
  return games_.Mutable(index);
}
inline ::sglib::publicproto::GameInfo* CenterLoginGameInfoNotify::add_games() {
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >&
CenterLoginGameInfoNotify::games() const {
  return games_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >*
CenterLoginGameInfoNotify::mutable_games() {
  return &games_;
}

// -------------------------------------------------------------------

// ServerCenterEnterGameReq

// required uint64 gateid = 1;
inline bool ServerCenterEnterGameReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerCenterEnterGameReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerCenterEnterGameReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerCenterEnterGameReq::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 ServerCenterEnterGameReq::gateid() const {
  return gateid_;
}
inline void ServerCenterEnterGameReq::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 2;
inline bool ServerCenterEnterGameReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerCenterEnterGameReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerCenterEnterGameReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerCenterEnterGameReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 ServerCenterEnterGameReq::clientid() const {
  return clientid_;
}
inline void ServerCenterEnterGameReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 gameid = 3;
inline bool ServerCenterEnterGameReq::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerCenterEnterGameReq::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerCenterEnterGameReq::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerCenterEnterGameReq::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ServerCenterEnterGameReq::gameid() const {
  return gameid_;
}
inline void ServerCenterEnterGameReq::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional uint64 gsid = 4;
inline bool ServerCenterEnterGameReq::has_gsid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerCenterEnterGameReq::set_has_gsid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerCenterEnterGameReq::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerCenterEnterGameReq::clear_gsid() {
  gsid_ = GOOGLE_ULONGLONG(0);
  clear_has_gsid();
}
inline ::google::protobuf::uint64 ServerCenterEnterGameReq::gsid() const {
  return gsid_;
}
inline void ServerCenterEnterGameReq::set_gsid(::google::protobuf::uint64 value) {
  set_has_gsid();
  gsid_ = value;
}

// -------------------------------------------------------------------

// ServerCenterUserLogoutNotify

// required string user = 1;
inline bool ServerCenterUserLogoutNotify::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerCenterUserLogoutNotify::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerCenterUserLogoutNotify::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerCenterUserLogoutNotify::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& ServerCenterUserLogoutNotify::user() const {
  return *user_;
}
inline void ServerCenterUserLogoutNotify::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ServerCenterUserLogoutNotify::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void ServerCenterUserLogoutNotify::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerCenterUserLogoutNotify::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* ServerCenterUserLogoutNotify::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerCenterUserLogoutNotify::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace centerproto
}  // namespace sglib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_center_2eproto__INCLUDED
