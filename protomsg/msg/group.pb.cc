// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "group.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sglib {
namespace groupproto {

namespace {

const ::google::protobuf::Descriptor* CSGroupUserLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupUserLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupUserLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupUserLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupListUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupListUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupInfoUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupInfoUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupCreateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupCreateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupCreateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupCreateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupSearchReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupSearchReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupSearchRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupSearchRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupJoinRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupJoinRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupAddMemberReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupAddMemberReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupAddMemberRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupAddMemberRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupAskJoinNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupAskJoinNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupAgreeJoinReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupAgreeJoinReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupMemberJoinNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupMemberJoinNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupLeaveReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupLeaveReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupLeaveRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupLeaveRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupMemberLeaveNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupMemberLeaveNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupDeleteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupDeleteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupDeleteRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupDeleteRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupDeleteNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupDeleteNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupMessageNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupMessageNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupMemberOnlineNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupMemberOnlineNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupMemberOfflineNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupMemberOfflineNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSGroupCreateGameRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSGroupCreateGameRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupCreateGameRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupCreateGameRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCGroupCreateGameRoomNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCGroupCreateGameRoomNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGateAddGroupNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGateAddGroupNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGateDelGroupNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGateDelGroupNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerGateCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerGateCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerCenterGateCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerCenterGateCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerDynamicStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerDynamicStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupDynamicServerStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupDynamicServerStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerCenterGroupCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerCenterGroupCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerReportStatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerReportStatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerCenterReportGroupGateInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerCenterReportGroupGateInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerUserLoginNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerUserLoginNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerUserLogoutNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerUserLogoutNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanageCreateGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanageCreateGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanageGroupCreateGroupNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanageGroupCreateGroupNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerCreateGroupResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerCreateGroupResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupCreateGroupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupCreateGroupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerAddMemberToGroupReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerAddMemberToGroupReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupAddMemberToGroupRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupAddMemberToGroupRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerForAgreeJoinAskInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerForAgreeJoinAskInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupForAgreeJoinAskInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupForAgreeJoinAskInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupLoadGroupNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupLoadGroupNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerLoadGroupResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerLoadGroupResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupMemberOnlineNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupMemberOnlineNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupMemberOfflineNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupMemberOfflineNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerMemberLeaveNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerMemberLeaveNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerGroupDeleteNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerGroupDeleteNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupGroupmanagerCreateGameRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupGroupmanagerCreateGameRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGroupCreateGameRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGroupCreateGameRoomRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupmanagerGamemanagerCreateGameRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupmanagerGamemanagerCreateGameRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamemanagerGroupmanagerCreateGameRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerGroupmanagerCreateGameRoomRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_group_2eproto() {
  protobuf_AddDesc_group_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "group.proto");
  GOOGLE_CHECK(file != NULL);
  CSGroupUserLoginReq_descriptor_ = file->message_type(0);
  static const int CSGroupUserLoginReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupUserLoginReq, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupUserLoginReq, token_),
  };
  CSGroupUserLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupUserLoginReq_descriptor_,
      CSGroupUserLoginReq::default_instance_,
      CSGroupUserLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupUserLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupUserLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupUserLoginReq));
  SCGroupUserLoginRsp_descriptor_ = file->message_type(1);
  static const int SCGroupUserLoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupUserLoginRsp, result_),
  };
  SCGroupUserLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupUserLoginRsp_descriptor_,
      SCGroupUserLoginRsp::default_instance_,
      SCGroupUserLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupUserLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupUserLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupUserLoginRsp));
  SCGroupListUpdate_descriptor_ = file->message_type(2);
  static const int SCGroupListUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupListUpdate, groups_),
  };
  SCGroupListUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupListUpdate_descriptor_,
      SCGroupListUpdate::default_instance_,
      SCGroupListUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupListUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupListUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupListUpdate));
  SCGroupInfoUpdate_descriptor_ = file->message_type(3);
  static const int SCGroupInfoUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupInfoUpdate, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupInfoUpdate, members_),
  };
  SCGroupInfoUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupInfoUpdate_descriptor_,
      SCGroupInfoUpdate::default_instance_,
      SCGroupInfoUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupInfoUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupInfoUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupInfoUpdate));
  CSGroupCreateReq_descriptor_ = file->message_type(4);
  static const int CSGroupCreateReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupCreateReq, name_),
  };
  CSGroupCreateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupCreateReq_descriptor_,
      CSGroupCreateReq::default_instance_,
      CSGroupCreateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupCreateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupCreateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupCreateReq));
  SCGroupCreateRsp_descriptor_ = file->message_type(5);
  static const int SCGroupCreateRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateRsp, groupid_),
  };
  SCGroupCreateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupCreateRsp_descriptor_,
      SCGroupCreateRsp::default_instance_,
      SCGroupCreateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupCreateRsp));
  CSGroupSearchReq_descriptor_ = file->message_type(6);
  static const int CSGroupSearchReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupSearchReq, groupid_),
  };
  CSGroupSearchReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupSearchReq_descriptor_,
      CSGroupSearchReq::default_instance_,
      CSGroupSearchReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupSearchReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupSearchReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupSearchReq));
  SCGroupSearchRsp_descriptor_ = file->message_type(7);
  static const int SCGroupSearchRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupSearchRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupSearchRsp, group_),
  };
  SCGroupSearchRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupSearchRsp_descriptor_,
      SCGroupSearchRsp::default_instance_,
      SCGroupSearchRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupSearchRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupSearchRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupSearchRsp));
  CSGroupJoinReq_descriptor_ = file->message_type(8);
  static const int CSGroupJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupJoinReq, groupid_),
  };
  CSGroupJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupJoinReq_descriptor_,
      CSGroupJoinReq::default_instance_,
      CSGroupJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupJoinReq));
  SCGroupJoinRsp_descriptor_ = file->message_type(9);
  static const int SCGroupJoinRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupJoinRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupJoinRsp, groupid_),
  };
  SCGroupJoinRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupJoinRsp_descriptor_,
      SCGroupJoinRsp::default_instance_,
      SCGroupJoinRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupJoinRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupJoinRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupJoinRsp));
  CSGroupAddMemberReq_descriptor_ = file->message_type(10);
  static const int CSGroupAddMemberReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupAddMemberReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupAddMemberReq, users_),
  };
  CSGroupAddMemberReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupAddMemberReq_descriptor_,
      CSGroupAddMemberReq::default_instance_,
      CSGroupAddMemberReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupAddMemberReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupAddMemberReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupAddMemberReq));
  SCGroupAddMemberRsp_descriptor_ = file->message_type(11);
  static const int SCGroupAddMemberRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupAddMemberRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupAddMemberRsp, groupid_),
  };
  SCGroupAddMemberRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupAddMemberRsp_descriptor_,
      SCGroupAddMemberRsp::default_instance_,
      SCGroupAddMemberRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupAddMemberRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupAddMemberRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupAddMemberRsp));
  SCGroupAskJoinNtf_descriptor_ = file->message_type(12);
  static const int SCGroupAskJoinNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupAskJoinNtf, group_),
  };
  SCGroupAskJoinNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupAskJoinNtf_descriptor_,
      SCGroupAskJoinNtf::default_instance_,
      SCGroupAskJoinNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupAskJoinNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupAskJoinNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupAskJoinNtf));
  CSGroupAgreeJoinReq_descriptor_ = file->message_type(13);
  static const int CSGroupAgreeJoinReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupAgreeJoinReq, groupid_),
  };
  CSGroupAgreeJoinReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupAgreeJoinReq_descriptor_,
      CSGroupAgreeJoinReq::default_instance_,
      CSGroupAgreeJoinReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupAgreeJoinReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupAgreeJoinReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupAgreeJoinReq));
  SCGroupMemberJoinNtf_descriptor_ = file->message_type(14);
  static const int SCGroupMemberJoinNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberJoinNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberJoinNtf, member_),
  };
  SCGroupMemberJoinNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupMemberJoinNtf_descriptor_,
      SCGroupMemberJoinNtf::default_instance_,
      SCGroupMemberJoinNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberJoinNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberJoinNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupMemberJoinNtf));
  CSGroupLeaveReq_descriptor_ = file->message_type(15);
  static const int CSGroupLeaveReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupLeaveReq, groupid_),
  };
  CSGroupLeaveReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupLeaveReq_descriptor_,
      CSGroupLeaveReq::default_instance_,
      CSGroupLeaveReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupLeaveReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupLeaveReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupLeaveReq));
  SCGroupLeaveRsp_descriptor_ = file->message_type(16);
  static const int SCGroupLeaveRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupLeaveRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupLeaveRsp, groupid_),
  };
  SCGroupLeaveRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupLeaveRsp_descriptor_,
      SCGroupLeaveRsp::default_instance_,
      SCGroupLeaveRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupLeaveRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupLeaveRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupLeaveRsp));
  SCGroupMemberLeaveNtf_descriptor_ = file->message_type(17);
  static const int SCGroupMemberLeaveNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberLeaveNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberLeaveNtf, user_),
  };
  SCGroupMemberLeaveNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupMemberLeaveNtf_descriptor_,
      SCGroupMemberLeaveNtf::default_instance_,
      SCGroupMemberLeaveNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberLeaveNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberLeaveNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupMemberLeaveNtf));
  CSGroupDeleteReq_descriptor_ = file->message_type(18);
  static const int CSGroupDeleteReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupDeleteReq, groupid_),
  };
  CSGroupDeleteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupDeleteReq_descriptor_,
      CSGroupDeleteReq::default_instance_,
      CSGroupDeleteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupDeleteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupDeleteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupDeleteReq));
  SCGroupDeleteRsp_descriptor_ = file->message_type(19);
  static const int SCGroupDeleteRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupDeleteRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupDeleteRsp, groupid_),
  };
  SCGroupDeleteRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupDeleteRsp_descriptor_,
      SCGroupDeleteRsp::default_instance_,
      SCGroupDeleteRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupDeleteRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupDeleteRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupDeleteRsp));
  SCGroupDeleteNtf_descriptor_ = file->message_type(20);
  static const int SCGroupDeleteNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupDeleteNtf, groupid_),
  };
  SCGroupDeleteNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupDeleteNtf_descriptor_,
      SCGroupDeleteNtf::default_instance_,
      SCGroupDeleteNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupDeleteNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupDeleteNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupDeleteNtf));
  CSGroupMessageReq_descriptor_ = file->message_type(21);
  static const int CSGroupMessageReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupMessageReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupMessageReq, content_),
  };
  CSGroupMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupMessageReq_descriptor_,
      CSGroupMessageReq::default_instance_,
      CSGroupMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupMessageReq));
  SCGroupMessageNtf_descriptor_ = file->message_type(22);
  static const int SCGroupMessageNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMessageNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMessageNtf, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMessageNtf, sender_),
  };
  SCGroupMessageNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupMessageNtf_descriptor_,
      SCGroupMessageNtf::default_instance_,
      SCGroupMessageNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMessageNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMessageNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupMessageNtf));
  SCGroupMemberOnlineNtf_descriptor_ = file->message_type(23);
  static const int SCGroupMemberOnlineNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOnlineNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOnlineNtf, user_),
  };
  SCGroupMemberOnlineNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupMemberOnlineNtf_descriptor_,
      SCGroupMemberOnlineNtf::default_instance_,
      SCGroupMemberOnlineNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOnlineNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOnlineNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupMemberOnlineNtf));
  SCGroupMemberOfflineNtf_descriptor_ = file->message_type(24);
  static const int SCGroupMemberOfflineNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOfflineNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOfflineNtf, user_),
  };
  SCGroupMemberOfflineNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupMemberOfflineNtf_descriptor_,
      SCGroupMemberOfflineNtf::default_instance_,
      SCGroupMemberOfflineNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOfflineNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupMemberOfflineNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupMemberOfflineNtf));
  CSGroupCreateGameRoomReq_descriptor_ = file->message_type(25);
  static const int CSGroupCreateGameRoomReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupCreateGameRoomReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupCreateGameRoomReq, game_),
  };
  CSGroupCreateGameRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSGroupCreateGameRoomReq_descriptor_,
      CSGroupCreateGameRoomReq::default_instance_,
      CSGroupCreateGameRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupCreateGameRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSGroupCreateGameRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSGroupCreateGameRoomReq));
  SCGroupCreateGameRoomRsp_descriptor_ = file->message_type(26);
  static const int SCGroupCreateGameRoomRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, password_),
  };
  SCGroupCreateGameRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupCreateGameRoomRsp_descriptor_,
      SCGroupCreateGameRoomRsp::default_instance_,
      SCGroupCreateGameRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupCreateGameRoomRsp));
  SCGroupCreateGameRoomNtf_descriptor_ = file->message_type(27);
  static const int SCGroupCreateGameRoomNtf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, creater_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, groupid_),
  };
  SCGroupCreateGameRoomNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCGroupCreateGameRoomNtf_descriptor_,
      SCGroupCreateGameRoomNtf::default_instance_,
      SCGroupCreateGameRoomNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCGroupCreateGameRoomNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCGroupCreateGameRoomNtf));
  GroupGateAddGroupNtf_descriptor_ = file->message_type(28);
  static const int GroupGateAddGroupNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGateAddGroupNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGateAddGroupNtf, serverid_),
  };
  GroupGateAddGroupNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGateAddGroupNtf_descriptor_,
      GroupGateAddGroupNtf::default_instance_,
      GroupGateAddGroupNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGateAddGroupNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGateAddGroupNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGateAddGroupNtf));
  GroupGateDelGroupNtf_descriptor_ = file->message_type(29);
  static const int GroupGateDelGroupNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGateDelGroupNtf, groupid_),
  };
  GroupGateDelGroupNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGateDelGroupNtf_descriptor_,
      GroupGateDelGroupNtf::default_instance_,
      GroupGateDelGroupNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGateDelGroupNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGateDelGroupNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGateDelGroupNtf));
  GroupGroupmanagerGateCloseNtf_descriptor_ = file->message_type(30);
  static const int GroupGroupmanagerGateCloseNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerGateCloseNtf, gateid_),
  };
  GroupGroupmanagerGateCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerGateCloseNtf_descriptor_,
      GroupGroupmanagerGateCloseNtf::default_instance_,
      GroupGroupmanagerGateCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerGateCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerGateCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerGateCloseNtf));
  GroupmanagerCenterGateCloseNtf_descriptor_ = file->message_type(31);
  static const int GroupmanagerCenterGateCloseNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterGateCloseNtf, gateid_),
  };
  GroupmanagerCenterGateCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerCenterGateCloseNtf_descriptor_,
      GroupmanagerCenterGateCloseNtf::default_instance_,
      GroupmanagerCenterGateCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterGateCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterGateCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerCenterGateCloseNtf));
  GroupGroupmanagerDynamicStartNtf_descriptor_ = file->message_type(32);
  static const int GroupGroupmanagerDynamicStartNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerDynamicStartNtf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerDynamicStartNtf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerDynamicStartNtf, port_),
  };
  GroupGroupmanagerDynamicStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerDynamicStartNtf_descriptor_,
      GroupGroupmanagerDynamicStartNtf::default_instance_,
      GroupGroupmanagerDynamicStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerDynamicStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerDynamicStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerDynamicStartNtf));
  GroupmanagerGroupDynamicServerStartNtf_descriptor_ = file->message_type(33);
  static const int GroupmanagerGroupDynamicServerStartNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupDynamicServerStartNtf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupDynamicServerStartNtf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupDynamicServerStartNtf, port_),
  };
  GroupmanagerGroupDynamicServerStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupDynamicServerStartNtf_descriptor_,
      GroupmanagerGroupDynamicServerStartNtf::default_instance_,
      GroupmanagerGroupDynamicServerStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupDynamicServerStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupDynamicServerStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupDynamicServerStartNtf));
  GroupmanagerCenterGroupCloseNtf_descriptor_ = file->message_type(34);
  static const int GroupmanagerCenterGroupCloseNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterGroupCloseNtf, serverid_),
  };
  GroupmanagerCenterGroupCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerCenterGroupCloseNtf_descriptor_,
      GroupmanagerCenterGroupCloseNtf::default_instance_,
      GroupmanagerCenterGroupCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterGroupCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterGroupCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerCenterGroupCloseNtf));
  GroupGroupmanagerReportStatusInfo_descriptor_ = file->message_type(35);
  static const int GroupGroupmanagerReportStatusInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerReportStatusInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerReportStatusInfo, totalgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerReportStatusInfo, totalmember_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerReportStatusInfo, gateservers_),
  };
  GroupGroupmanagerReportStatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerReportStatusInfo_descriptor_,
      GroupGroupmanagerReportStatusInfo::default_instance_,
      GroupGroupmanagerReportStatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerReportStatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerReportStatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerReportStatusInfo));
  GroupmanagerCenterReportGroupGateInfo_descriptor_ = file->message_type(36);
  static const int GroupmanagerCenterReportGroupGateInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterReportGroupGateInfo, gateservers_),
  };
  GroupmanagerCenterReportGroupGateInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerCenterReportGroupGateInfo_descriptor_,
      GroupmanagerCenterReportGroupGateInfo::default_instance_,
      GroupmanagerCenterReportGroupGateInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterReportGroupGateInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerCenterReportGroupGateInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerCenterReportGroupGateInfo));
  GroupGroupmanagerUserLoginNtf_descriptor_ = file->message_type(37);
  static const int GroupGroupmanagerUserLoginNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLoginNtf, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLoginNtf, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLoginNtf, user_),
  };
  GroupGroupmanagerUserLoginNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerUserLoginNtf_descriptor_,
      GroupGroupmanagerUserLoginNtf::default_instance_,
      GroupGroupmanagerUserLoginNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLoginNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLoginNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerUserLoginNtf));
  GroupGroupmanagerUserLogoutNtf_descriptor_ = file->message_type(38);
  static const int GroupGroupmanagerUserLogoutNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLogoutNtf, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLogoutNtf, clientid_),
  };
  GroupGroupmanagerUserLogoutNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerUserLogoutNtf_descriptor_,
      GroupGroupmanagerUserLogoutNtf::default_instance_,
      GroupGroupmanagerUserLogoutNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLogoutNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerUserLogoutNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerUserLogoutNtf));
  GroupGroupmanageCreateGroupReq_descriptor_ = file->message_type(39);
  static const int GroupGroupmanageCreateGroupReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanageCreateGroupReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanageCreateGroupReq, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanageCreateGroupReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanageCreateGroupReq, name_),
  };
  GroupGroupmanageCreateGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanageCreateGroupReq_descriptor_,
      GroupGroupmanageCreateGroupReq::default_instance_,
      GroupGroupmanageCreateGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanageCreateGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanageCreateGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanageCreateGroupReq));
  GroupmanageGroupCreateGroupNtf_descriptor_ = file->message_type(40);
  static const int GroupmanageGroupCreateGroupNtf_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, groupserverid_),
  };
  GroupmanageGroupCreateGroupNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanageGroupCreateGroupNtf_descriptor_,
      GroupmanageGroupCreateGroupNtf::default_instance_,
      GroupmanageGroupCreateGroupNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanageGroupCreateGroupNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanageGroupCreateGroupNtf));
  GroupGroupmanagerCreateGroupResult_descriptor_ = file->message_type(41);
  static const int GroupGroupmanagerCreateGroupResult_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, groupserverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, serverid_),
  };
  GroupGroupmanagerCreateGroupResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerCreateGroupResult_descriptor_,
      GroupGroupmanagerCreateGroupResult::default_instance_,
      GroupGroupmanagerCreateGroupResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGroupResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerCreateGroupResult));
  GroupmanagerGroupCreateGroupRsp_descriptor_ = file->message_type(42);
  static const int GroupmanagerGroupCreateGroupRsp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, serverid_),
  };
  GroupmanagerGroupCreateGroupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupCreateGroupRsp_descriptor_,
      GroupmanagerGroupCreateGroupRsp::default_instance_,
      GroupmanagerGroupCreateGroupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGroupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupCreateGroupRsp));
  GroupGroupmanagerAddMemberToGroupReq_descriptor_ = file->message_type(43);
  static const int GroupGroupmanagerAddMemberToGroupReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerAddMemberToGroupReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerAddMemberToGroupReq, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerAddMemberToGroupReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerAddMemberToGroupReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerAddMemberToGroupReq, users_),
  };
  GroupGroupmanagerAddMemberToGroupReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerAddMemberToGroupReq_descriptor_,
      GroupGroupmanagerAddMemberToGroupReq::default_instance_,
      GroupGroupmanagerAddMemberToGroupReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerAddMemberToGroupReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerAddMemberToGroupReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerAddMemberToGroupReq));
  GroupmanagerGroupAddMemberToGroupRsp_descriptor_ = file->message_type(44);
  static const int GroupmanagerGroupAddMemberToGroupRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupAddMemberToGroupRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupAddMemberToGroupRsp, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupAddMemberToGroupRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupAddMemberToGroupRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupAddMemberToGroupRsp, users_),
  };
  GroupmanagerGroupAddMemberToGroupRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupAddMemberToGroupRsp_descriptor_,
      GroupmanagerGroupAddMemberToGroupRsp::default_instance_,
      GroupmanagerGroupAddMemberToGroupRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupAddMemberToGroupRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupAddMemberToGroupRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupAddMemberToGroupRsp));
  GroupGroupmanagerForAgreeJoinAskInfoReq_descriptor_ = file->message_type(45);
  static const int GroupGroupmanagerForAgreeJoinAskInfoReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerForAgreeJoinAskInfoReq, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerForAgreeJoinAskInfoReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerForAgreeJoinAskInfoReq, groupid_),
  };
  GroupGroupmanagerForAgreeJoinAskInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerForAgreeJoinAskInfoReq_descriptor_,
      GroupGroupmanagerForAgreeJoinAskInfoReq::default_instance_,
      GroupGroupmanagerForAgreeJoinAskInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerForAgreeJoinAskInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerForAgreeJoinAskInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerForAgreeJoinAskInfoReq));
  GroupmanagerGroupForAgreeJoinAskInfoRsp_descriptor_ = file->message_type(46);
  static const int GroupmanagerGroupForAgreeJoinAskInfoRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupForAgreeJoinAskInfoRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupForAgreeJoinAskInfoRsp, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupForAgreeJoinAskInfoRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupForAgreeJoinAskInfoRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupForAgreeJoinAskInfoRsp, user_),
  };
  GroupmanagerGroupForAgreeJoinAskInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupForAgreeJoinAskInfoRsp_descriptor_,
      GroupmanagerGroupForAgreeJoinAskInfoRsp::default_instance_,
      GroupmanagerGroupForAgreeJoinAskInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupForAgreeJoinAskInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupForAgreeJoinAskInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupForAgreeJoinAskInfoRsp));
  GroupmanagerGroupLoadGroupNtf_descriptor_ = file->message_type(47);
  static const int GroupmanagerGroupLoadGroupNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupLoadGroupNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupLoadGroupNtf, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupLoadGroupNtf, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupLoadGroupNtf, user_),
  };
  GroupmanagerGroupLoadGroupNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupLoadGroupNtf_descriptor_,
      GroupmanagerGroupLoadGroupNtf::default_instance_,
      GroupmanagerGroupLoadGroupNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupLoadGroupNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupLoadGroupNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupLoadGroupNtf));
  GroupGroupmanagerLoadGroupResult_descriptor_ = file->message_type(48);
  static const int GroupGroupmanagerLoadGroupResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, totalgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, totalmember_),
  };
  GroupGroupmanagerLoadGroupResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerLoadGroupResult_descriptor_,
      GroupGroupmanagerLoadGroupResult::default_instance_,
      GroupGroupmanagerLoadGroupResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerLoadGroupResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerLoadGroupResult));
  GroupmanagerGroupMemberOnlineNtf_descriptor_ = file->message_type(49);
  static const int GroupmanagerGroupMemberOnlineNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOnlineNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOnlineNtf, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOnlineNtf, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOnlineNtf, user_),
  };
  GroupmanagerGroupMemberOnlineNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupMemberOnlineNtf_descriptor_,
      GroupmanagerGroupMemberOnlineNtf::default_instance_,
      GroupmanagerGroupMemberOnlineNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOnlineNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOnlineNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupMemberOnlineNtf));
  GroupmanagerGroupMemberOfflineNtf_descriptor_ = file->message_type(50);
  static const int GroupmanagerGroupMemberOfflineNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOfflineNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOfflineNtf, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOfflineNtf, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOfflineNtf, user_),
  };
  GroupmanagerGroupMemberOfflineNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupMemberOfflineNtf_descriptor_,
      GroupmanagerGroupMemberOfflineNtf::default_instance_,
      GroupmanagerGroupMemberOfflineNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOfflineNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupMemberOfflineNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupMemberOfflineNtf));
  GroupGroupmanagerMemberLeaveNtf_descriptor_ = file->message_type(51);
  static const int GroupGroupmanagerMemberLeaveNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerMemberLeaveNtf, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerMemberLeaveNtf, user_),
  };
  GroupGroupmanagerMemberLeaveNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerMemberLeaveNtf_descriptor_,
      GroupGroupmanagerMemberLeaveNtf::default_instance_,
      GroupGroupmanagerMemberLeaveNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerMemberLeaveNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerMemberLeaveNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerMemberLeaveNtf));
  GroupGroupmanagerGroupDeleteNtf_descriptor_ = file->message_type(52);
  static const int GroupGroupmanagerGroupDeleteNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerGroupDeleteNtf, groupid_),
  };
  GroupGroupmanagerGroupDeleteNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerGroupDeleteNtf_descriptor_,
      GroupGroupmanagerGroupDeleteNtf::default_instance_,
      GroupGroupmanagerGroupDeleteNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerGroupDeleteNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerGroupDeleteNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerGroupDeleteNtf));
  GroupGroupmanagerCreateGameRoomReq_descriptor_ = file->message_type(53);
  static const int GroupGroupmanagerCreateGameRoomReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGameRoomReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGameRoomReq, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGameRoomReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGameRoomReq, game_),
  };
  GroupGroupmanagerCreateGameRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupGroupmanagerCreateGameRoomReq_descriptor_,
      GroupGroupmanagerCreateGameRoomReq::default_instance_,
      GroupGroupmanagerCreateGameRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGameRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupGroupmanagerCreateGameRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupGroupmanagerCreateGameRoomReq));
  GroupmanagerGroupCreateGameRoomRsp_descriptor_ = file->message_type(54);
  static const int GroupmanagerGroupCreateGameRoomRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, password_),
  };
  GroupmanagerGroupCreateGameRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGroupCreateGameRoomRsp_descriptor_,
      GroupmanagerGroupCreateGameRoomRsp::default_instance_,
      GroupmanagerGroupCreateGameRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGroupCreateGameRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGroupCreateGameRoomRsp));
  GroupmanagerGamemanagerCreateGameRoomReq_descriptor_ = file->message_type(55);
  static const int GroupmanagerGamemanagerCreateGameRoomReq_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, serverid_),
  };
  GroupmanagerGamemanagerCreateGameRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupmanagerGamemanagerCreateGameRoomReq_descriptor_,
      GroupmanagerGamemanagerCreateGameRoomReq::default_instance_,
      GroupmanagerGamemanagerCreateGameRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupmanagerGamemanagerCreateGameRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupmanagerGamemanagerCreateGameRoomReq));
  GamemanagerGroupmanagerCreateGameRoomRsp_descriptor_ = file->message_type(56);
  static const int GamemanagerGroupmanagerCreateGameRoomRsp_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, password_),
  };
  GamemanagerGroupmanagerCreateGameRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerGroupmanagerCreateGameRoomRsp_descriptor_,
      GamemanagerGroupmanagerCreateGameRoomRsp::default_instance_,
      GamemanagerGroupmanagerCreateGameRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerCreateGameRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerGroupmanagerCreateGameRoomRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_group_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupUserLoginReq_descriptor_, &CSGroupUserLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupUserLoginRsp_descriptor_, &SCGroupUserLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupListUpdate_descriptor_, &SCGroupListUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupInfoUpdate_descriptor_, &SCGroupInfoUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupCreateReq_descriptor_, &CSGroupCreateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupCreateRsp_descriptor_, &SCGroupCreateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupSearchReq_descriptor_, &CSGroupSearchReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupSearchRsp_descriptor_, &SCGroupSearchRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupJoinReq_descriptor_, &CSGroupJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupJoinRsp_descriptor_, &SCGroupJoinRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupAddMemberReq_descriptor_, &CSGroupAddMemberReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupAddMemberRsp_descriptor_, &SCGroupAddMemberRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupAskJoinNtf_descriptor_, &SCGroupAskJoinNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupAgreeJoinReq_descriptor_, &CSGroupAgreeJoinReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupMemberJoinNtf_descriptor_, &SCGroupMemberJoinNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupLeaveReq_descriptor_, &CSGroupLeaveReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupLeaveRsp_descriptor_, &SCGroupLeaveRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupMemberLeaveNtf_descriptor_, &SCGroupMemberLeaveNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupDeleteReq_descriptor_, &CSGroupDeleteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupDeleteRsp_descriptor_, &SCGroupDeleteRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupDeleteNtf_descriptor_, &SCGroupDeleteNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupMessageReq_descriptor_, &CSGroupMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupMessageNtf_descriptor_, &SCGroupMessageNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupMemberOnlineNtf_descriptor_, &SCGroupMemberOnlineNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupMemberOfflineNtf_descriptor_, &SCGroupMemberOfflineNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSGroupCreateGameRoomReq_descriptor_, &CSGroupCreateGameRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupCreateGameRoomRsp_descriptor_, &SCGroupCreateGameRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCGroupCreateGameRoomNtf_descriptor_, &SCGroupCreateGameRoomNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGateAddGroupNtf_descriptor_, &GroupGateAddGroupNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGateDelGroupNtf_descriptor_, &GroupGateDelGroupNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerGateCloseNtf_descriptor_, &GroupGroupmanagerGateCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerCenterGateCloseNtf_descriptor_, &GroupmanagerCenterGateCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerDynamicStartNtf_descriptor_, &GroupGroupmanagerDynamicStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupDynamicServerStartNtf_descriptor_, &GroupmanagerGroupDynamicServerStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerCenterGroupCloseNtf_descriptor_, &GroupmanagerCenterGroupCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerReportStatusInfo_descriptor_, &GroupGroupmanagerReportStatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerCenterReportGroupGateInfo_descriptor_, &GroupmanagerCenterReportGroupGateInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerUserLoginNtf_descriptor_, &GroupGroupmanagerUserLoginNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerUserLogoutNtf_descriptor_, &GroupGroupmanagerUserLogoutNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanageCreateGroupReq_descriptor_, &GroupGroupmanageCreateGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanageGroupCreateGroupNtf_descriptor_, &GroupmanageGroupCreateGroupNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerCreateGroupResult_descriptor_, &GroupGroupmanagerCreateGroupResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupCreateGroupRsp_descriptor_, &GroupmanagerGroupCreateGroupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerAddMemberToGroupReq_descriptor_, &GroupGroupmanagerAddMemberToGroupReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupAddMemberToGroupRsp_descriptor_, &GroupmanagerGroupAddMemberToGroupRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerForAgreeJoinAskInfoReq_descriptor_, &GroupGroupmanagerForAgreeJoinAskInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupForAgreeJoinAskInfoRsp_descriptor_, &GroupmanagerGroupForAgreeJoinAskInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupLoadGroupNtf_descriptor_, &GroupmanagerGroupLoadGroupNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerLoadGroupResult_descriptor_, &GroupGroupmanagerLoadGroupResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupMemberOnlineNtf_descriptor_, &GroupmanagerGroupMemberOnlineNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupMemberOfflineNtf_descriptor_, &GroupmanagerGroupMemberOfflineNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerMemberLeaveNtf_descriptor_, &GroupGroupmanagerMemberLeaveNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerGroupDeleteNtf_descriptor_, &GroupGroupmanagerGroupDeleteNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupGroupmanagerCreateGameRoomReq_descriptor_, &GroupGroupmanagerCreateGameRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGroupCreateGameRoomRsp_descriptor_, &GroupmanagerGroupCreateGameRoomRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupmanagerGamemanagerCreateGameRoomReq_descriptor_, &GroupmanagerGamemanagerCreateGameRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerGroupmanagerCreateGameRoomRsp_descriptor_, &GamemanagerGroupmanagerCreateGameRoomRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_group_2eproto() {
  delete CSGroupUserLoginReq::default_instance_;
  delete CSGroupUserLoginReq_reflection_;
  delete SCGroupUserLoginRsp::default_instance_;
  delete SCGroupUserLoginRsp_reflection_;
  delete SCGroupListUpdate::default_instance_;
  delete SCGroupListUpdate_reflection_;
  delete SCGroupInfoUpdate::default_instance_;
  delete SCGroupInfoUpdate_reflection_;
  delete CSGroupCreateReq::default_instance_;
  delete CSGroupCreateReq_reflection_;
  delete SCGroupCreateRsp::default_instance_;
  delete SCGroupCreateRsp_reflection_;
  delete CSGroupSearchReq::default_instance_;
  delete CSGroupSearchReq_reflection_;
  delete SCGroupSearchRsp::default_instance_;
  delete SCGroupSearchRsp_reflection_;
  delete CSGroupJoinReq::default_instance_;
  delete CSGroupJoinReq_reflection_;
  delete SCGroupJoinRsp::default_instance_;
  delete SCGroupJoinRsp_reflection_;
  delete CSGroupAddMemberReq::default_instance_;
  delete CSGroupAddMemberReq_reflection_;
  delete SCGroupAddMemberRsp::default_instance_;
  delete SCGroupAddMemberRsp_reflection_;
  delete SCGroupAskJoinNtf::default_instance_;
  delete SCGroupAskJoinNtf_reflection_;
  delete CSGroupAgreeJoinReq::default_instance_;
  delete CSGroupAgreeJoinReq_reflection_;
  delete SCGroupMemberJoinNtf::default_instance_;
  delete SCGroupMemberJoinNtf_reflection_;
  delete CSGroupLeaveReq::default_instance_;
  delete CSGroupLeaveReq_reflection_;
  delete SCGroupLeaveRsp::default_instance_;
  delete SCGroupLeaveRsp_reflection_;
  delete SCGroupMemberLeaveNtf::default_instance_;
  delete SCGroupMemberLeaveNtf_reflection_;
  delete CSGroupDeleteReq::default_instance_;
  delete CSGroupDeleteReq_reflection_;
  delete SCGroupDeleteRsp::default_instance_;
  delete SCGroupDeleteRsp_reflection_;
  delete SCGroupDeleteNtf::default_instance_;
  delete SCGroupDeleteNtf_reflection_;
  delete CSGroupMessageReq::default_instance_;
  delete CSGroupMessageReq_reflection_;
  delete SCGroupMessageNtf::default_instance_;
  delete SCGroupMessageNtf_reflection_;
  delete SCGroupMemberOnlineNtf::default_instance_;
  delete SCGroupMemberOnlineNtf_reflection_;
  delete SCGroupMemberOfflineNtf::default_instance_;
  delete SCGroupMemberOfflineNtf_reflection_;
  delete CSGroupCreateGameRoomReq::default_instance_;
  delete CSGroupCreateGameRoomReq_reflection_;
  delete SCGroupCreateGameRoomRsp::default_instance_;
  delete SCGroupCreateGameRoomRsp_reflection_;
  delete SCGroupCreateGameRoomNtf::default_instance_;
  delete SCGroupCreateGameRoomNtf_reflection_;
  delete GroupGateAddGroupNtf::default_instance_;
  delete GroupGateAddGroupNtf_reflection_;
  delete GroupGateDelGroupNtf::default_instance_;
  delete GroupGateDelGroupNtf_reflection_;
  delete GroupGroupmanagerGateCloseNtf::default_instance_;
  delete GroupGroupmanagerGateCloseNtf_reflection_;
  delete GroupmanagerCenterGateCloseNtf::default_instance_;
  delete GroupmanagerCenterGateCloseNtf_reflection_;
  delete GroupGroupmanagerDynamicStartNtf::default_instance_;
  delete GroupGroupmanagerDynamicStartNtf_reflection_;
  delete GroupmanagerGroupDynamicServerStartNtf::default_instance_;
  delete GroupmanagerGroupDynamicServerStartNtf_reflection_;
  delete GroupmanagerCenterGroupCloseNtf::default_instance_;
  delete GroupmanagerCenterGroupCloseNtf_reflection_;
  delete GroupGroupmanagerReportStatusInfo::default_instance_;
  delete GroupGroupmanagerReportStatusInfo_reflection_;
  delete GroupmanagerCenterReportGroupGateInfo::default_instance_;
  delete GroupmanagerCenterReportGroupGateInfo_reflection_;
  delete GroupGroupmanagerUserLoginNtf::default_instance_;
  delete GroupGroupmanagerUserLoginNtf_reflection_;
  delete GroupGroupmanagerUserLogoutNtf::default_instance_;
  delete GroupGroupmanagerUserLogoutNtf_reflection_;
  delete GroupGroupmanageCreateGroupReq::default_instance_;
  delete GroupGroupmanageCreateGroupReq_reflection_;
  delete GroupmanageGroupCreateGroupNtf::default_instance_;
  delete GroupmanageGroupCreateGroupNtf_reflection_;
  delete GroupGroupmanagerCreateGroupResult::default_instance_;
  delete GroupGroupmanagerCreateGroupResult_reflection_;
  delete GroupmanagerGroupCreateGroupRsp::default_instance_;
  delete GroupmanagerGroupCreateGroupRsp_reflection_;
  delete GroupGroupmanagerAddMemberToGroupReq::default_instance_;
  delete GroupGroupmanagerAddMemberToGroupReq_reflection_;
  delete GroupmanagerGroupAddMemberToGroupRsp::default_instance_;
  delete GroupmanagerGroupAddMemberToGroupRsp_reflection_;
  delete GroupGroupmanagerForAgreeJoinAskInfoReq::default_instance_;
  delete GroupGroupmanagerForAgreeJoinAskInfoReq_reflection_;
  delete GroupmanagerGroupForAgreeJoinAskInfoRsp::default_instance_;
  delete GroupmanagerGroupForAgreeJoinAskInfoRsp_reflection_;
  delete GroupmanagerGroupLoadGroupNtf::default_instance_;
  delete GroupmanagerGroupLoadGroupNtf_reflection_;
  delete GroupGroupmanagerLoadGroupResult::default_instance_;
  delete GroupGroupmanagerLoadGroupResult_reflection_;
  delete GroupmanagerGroupMemberOnlineNtf::default_instance_;
  delete GroupmanagerGroupMemberOnlineNtf_reflection_;
  delete GroupmanagerGroupMemberOfflineNtf::default_instance_;
  delete GroupmanagerGroupMemberOfflineNtf_reflection_;
  delete GroupGroupmanagerMemberLeaveNtf::default_instance_;
  delete GroupGroupmanagerMemberLeaveNtf_reflection_;
  delete GroupGroupmanagerGroupDeleteNtf::default_instance_;
  delete GroupGroupmanagerGroupDeleteNtf_reflection_;
  delete GroupGroupmanagerCreateGameRoomReq::default_instance_;
  delete GroupGroupmanagerCreateGameRoomReq_reflection_;
  delete GroupmanagerGroupCreateGameRoomRsp::default_instance_;
  delete GroupmanagerGroupCreateGameRoomRsp_reflection_;
  delete GroupmanagerGamemanagerCreateGameRoomReq::default_instance_;
  delete GroupmanagerGamemanagerCreateGameRoomReq_reflection_;
  delete GamemanagerGroupmanagerCreateGameRoomRsp::default_instance_;
  delete GamemanagerGroupmanagerCreateGameRoomRsp_reflection_;
}

void protobuf_AddDesc_group_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::sglib::publicproto::protobuf_AddDesc_public_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013group.proto\022\020sglib.groupproto\032\014public."
    "proto\"2\n\023CSGroupUserLoginReq\022\014\n\004user\030\001 \002"
    "(\t\022\r\n\005token\030\002 \002(\t\"%\n\023SCGroupUserLoginRsp"
    "\022\016\n\006result\030\001 \002(\005\"A\n\021SCGroupListUpdate\022,\n"
    "\006groups\030\001 \003(\0132\034.sglib.publicproto.GroupI"
    "nfo\"T\n\021SCGroupInfoUpdate\022\n\n\002id\030\001 \002(\004\0223\n\007"
    "members\030\002 \003(\0132\".sglib.publicproto.GroupM"
    "emberInfo\" \n\020CSGroupCreateReq\022\014\n\004name\030\001 "
    "\002(\t\"A\n\020SCGroupCreateRsp\022\016\n\006result\030\001 \002(\005\022"
    "\014\n\004name\030\002 \002(\t\022\017\n\007groupid\030\003 \001(\004\"#\n\020CSGrou"
    "pSearchReq\022\017\n\007groupid\030\001 \002(\004\"O\n\020SCGroupSe"
    "archRsp\022\016\n\006result\030\001 \002(\005\022+\n\005group\030\002 \001(\0132\034"
    ".sglib.publicproto.GroupInfo\"!\n\016CSGroupJ"
    "oinReq\022\017\n\007groupid\030\001 \002(\004\"1\n\016SCGroupJoinRs"
    "p\022\016\n\006result\030\001 \002(\005\022\017\n\007groupid\030\002 \002(\004\"5\n\023CS"
    "GroupAddMemberReq\022\017\n\007groupid\030\001 \002(\004\022\r\n\005us"
    "ers\030\002 \003(\t\"6\n\023SCGroupAddMemberRsp\022\016\n\006resu"
    "lt\030\001 \002(\005\022\017\n\007groupid\030\002 \002(\004\"@\n\021SCGroupAskJ"
    "oinNtf\022+\n\005group\030\001 \002(\0132\034.sglib.publicprot"
    "o.GroupInfo\"&\n\023CSGroupAgreeJoinReq\022\017\n\007gr"
    "oupid\030\001 \002(\004\"[\n\024SCGroupMemberJoinNtf\022\017\n\007g"
    "roupid\030\001 \002(\004\0222\n\006member\030\002 \002(\0132\".sglib.pub"
    "licproto.GroupMemberInfo\"\"\n\017CSGroupLeave"
    "Req\022\017\n\007groupid\030\001 \002(\004\"2\n\017SCGroupLeaveRsp\022"
    "\016\n\006result\030\001 \002(\005\022\017\n\007groupid\030\002 \002(\004\"6\n\025SCGr"
    "oupMemberLeaveNtf\022\017\n\007groupid\030\001 \002(\004\022\014\n\004us"
    "er\030\002 \002(\t\"#\n\020CSGroupDeleteReq\022\017\n\007groupid\030"
    "\001 \002(\004\"3\n\020SCGroupDeleteRsp\022\016\n\006result\030\001 \002("
    "\005\022\017\n\007groupid\030\002 \002(\004\"#\n\020SCGroupDeleteNtf\022\017"
    "\n\007groupid\030\001 \002(\004\"5\n\021CSGroupMessageReq\022\017\n\007"
    "groupid\030\001 \002(\004\022\017\n\007content\030\002 \002(\t\"E\n\021SCGrou"
    "pMessageNtf\022\017\n\007groupid\030\001 \002(\004\022\017\n\007content\030"
    "\002 \002(\t\022\016\n\006sender\030\003 \002(\t\"7\n\026SCGroupMemberOn"
    "lineNtf\022\017\n\007groupid\030\001 \002(\004\022\014\n\004user\030\002 \002(\t\"8"
    "\n\027SCGroupMemberOfflineNtf\022\017\n\007groupid\030\001 \002"
    "(\004\022\014\n\004user\030\002 \002(\t\"9\n\030CSGroupCreateGameRoo"
    "mReq\022\017\n\007groupid\030\001 \002(\004\022\014\n\004game\030\002 \002(\005\"\205\001\n\030"
    "SCGroupCreateGameRoomRsp\022\016\n\006result\030\001 \002(\005"
    "\022\017\n\007groupid\030\002 \002(\004\022\014\n\004game\030\003 \002(\005\022\n\n\002ip\030\004 "
    "\001(\t\022\014\n\004port\030\005 \001(\005\022\016\n\006roomid\030\006 \001(\005\022\020\n\010pas"
    "sword\030\007 \001(\t\"\206\001\n\030SCGroupCreateGameRoomNtf"
    "\022\017\n\007creater\030\001 \002(\t\022\014\n\004game\030\002 \002(\005\022\n\n\002ip\030\003 "
    "\001(\t\022\014\n\004port\030\004 \001(\005\022\016\n\006roomid\030\005 \001(\005\022\020\n\010pas"
    "sword\030\006 \001(\t\022\017\n\007groupid\030\007 \002(\004\"9\n\024GroupGat"
    "eAddGroupNtf\022\017\n\007groupid\030\001 \002(\004\022\020\n\010serveri"
    "d\030\002 \002(\005\"\'\n\024GroupGateDelGroupNtf\022\017\n\007group"
    "id\030\001 \002(\004\"/\n\035GroupGroupmanagerGateCloseNt"
    "f\022\016\n\006gateid\030\001 \002(\005\"0\n\036GroupmanagerCenterG"
    "ateCloseNtf\022\016\n\006gateid\030\001 \002(\005\"H\n GroupGrou"
    "pmanagerDynamicStartNtf\022\n\n\002id\030\001 \002(\005\022\n\n\002i"
    "p\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"N\n&GroupmanagerGro"
    "upDynamicServerStartNtf\022\n\n\002id\030\001 \002(\005\022\n\n\002i"
    "p\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"3\n\037GroupmanagerCen"
    "terGroupCloseNtf\022\020\n\010serverid\030\001 \002(\005\"\226\001\n!G"
    "roupGroupmanagerReportStatusInfo\022\020\n\010serv"
    "erid\030\001 \002(\005\022\022\n\ntotalgroup\030\002 \002(\005\022\023\n\013totalm"
    "ember\030\003 \002(\005\0226\n\013gateservers\030\004 \003(\0132!.sglib"
    ".publicproto.GateServerInfo\"_\n%Groupmana"
    "gerCenterReportGroupGateInfo\0226\n\013gateserv"
    "ers\030\001 \003(\0132!.sglib.publicproto.GateServer"
    "Info\"R\n\035GroupGroupmanagerUserLoginNtf\022\021\n"
    "\tgateresid\030\001 \002(\005\022\020\n\010clientid\030\002 \002(\004\022\014\n\004us"
    "er\030\003 \002(\t\"E\n\036GroupGroupmanagerUserLogoutN"
    "tf\022\021\n\tgateresid\030\001 \002(\005\022\020\n\010clientid\030\002 \002(\004\""
    "c\n\036GroupGroupmanageCreateGroupReq\022\016\n\006gat"
    "eid\030\001 \002(\004\022\021\n\tgateresid\030\002 \002(\005\022\020\n\010clientid"
    "\030\003 \002(\004\022\014\n\004name\030\004 \002(\t\"\231\001\n\036GroupmanageGrou"
    "pCreateGroupNtf\022\016\n\006gateid\030\001 \002(\004\022\021\n\tgater"
    "esid\030\002 \002(\005\022\020\n\010clientid\030\003 \002(\004\022\014\n\004user\030\004 \002"
    "(\t\022\014\n\004name\030\005 \002(\t\022\017\n\007groupid\030\006 \002(\004\022\025\n\rgro"
    "upserverid\030\007 \002(\004\"\254\001\n\"GroupGroupmanagerCr"
    "eateGroupResult\022\016\n\006result\030\001 \002(\005\022\016\n\006gatei"
    "d\030\002 \002(\004\022\020\n\010clientid\030\003 \002(\004\022\014\n\004user\030\004 \002(\t\022"
    "\014\n\004name\030\005 \002(\t\022\017\n\007groupid\030\006 \002(\004\022\025\n\rgroups"
    "erverid\030\007 \002(\004\022\020\n\010serverid\030\010 \001(\005\"\204\001\n\037Grou"
    "pmanagerGroupCreateGroupRsp\022\016\n\006result\030\001 "
    "\002(\005\022\016\n\006gateid\030\002 \002(\004\022\020\n\010clientid\030\003 \002(\004\022\014\n"
    "\004name\030\004 \002(\t\022\017\n\007groupid\030\005 \001(\004\022\020\n\010serverid"
    "\030\006 \001(\005\"{\n$GroupGroupmanagerAddMemberToGr"
    "oupReq\022\016\n\006gateid\030\001 \002(\004\022\021\n\tgateresid\030\002 \002("
    "\005\022\020\n\010clientid\030\003 \002(\004\022\017\n\007groupid\030\004 \002(\004\022\r\n\005"
    "users\030\005 \003(\t\"\242\001\n$GroupmanagerGroupAddMemb"
    "erToGroupRsp\022\016\n\006gateid\030\001 \002(\004\022\021\n\tgateresi"
    "d\030\002 \002(\005\022\020\n\010clientid\030\003 \002(\004\022\017\n\007groupid\030\004 \002"
    "(\004\0224\n\005users\030\005 \003(\0132%.sglib.publicproto.Gr"
    "oupMemberPosInfo\"_\n\'GroupGroupmanagerFor"
    "AgreeJoinAskInfoReq\022\021\n\tgateresid\030\001 \002(\005\022\020"
    "\n\010clientid\030\002 \002(\004\022\017\n\007groupid\030\003 \002(\004\"}\n\'Gro"
    "upmanagerGroupForAgreeJoinAskInfoRsp\022\016\n\006"
    "result\030\001 \002(\005\022\021\n\tgateresid\030\002 \002(\005\022\020\n\010clien"
    "tid\030\003 \002(\004\022\017\n\007groupid\030\004 \002(\004\022\014\n\004user\030\005 \001(\t"
    "\"c\n\035GroupmanagerGroupLoadGroupNtf\022\017\n\007gro"
    "upid\030\001 \002(\004\022\021\n\tgateresid\030\002 \002(\005\022\020\n\010clienti"
    "d\030\003 \002(\004\022\014\n\004user\030\004 \002(\t\"\214\001\n GroupGroupmana"
    "gerLoadGroupResult\022\016\n\006result\030\001 \002(\005\022\017\n\007gr"
    "oupid\030\002 \002(\004\022\020\n\010serverid\030\003 \001(\005\022\014\n\004user\030\004 "
    "\002(\t\022\022\n\ntotalgroup\030\005 \002(\005\022\023\n\013totalmember\030\006"
    " \002(\005\"f\n GroupmanagerGroupMemberOnlineNtf"
    "\022\017\n\007groupid\030\001 \002(\004\022\021\n\tgateresid\030\002 \002(\005\022\020\n\010"
    "clientid\030\003 \002(\004\022\014\n\004user\030\004 \002(\t\"g\n!Groupman"
    "agerGroupMemberOfflineNtf\022\017\n\007groupid\030\001 \002"
    "(\004\022\021\n\tgateresid\030\002 \002(\005\022\020\n\010clientid\030\003 \002(\004\022"
    "\014\n\004user\030\004 \002(\t\"@\n\037GroupGroupmanagerMember"
    "LeaveNtf\022\017\n\007groupid\030\001 \002(\004\022\014\n\004user\030\002 \003(\t\""
    "2\n\037GroupGroupmanagerGroupDeleteNtf\022\017\n\007gr"
    "oupid\030\001 \002(\004\"h\n\"GroupGroupmanagerCreateGa"
    "meRoomReq\022\017\n\007groupid\030\001 \002(\004\022\021\n\tgateresid\030"
    "\002 \002(\005\022\020\n\010clientid\030\003 \002(\004\022\014\n\004game\030\004 \002(\005\"\264\001"
    "\n\"GroupmanagerGroupCreateGameRoomRsp\022\016\n\006"
    "result\030\001 \002(\005\022\017\n\007groupid\030\002 \002(\004\022\021\n\tgateres"
    "id\030\003 \002(\005\022\020\n\010clientid\030\004 \002(\004\022\014\n\004game\030\005 \002(\005"
    "\022\n\n\002ip\030\006 \001(\t\022\014\n\004port\030\007 \001(\005\022\016\n\006roomid\030\010 \001"
    "(\005\022\020\n\010password\030\t \001(\t\"\220\001\n(GroupmanagerGam"
    "emanagerCreateGameRoomReq\022\017\n\007groupid\030\001 \002"
    "(\004\022\021\n\tgateresid\030\002 \002(\005\022\020\n\010clientid\030\003 \002(\004\022"
    "\014\n\004game\030\004 \002(\005\022\016\n\006gameid\030\005 \002(\005\022\020\n\010serveri"
    "d\030\006 \002(\004\"\314\001\n(GamemanagerGroupmanagerCreat"
    "eGameRoomRsp\022\016\n\006result\030\001 \002(\005\022\017\n\007groupid\030"
    "\002 \002(\004\022\021\n\tgateresid\030\003 \002(\005\022\020\n\010clientid\030\004 \002"
    "(\004\022\014\n\004game\030\005 \002(\005\022\020\n\010serverid\030\006 \002(\004\022\n\n\002ip"
    "\030\007 \001(\t\022\014\n\004port\030\010 \001(\005\022\016\n\006roomid\030\t \001(\005\022\020\n\010"
    "password\030\n \001(\t", 4854);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "group.proto", &protobuf_RegisterTypes);
  CSGroupUserLoginReq::default_instance_ = new CSGroupUserLoginReq();
  SCGroupUserLoginRsp::default_instance_ = new SCGroupUserLoginRsp();
  SCGroupListUpdate::default_instance_ = new SCGroupListUpdate();
  SCGroupInfoUpdate::default_instance_ = new SCGroupInfoUpdate();
  CSGroupCreateReq::default_instance_ = new CSGroupCreateReq();
  SCGroupCreateRsp::default_instance_ = new SCGroupCreateRsp();
  CSGroupSearchReq::default_instance_ = new CSGroupSearchReq();
  SCGroupSearchRsp::default_instance_ = new SCGroupSearchRsp();
  CSGroupJoinReq::default_instance_ = new CSGroupJoinReq();
  SCGroupJoinRsp::default_instance_ = new SCGroupJoinRsp();
  CSGroupAddMemberReq::default_instance_ = new CSGroupAddMemberReq();
  SCGroupAddMemberRsp::default_instance_ = new SCGroupAddMemberRsp();
  SCGroupAskJoinNtf::default_instance_ = new SCGroupAskJoinNtf();
  CSGroupAgreeJoinReq::default_instance_ = new CSGroupAgreeJoinReq();
  SCGroupMemberJoinNtf::default_instance_ = new SCGroupMemberJoinNtf();
  CSGroupLeaveReq::default_instance_ = new CSGroupLeaveReq();
  SCGroupLeaveRsp::default_instance_ = new SCGroupLeaveRsp();
  SCGroupMemberLeaveNtf::default_instance_ = new SCGroupMemberLeaveNtf();
  CSGroupDeleteReq::default_instance_ = new CSGroupDeleteReq();
  SCGroupDeleteRsp::default_instance_ = new SCGroupDeleteRsp();
  SCGroupDeleteNtf::default_instance_ = new SCGroupDeleteNtf();
  CSGroupMessageReq::default_instance_ = new CSGroupMessageReq();
  SCGroupMessageNtf::default_instance_ = new SCGroupMessageNtf();
  SCGroupMemberOnlineNtf::default_instance_ = new SCGroupMemberOnlineNtf();
  SCGroupMemberOfflineNtf::default_instance_ = new SCGroupMemberOfflineNtf();
  CSGroupCreateGameRoomReq::default_instance_ = new CSGroupCreateGameRoomReq();
  SCGroupCreateGameRoomRsp::default_instance_ = new SCGroupCreateGameRoomRsp();
  SCGroupCreateGameRoomNtf::default_instance_ = new SCGroupCreateGameRoomNtf();
  GroupGateAddGroupNtf::default_instance_ = new GroupGateAddGroupNtf();
  GroupGateDelGroupNtf::default_instance_ = new GroupGateDelGroupNtf();
  GroupGroupmanagerGateCloseNtf::default_instance_ = new GroupGroupmanagerGateCloseNtf();
  GroupmanagerCenterGateCloseNtf::default_instance_ = new GroupmanagerCenterGateCloseNtf();
  GroupGroupmanagerDynamicStartNtf::default_instance_ = new GroupGroupmanagerDynamicStartNtf();
  GroupmanagerGroupDynamicServerStartNtf::default_instance_ = new GroupmanagerGroupDynamicServerStartNtf();
  GroupmanagerCenterGroupCloseNtf::default_instance_ = new GroupmanagerCenterGroupCloseNtf();
  GroupGroupmanagerReportStatusInfo::default_instance_ = new GroupGroupmanagerReportStatusInfo();
  GroupmanagerCenterReportGroupGateInfo::default_instance_ = new GroupmanagerCenterReportGroupGateInfo();
  GroupGroupmanagerUserLoginNtf::default_instance_ = new GroupGroupmanagerUserLoginNtf();
  GroupGroupmanagerUserLogoutNtf::default_instance_ = new GroupGroupmanagerUserLogoutNtf();
  GroupGroupmanageCreateGroupReq::default_instance_ = new GroupGroupmanageCreateGroupReq();
  GroupmanageGroupCreateGroupNtf::default_instance_ = new GroupmanageGroupCreateGroupNtf();
  GroupGroupmanagerCreateGroupResult::default_instance_ = new GroupGroupmanagerCreateGroupResult();
  GroupmanagerGroupCreateGroupRsp::default_instance_ = new GroupmanagerGroupCreateGroupRsp();
  GroupGroupmanagerAddMemberToGroupReq::default_instance_ = new GroupGroupmanagerAddMemberToGroupReq();
  GroupmanagerGroupAddMemberToGroupRsp::default_instance_ = new GroupmanagerGroupAddMemberToGroupRsp();
  GroupGroupmanagerForAgreeJoinAskInfoReq::default_instance_ = new GroupGroupmanagerForAgreeJoinAskInfoReq();
  GroupmanagerGroupForAgreeJoinAskInfoRsp::default_instance_ = new GroupmanagerGroupForAgreeJoinAskInfoRsp();
  GroupmanagerGroupLoadGroupNtf::default_instance_ = new GroupmanagerGroupLoadGroupNtf();
  GroupGroupmanagerLoadGroupResult::default_instance_ = new GroupGroupmanagerLoadGroupResult();
  GroupmanagerGroupMemberOnlineNtf::default_instance_ = new GroupmanagerGroupMemberOnlineNtf();
  GroupmanagerGroupMemberOfflineNtf::default_instance_ = new GroupmanagerGroupMemberOfflineNtf();
  GroupGroupmanagerMemberLeaveNtf::default_instance_ = new GroupGroupmanagerMemberLeaveNtf();
  GroupGroupmanagerGroupDeleteNtf::default_instance_ = new GroupGroupmanagerGroupDeleteNtf();
  GroupGroupmanagerCreateGameRoomReq::default_instance_ = new GroupGroupmanagerCreateGameRoomReq();
  GroupmanagerGroupCreateGameRoomRsp::default_instance_ = new GroupmanagerGroupCreateGameRoomRsp();
  GroupmanagerGamemanagerCreateGameRoomReq::default_instance_ = new GroupmanagerGamemanagerCreateGameRoomReq();
  GamemanagerGroupmanagerCreateGameRoomRsp::default_instance_ = new GamemanagerGroupmanagerCreateGameRoomRsp();
  CSGroupUserLoginReq::default_instance_->InitAsDefaultInstance();
  SCGroupUserLoginRsp::default_instance_->InitAsDefaultInstance();
  SCGroupListUpdate::default_instance_->InitAsDefaultInstance();
  SCGroupInfoUpdate::default_instance_->InitAsDefaultInstance();
  CSGroupCreateReq::default_instance_->InitAsDefaultInstance();
  SCGroupCreateRsp::default_instance_->InitAsDefaultInstance();
  CSGroupSearchReq::default_instance_->InitAsDefaultInstance();
  SCGroupSearchRsp::default_instance_->InitAsDefaultInstance();
  CSGroupJoinReq::default_instance_->InitAsDefaultInstance();
  SCGroupJoinRsp::default_instance_->InitAsDefaultInstance();
  CSGroupAddMemberReq::default_instance_->InitAsDefaultInstance();
  SCGroupAddMemberRsp::default_instance_->InitAsDefaultInstance();
  SCGroupAskJoinNtf::default_instance_->InitAsDefaultInstance();
  CSGroupAgreeJoinReq::default_instance_->InitAsDefaultInstance();
  SCGroupMemberJoinNtf::default_instance_->InitAsDefaultInstance();
  CSGroupLeaveReq::default_instance_->InitAsDefaultInstance();
  SCGroupLeaveRsp::default_instance_->InitAsDefaultInstance();
  SCGroupMemberLeaveNtf::default_instance_->InitAsDefaultInstance();
  CSGroupDeleteReq::default_instance_->InitAsDefaultInstance();
  SCGroupDeleteRsp::default_instance_->InitAsDefaultInstance();
  SCGroupDeleteNtf::default_instance_->InitAsDefaultInstance();
  CSGroupMessageReq::default_instance_->InitAsDefaultInstance();
  SCGroupMessageNtf::default_instance_->InitAsDefaultInstance();
  SCGroupMemberOnlineNtf::default_instance_->InitAsDefaultInstance();
  SCGroupMemberOfflineNtf::default_instance_->InitAsDefaultInstance();
  CSGroupCreateGameRoomReq::default_instance_->InitAsDefaultInstance();
  SCGroupCreateGameRoomRsp::default_instance_->InitAsDefaultInstance();
  SCGroupCreateGameRoomNtf::default_instance_->InitAsDefaultInstance();
  GroupGateAddGroupNtf::default_instance_->InitAsDefaultInstance();
  GroupGateDelGroupNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerGateCloseNtf::default_instance_->InitAsDefaultInstance();
  GroupmanagerCenterGateCloseNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerDynamicStartNtf::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupDynamicServerStartNtf::default_instance_->InitAsDefaultInstance();
  GroupmanagerCenterGroupCloseNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerReportStatusInfo::default_instance_->InitAsDefaultInstance();
  GroupmanagerCenterReportGroupGateInfo::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerUserLoginNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerUserLogoutNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanageCreateGroupReq::default_instance_->InitAsDefaultInstance();
  GroupmanageGroupCreateGroupNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerCreateGroupResult::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupCreateGroupRsp::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerAddMemberToGroupReq::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupAddMemberToGroupRsp::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerForAgreeJoinAskInfoReq::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupForAgreeJoinAskInfoRsp::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupLoadGroupNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerLoadGroupResult::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupMemberOnlineNtf::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupMemberOfflineNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerMemberLeaveNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerGroupDeleteNtf::default_instance_->InitAsDefaultInstance();
  GroupGroupmanagerCreateGameRoomReq::default_instance_->InitAsDefaultInstance();
  GroupmanagerGroupCreateGameRoomRsp::default_instance_->InitAsDefaultInstance();
  GroupmanagerGamemanagerCreateGameRoomReq::default_instance_->InitAsDefaultInstance();
  GamemanagerGroupmanagerCreateGameRoomRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_group_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_group_2eproto {
  StaticDescriptorInitializer_group_2eproto() {
    protobuf_AddDesc_group_2eproto();
  }
} static_descriptor_initializer_group_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CSGroupUserLoginReq::kUserFieldNumber;
const int CSGroupUserLoginReq::kTokenFieldNumber;
#endif  // !_MSC_VER

CSGroupUserLoginReq::CSGroupUserLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupUserLoginReq::InitAsDefaultInstance() {
}

CSGroupUserLoginReq::CSGroupUserLoginReq(const CSGroupUserLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupUserLoginReq::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupUserLoginReq::~CSGroupUserLoginReq() {
  SharedDtor();
}

void CSGroupUserLoginReq::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CSGroupUserLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupUserLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupUserLoginReq_descriptor_;
}

const CSGroupUserLoginReq& CSGroupUserLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupUserLoginReq* CSGroupUserLoginReq::default_instance_ = NULL;

CSGroupUserLoginReq* CSGroupUserLoginReq::New() const {
  return new CSGroupUserLoginReq;
}

void CSGroupUserLoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupUserLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // required string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupUserLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupUserLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  // required string token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupUserLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupUserLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupUserLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupUserLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupUserLoginReq::MergeFrom(const CSGroupUserLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupUserLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupUserLoginReq::CopyFrom(const CSGroupUserLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupUserLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGroupUserLoginReq::Swap(CSGroupUserLoginReq* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupUserLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupUserLoginReq_descriptor_;
  metadata.reflection = CSGroupUserLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupUserLoginRsp::kResultFieldNumber;
#endif  // !_MSC_VER

SCGroupUserLoginRsp::SCGroupUserLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupUserLoginRsp::InitAsDefaultInstance() {
}

SCGroupUserLoginRsp::SCGroupUserLoginRsp(const SCGroupUserLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupUserLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupUserLoginRsp::~SCGroupUserLoginRsp() {
  SharedDtor();
}

void SCGroupUserLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupUserLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupUserLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupUserLoginRsp_descriptor_;
}

const SCGroupUserLoginRsp& SCGroupUserLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupUserLoginRsp* SCGroupUserLoginRsp::default_instance_ = NULL;

SCGroupUserLoginRsp* SCGroupUserLoginRsp::New() const {
  return new SCGroupUserLoginRsp;
}

void SCGroupUserLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupUserLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupUserLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupUserLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupUserLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupUserLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupUserLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupUserLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupUserLoginRsp::MergeFrom(const SCGroupUserLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupUserLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupUserLoginRsp::CopyFrom(const SCGroupUserLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupUserLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCGroupUserLoginRsp::Swap(SCGroupUserLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupUserLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupUserLoginRsp_descriptor_;
  metadata.reflection = SCGroupUserLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupListUpdate::kGroupsFieldNumber;
#endif  // !_MSC_VER

SCGroupListUpdate::SCGroupListUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupListUpdate::InitAsDefaultInstance() {
}

SCGroupListUpdate::SCGroupListUpdate(const SCGroupListUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupListUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupListUpdate::~SCGroupListUpdate() {
  SharedDtor();
}

void SCGroupListUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupListUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupListUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupListUpdate_descriptor_;
}

const SCGroupListUpdate& SCGroupListUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupListUpdate* SCGroupListUpdate::default_instance_ = NULL;

SCGroupListUpdate* SCGroupListUpdate::New() const {
  return new SCGroupListUpdate;
}

void SCGroupListUpdate::Clear() {
  groups_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupListUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sglib.publicproto.GroupInfo groups = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groups:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groups()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groups;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupListUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sglib.publicproto.GroupInfo groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->groups(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupListUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sglib.publicproto.GroupInfo groups = 1;
  for (int i = 0; i < this->groups_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->groups(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupListUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .sglib.publicproto.GroupInfo groups = 1;
  total_size += 1 * this->groups_size();
  for (int i = 0; i < this->groups_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groups(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupListUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupListUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupListUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupListUpdate::MergeFrom(const SCGroupListUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  groups_.MergeFrom(from.groups_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupListUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupListUpdate::CopyFrom(const SCGroupListUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupListUpdate::IsInitialized() const {

  for (int i = 0; i < groups_size(); i++) {
    if (!this->groups(i).IsInitialized()) return false;
  }
  return true;
}

void SCGroupListUpdate::Swap(SCGroupListUpdate* other) {
  if (other != this) {
    groups_.Swap(&other->groups_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupListUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupListUpdate_descriptor_;
  metadata.reflection = SCGroupListUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupInfoUpdate::kIdFieldNumber;
const int SCGroupInfoUpdate::kMembersFieldNumber;
#endif  // !_MSC_VER

SCGroupInfoUpdate::SCGroupInfoUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupInfoUpdate::InitAsDefaultInstance() {
}

SCGroupInfoUpdate::SCGroupInfoUpdate(const SCGroupInfoUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupInfoUpdate::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupInfoUpdate::~SCGroupInfoUpdate() {
  SharedDtor();
}

void SCGroupInfoUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupInfoUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupInfoUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupInfoUpdate_descriptor_;
}

const SCGroupInfoUpdate& SCGroupInfoUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupInfoUpdate* SCGroupInfoUpdate::default_instance_ = NULL;

SCGroupInfoUpdate* SCGroupInfoUpdate::New() const {
  return new SCGroupInfoUpdate;
}

void SCGroupInfoUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupInfoUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        break;
      }

      // repeated .sglib.publicproto.GroupMemberInfo members = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupInfoUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // repeated .sglib.publicproto.GroupMemberInfo members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupInfoUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // repeated .sglib.publicproto.GroupMemberInfo members = 2;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupInfoUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

  }
  // repeated .sglib.publicproto.GroupMemberInfo members = 2;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupInfoUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupInfoUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupInfoUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupInfoUpdate::MergeFrom(const SCGroupInfoUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupInfoUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupInfoUpdate::CopyFrom(const SCGroupInfoUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupInfoUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void SCGroupInfoUpdate::Swap(SCGroupInfoUpdate* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupInfoUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupInfoUpdate_descriptor_;
  metadata.reflection = SCGroupInfoUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupCreateReq::kNameFieldNumber;
#endif  // !_MSC_VER

CSGroupCreateReq::CSGroupCreateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupCreateReq::InitAsDefaultInstance() {
}

CSGroupCreateReq::CSGroupCreateReq(const CSGroupCreateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupCreateReq::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupCreateReq::~CSGroupCreateReq() {
  SharedDtor();
}

void CSGroupCreateReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CSGroupCreateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupCreateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupCreateReq_descriptor_;
}

const CSGroupCreateReq& CSGroupCreateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupCreateReq* CSGroupCreateReq::default_instance_ = NULL;

CSGroupCreateReq* CSGroupCreateReq::New() const {
  return new CSGroupCreateReq;
}

void CSGroupCreateReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupCreateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupCreateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupCreateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupCreateReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupCreateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupCreateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupCreateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupCreateReq::MergeFrom(const CSGroupCreateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupCreateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupCreateReq::CopyFrom(const CSGroupCreateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupCreateReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGroupCreateReq::Swap(CSGroupCreateReq* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupCreateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupCreateReq_descriptor_;
  metadata.reflection = CSGroupCreateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupCreateRsp::kResultFieldNumber;
const int SCGroupCreateRsp::kNameFieldNumber;
const int SCGroupCreateRsp::kGroupidFieldNumber;
#endif  // !_MSC_VER

SCGroupCreateRsp::SCGroupCreateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupCreateRsp::InitAsDefaultInstance() {
}

SCGroupCreateRsp::SCGroupCreateRsp(const SCGroupCreateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupCreateRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupCreateRsp::~SCGroupCreateRsp() {
  SharedDtor();
}

void SCGroupCreateRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SCGroupCreateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupCreateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupCreateRsp_descriptor_;
}

const SCGroupCreateRsp& SCGroupCreateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupCreateRsp* SCGroupCreateRsp::default_instance_ = NULL;

SCGroupCreateRsp* SCGroupCreateRsp::New() const {
  return new SCGroupCreateRsp;
}

void SCGroupCreateRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupCreateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupCreateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint64 groupid = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupCreateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint64 groupid = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupCreateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 groupid = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupCreateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupCreateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupCreateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupCreateRsp::MergeFrom(const SCGroupCreateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupCreateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupCreateRsp::CopyFrom(const SCGroupCreateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupCreateRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupCreateRsp::Swap(SCGroupCreateRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(name_, other->name_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupCreateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupCreateRsp_descriptor_;
  metadata.reflection = SCGroupCreateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupSearchReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

CSGroupSearchReq::CSGroupSearchReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupSearchReq::InitAsDefaultInstance() {
}

CSGroupSearchReq::CSGroupSearchReq(const CSGroupSearchReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupSearchReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupSearchReq::~CSGroupSearchReq() {
  SharedDtor();
}

void CSGroupSearchReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGroupSearchReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupSearchReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupSearchReq_descriptor_;
}

const CSGroupSearchReq& CSGroupSearchReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupSearchReq* CSGroupSearchReq::default_instance_ = NULL;

CSGroupSearchReq* CSGroupSearchReq::New() const {
  return new CSGroupSearchReq;
}

void CSGroupSearchReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupSearchReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupSearchReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupSearchReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupSearchReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupSearchReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupSearchReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupSearchReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupSearchReq::MergeFrom(const CSGroupSearchReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupSearchReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupSearchReq::CopyFrom(const CSGroupSearchReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupSearchReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGroupSearchReq::Swap(CSGroupSearchReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupSearchReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupSearchReq_descriptor_;
  metadata.reflection = CSGroupSearchReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupSearchRsp::kResultFieldNumber;
const int SCGroupSearchRsp::kGroupFieldNumber;
#endif  // !_MSC_VER

SCGroupSearchRsp::SCGroupSearchRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupSearchRsp::InitAsDefaultInstance() {
  group_ = const_cast< ::sglib::publicproto::GroupInfo*>(&::sglib::publicproto::GroupInfo::default_instance());
}

SCGroupSearchRsp::SCGroupSearchRsp(const SCGroupSearchRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupSearchRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupSearchRsp::~SCGroupSearchRsp() {
  SharedDtor();
}

void SCGroupSearchRsp::SharedDtor() {
  if (this != default_instance_) {
    delete group_;
  }
}

void SCGroupSearchRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupSearchRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupSearchRsp_descriptor_;
}

const SCGroupSearchRsp& SCGroupSearchRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupSearchRsp* SCGroupSearchRsp::default_instance_ = NULL;

SCGroupSearchRsp* SCGroupSearchRsp::New() const {
  return new SCGroupSearchRsp;
}

void SCGroupSearchRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    if (has_group()) {
      if (group_ != NULL) group_->::sglib::publicproto::GroupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupSearchRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_group;
        break;
      }

      // optional .sglib.publicproto.GroupInfo group = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupSearchRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional .sglib.publicproto.GroupInfo group = 2;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupSearchRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional .sglib.publicproto.GroupInfo group = 2;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupSearchRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // optional .sglib.publicproto.GroupInfo group = 2;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupSearchRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupSearchRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupSearchRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupSearchRsp::MergeFrom(const SCGroupSearchRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_group()) {
      mutable_group()->::sglib::publicproto::GroupInfo::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupSearchRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupSearchRsp::CopyFrom(const SCGroupSearchRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupSearchRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void SCGroupSearchRsp::Swap(SCGroupSearchRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupSearchRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupSearchRsp_descriptor_;
  metadata.reflection = SCGroupSearchRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupJoinReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

CSGroupJoinReq::CSGroupJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupJoinReq::InitAsDefaultInstance() {
}

CSGroupJoinReq::CSGroupJoinReq(const CSGroupJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupJoinReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupJoinReq::~CSGroupJoinReq() {
  SharedDtor();
}

void CSGroupJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGroupJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupJoinReq_descriptor_;
}

const CSGroupJoinReq& CSGroupJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupJoinReq* CSGroupJoinReq::default_instance_ = NULL;

CSGroupJoinReq* CSGroupJoinReq::New() const {
  return new CSGroupJoinReq;
}

void CSGroupJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupJoinReq::MergeFrom(const CSGroupJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupJoinReq::CopyFrom(const CSGroupJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGroupJoinReq::Swap(CSGroupJoinReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupJoinReq_descriptor_;
  metadata.reflection = CSGroupJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupJoinRsp::kResultFieldNumber;
const int SCGroupJoinRsp::kGroupidFieldNumber;
#endif  // !_MSC_VER

SCGroupJoinRsp::SCGroupJoinRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupJoinRsp::InitAsDefaultInstance() {
}

SCGroupJoinRsp::SCGroupJoinRsp(const SCGroupJoinRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupJoinRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupJoinRsp::~SCGroupJoinRsp() {
  SharedDtor();
}

void SCGroupJoinRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupJoinRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupJoinRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupJoinRsp_descriptor_;
}

const SCGroupJoinRsp& SCGroupJoinRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupJoinRsp* SCGroupJoinRsp::default_instance_ = NULL;

SCGroupJoinRsp* SCGroupJoinRsp::New() const {
  return new SCGroupJoinRsp;
}

void SCGroupJoinRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupJoinRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupJoinRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupJoinRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupJoinRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupJoinRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupJoinRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupJoinRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupJoinRsp::MergeFrom(const SCGroupJoinRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupJoinRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupJoinRsp::CopyFrom(const SCGroupJoinRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupJoinRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupJoinRsp::Swap(SCGroupJoinRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupJoinRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupJoinRsp_descriptor_;
  metadata.reflection = SCGroupJoinRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupAddMemberReq::kGroupidFieldNumber;
const int CSGroupAddMemberReq::kUsersFieldNumber;
#endif  // !_MSC_VER

CSGroupAddMemberReq::CSGroupAddMemberReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupAddMemberReq::InitAsDefaultInstance() {
}

CSGroupAddMemberReq::CSGroupAddMemberReq(const CSGroupAddMemberReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupAddMemberReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupAddMemberReq::~CSGroupAddMemberReq() {
  SharedDtor();
}

void CSGroupAddMemberReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGroupAddMemberReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupAddMemberReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupAddMemberReq_descriptor_;
}

const CSGroupAddMemberReq& CSGroupAddMemberReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupAddMemberReq* CSGroupAddMemberReq::default_instance_ = NULL;

CSGroupAddMemberReq* CSGroupAddMemberReq::New() const {
  return new CSGroupAddMemberReq;
}

void CSGroupAddMemberReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupAddMemberReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_users;
        break;
      }

      // repeated string users = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_users()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->users(this->users_size() - 1).data(),
            this->users(this->users_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupAddMemberReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // repeated string users = 2;
  for (int i = 0; i < this->users_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->users(i).data(), this->users(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupAddMemberReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // repeated string users = 2;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->users(i).data(), this->users(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupAddMemberReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated string users = 2;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupAddMemberReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupAddMemberReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupAddMemberReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupAddMemberReq::MergeFrom(const CSGroupAddMemberReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupAddMemberReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupAddMemberReq::CopyFrom(const CSGroupAddMemberReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupAddMemberReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGroupAddMemberReq::Swap(CSGroupAddMemberReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupAddMemberReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupAddMemberReq_descriptor_;
  metadata.reflection = CSGroupAddMemberReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupAddMemberRsp::kResultFieldNumber;
const int SCGroupAddMemberRsp::kGroupidFieldNumber;
#endif  // !_MSC_VER

SCGroupAddMemberRsp::SCGroupAddMemberRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupAddMemberRsp::InitAsDefaultInstance() {
}

SCGroupAddMemberRsp::SCGroupAddMemberRsp(const SCGroupAddMemberRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupAddMemberRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupAddMemberRsp::~SCGroupAddMemberRsp() {
  SharedDtor();
}

void SCGroupAddMemberRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupAddMemberRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupAddMemberRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupAddMemberRsp_descriptor_;
}

const SCGroupAddMemberRsp& SCGroupAddMemberRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupAddMemberRsp* SCGroupAddMemberRsp::default_instance_ = NULL;

SCGroupAddMemberRsp* SCGroupAddMemberRsp::New() const {
  return new SCGroupAddMemberRsp;
}

void SCGroupAddMemberRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupAddMemberRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupAddMemberRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupAddMemberRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupAddMemberRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupAddMemberRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupAddMemberRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupAddMemberRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupAddMemberRsp::MergeFrom(const SCGroupAddMemberRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupAddMemberRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupAddMemberRsp::CopyFrom(const SCGroupAddMemberRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupAddMemberRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupAddMemberRsp::Swap(SCGroupAddMemberRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupAddMemberRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupAddMemberRsp_descriptor_;
  metadata.reflection = SCGroupAddMemberRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupAskJoinNtf::kGroupFieldNumber;
#endif  // !_MSC_VER

SCGroupAskJoinNtf::SCGroupAskJoinNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupAskJoinNtf::InitAsDefaultInstance() {
  group_ = const_cast< ::sglib::publicproto::GroupInfo*>(&::sglib::publicproto::GroupInfo::default_instance());
}

SCGroupAskJoinNtf::SCGroupAskJoinNtf(const SCGroupAskJoinNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupAskJoinNtf::SharedCtor() {
  _cached_size_ = 0;
  group_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupAskJoinNtf::~SCGroupAskJoinNtf() {
  SharedDtor();
}

void SCGroupAskJoinNtf::SharedDtor() {
  if (this != default_instance_) {
    delete group_;
  }
}

void SCGroupAskJoinNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupAskJoinNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupAskJoinNtf_descriptor_;
}

const SCGroupAskJoinNtf& SCGroupAskJoinNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupAskJoinNtf* SCGroupAskJoinNtf::default_instance_ = NULL;

SCGroupAskJoinNtf* SCGroupAskJoinNtf::New() const {
  return new SCGroupAskJoinNtf;
}

void SCGroupAskJoinNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_group()) {
      if (group_ != NULL) group_->::sglib::publicproto::GroupInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupAskJoinNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .sglib.publicproto.GroupInfo group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupAskJoinNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .sglib.publicproto.GroupInfo group = 1;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupAskJoinNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .sglib.publicproto.GroupInfo group = 1;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupAskJoinNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .sglib.publicproto.GroupInfo group = 1;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupAskJoinNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupAskJoinNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupAskJoinNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupAskJoinNtf::MergeFrom(const SCGroupAskJoinNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_group()) {
      mutable_group()->::sglib::publicproto::GroupInfo::MergeFrom(from.group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupAskJoinNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupAskJoinNtf::CopyFrom(const SCGroupAskJoinNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupAskJoinNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_group()) {
    if (!this->group().IsInitialized()) return false;
  }
  return true;
}

void SCGroupAskJoinNtf::Swap(SCGroupAskJoinNtf* other) {
  if (other != this) {
    std::swap(group_, other->group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupAskJoinNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupAskJoinNtf_descriptor_;
  metadata.reflection = SCGroupAskJoinNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupAgreeJoinReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

CSGroupAgreeJoinReq::CSGroupAgreeJoinReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupAgreeJoinReq::InitAsDefaultInstance() {
}

CSGroupAgreeJoinReq::CSGroupAgreeJoinReq(const CSGroupAgreeJoinReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupAgreeJoinReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupAgreeJoinReq::~CSGroupAgreeJoinReq() {
  SharedDtor();
}

void CSGroupAgreeJoinReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGroupAgreeJoinReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupAgreeJoinReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupAgreeJoinReq_descriptor_;
}

const CSGroupAgreeJoinReq& CSGroupAgreeJoinReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupAgreeJoinReq* CSGroupAgreeJoinReq::default_instance_ = NULL;

CSGroupAgreeJoinReq* CSGroupAgreeJoinReq::New() const {
  return new CSGroupAgreeJoinReq;
}

void CSGroupAgreeJoinReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupAgreeJoinReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupAgreeJoinReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupAgreeJoinReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupAgreeJoinReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupAgreeJoinReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupAgreeJoinReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupAgreeJoinReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupAgreeJoinReq::MergeFrom(const CSGroupAgreeJoinReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupAgreeJoinReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupAgreeJoinReq::CopyFrom(const CSGroupAgreeJoinReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupAgreeJoinReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGroupAgreeJoinReq::Swap(CSGroupAgreeJoinReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupAgreeJoinReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupAgreeJoinReq_descriptor_;
  metadata.reflection = CSGroupAgreeJoinReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupMemberJoinNtf::kGroupidFieldNumber;
const int SCGroupMemberJoinNtf::kMemberFieldNumber;
#endif  // !_MSC_VER

SCGroupMemberJoinNtf::SCGroupMemberJoinNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupMemberJoinNtf::InitAsDefaultInstance() {
  member_ = const_cast< ::sglib::publicproto::GroupMemberInfo*>(&::sglib::publicproto::GroupMemberInfo::default_instance());
}

SCGroupMemberJoinNtf::SCGroupMemberJoinNtf(const SCGroupMemberJoinNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupMemberJoinNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  member_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupMemberJoinNtf::~SCGroupMemberJoinNtf() {
  SharedDtor();
}

void SCGroupMemberJoinNtf::SharedDtor() {
  if (this != default_instance_) {
    delete member_;
  }
}

void SCGroupMemberJoinNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupMemberJoinNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupMemberJoinNtf_descriptor_;
}

const SCGroupMemberJoinNtf& SCGroupMemberJoinNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupMemberJoinNtf* SCGroupMemberJoinNtf::default_instance_ = NULL;

SCGroupMemberJoinNtf* SCGroupMemberJoinNtf::New() const {
  return new SCGroupMemberJoinNtf;
}

void SCGroupMemberJoinNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_member()) {
      if (member_ != NULL) member_->::sglib::publicproto::GroupMemberInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupMemberJoinNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_member;
        break;
      }

      // required .sglib.publicproto.GroupMemberInfo member = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_member:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_member()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupMemberJoinNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required .sglib.publicproto.GroupMemberInfo member = 2;
  if (has_member()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->member(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupMemberJoinNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required .sglib.publicproto.GroupMemberInfo member = 2;
  if (has_member()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->member(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupMemberJoinNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required .sglib.publicproto.GroupMemberInfo member = 2;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->member());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupMemberJoinNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupMemberJoinNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupMemberJoinNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupMemberJoinNtf::MergeFrom(const SCGroupMemberJoinNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_member()) {
      mutable_member()->::sglib::publicproto::GroupMemberInfo::MergeFrom(from.member());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupMemberJoinNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupMemberJoinNtf::CopyFrom(const SCGroupMemberJoinNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupMemberJoinNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_member()) {
    if (!this->member().IsInitialized()) return false;
  }
  return true;
}

void SCGroupMemberJoinNtf::Swap(SCGroupMemberJoinNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(member_, other->member_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupMemberJoinNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupMemberJoinNtf_descriptor_;
  metadata.reflection = SCGroupMemberJoinNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupLeaveReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

CSGroupLeaveReq::CSGroupLeaveReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupLeaveReq::InitAsDefaultInstance() {
}

CSGroupLeaveReq::CSGroupLeaveReq(const CSGroupLeaveReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupLeaveReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupLeaveReq::~CSGroupLeaveReq() {
  SharedDtor();
}

void CSGroupLeaveReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGroupLeaveReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupLeaveReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupLeaveReq_descriptor_;
}

const CSGroupLeaveReq& CSGroupLeaveReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupLeaveReq* CSGroupLeaveReq::default_instance_ = NULL;

CSGroupLeaveReq* CSGroupLeaveReq::New() const {
  return new CSGroupLeaveReq;
}

void CSGroupLeaveReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupLeaveReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupLeaveReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupLeaveReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupLeaveReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupLeaveReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupLeaveReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupLeaveReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupLeaveReq::MergeFrom(const CSGroupLeaveReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupLeaveReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupLeaveReq::CopyFrom(const CSGroupLeaveReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupLeaveReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGroupLeaveReq::Swap(CSGroupLeaveReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupLeaveReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupLeaveReq_descriptor_;
  metadata.reflection = CSGroupLeaveReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupLeaveRsp::kResultFieldNumber;
const int SCGroupLeaveRsp::kGroupidFieldNumber;
#endif  // !_MSC_VER

SCGroupLeaveRsp::SCGroupLeaveRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupLeaveRsp::InitAsDefaultInstance() {
}

SCGroupLeaveRsp::SCGroupLeaveRsp(const SCGroupLeaveRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupLeaveRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupLeaveRsp::~SCGroupLeaveRsp() {
  SharedDtor();
}

void SCGroupLeaveRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupLeaveRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupLeaveRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupLeaveRsp_descriptor_;
}

const SCGroupLeaveRsp& SCGroupLeaveRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupLeaveRsp* SCGroupLeaveRsp::default_instance_ = NULL;

SCGroupLeaveRsp* SCGroupLeaveRsp::New() const {
  return new SCGroupLeaveRsp;
}

void SCGroupLeaveRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupLeaveRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupLeaveRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupLeaveRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupLeaveRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupLeaveRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupLeaveRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupLeaveRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupLeaveRsp::MergeFrom(const SCGroupLeaveRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupLeaveRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupLeaveRsp::CopyFrom(const SCGroupLeaveRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupLeaveRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupLeaveRsp::Swap(SCGroupLeaveRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupLeaveRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupLeaveRsp_descriptor_;
  metadata.reflection = SCGroupLeaveRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupMemberLeaveNtf::kGroupidFieldNumber;
const int SCGroupMemberLeaveNtf::kUserFieldNumber;
#endif  // !_MSC_VER

SCGroupMemberLeaveNtf::SCGroupMemberLeaveNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupMemberLeaveNtf::InitAsDefaultInstance() {
}

SCGroupMemberLeaveNtf::SCGroupMemberLeaveNtf(const SCGroupMemberLeaveNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupMemberLeaveNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupMemberLeaveNtf::~SCGroupMemberLeaveNtf() {
  SharedDtor();
}

void SCGroupMemberLeaveNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void SCGroupMemberLeaveNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupMemberLeaveNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupMemberLeaveNtf_descriptor_;
}

const SCGroupMemberLeaveNtf& SCGroupMemberLeaveNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupMemberLeaveNtf* SCGroupMemberLeaveNtf::default_instance_ = NULL;

SCGroupMemberLeaveNtf* SCGroupMemberLeaveNtf::New() const {
  return new SCGroupMemberLeaveNtf;
}

void SCGroupMemberLeaveNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupMemberLeaveNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupMemberLeaveNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupMemberLeaveNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupMemberLeaveNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupMemberLeaveNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupMemberLeaveNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupMemberLeaveNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupMemberLeaveNtf::MergeFrom(const SCGroupMemberLeaveNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupMemberLeaveNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupMemberLeaveNtf::CopyFrom(const SCGroupMemberLeaveNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupMemberLeaveNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupMemberLeaveNtf::Swap(SCGroupMemberLeaveNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupMemberLeaveNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupMemberLeaveNtf_descriptor_;
  metadata.reflection = SCGroupMemberLeaveNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupDeleteReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

CSGroupDeleteReq::CSGroupDeleteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupDeleteReq::InitAsDefaultInstance() {
}

CSGroupDeleteReq::CSGroupDeleteReq(const CSGroupDeleteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupDeleteReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupDeleteReq::~CSGroupDeleteReq() {
  SharedDtor();
}

void CSGroupDeleteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGroupDeleteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupDeleteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupDeleteReq_descriptor_;
}

const CSGroupDeleteReq& CSGroupDeleteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupDeleteReq* CSGroupDeleteReq::default_instance_ = NULL;

CSGroupDeleteReq* CSGroupDeleteReq::New() const {
  return new CSGroupDeleteReq;
}

void CSGroupDeleteReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupDeleteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupDeleteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupDeleteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupDeleteReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupDeleteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupDeleteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupDeleteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupDeleteReq::MergeFrom(const CSGroupDeleteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupDeleteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupDeleteReq::CopyFrom(const CSGroupDeleteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupDeleteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CSGroupDeleteReq::Swap(CSGroupDeleteReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupDeleteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupDeleteReq_descriptor_;
  metadata.reflection = CSGroupDeleteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupDeleteRsp::kResultFieldNumber;
const int SCGroupDeleteRsp::kGroupidFieldNumber;
#endif  // !_MSC_VER

SCGroupDeleteRsp::SCGroupDeleteRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupDeleteRsp::InitAsDefaultInstance() {
}

SCGroupDeleteRsp::SCGroupDeleteRsp(const SCGroupDeleteRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupDeleteRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupDeleteRsp::~SCGroupDeleteRsp() {
  SharedDtor();
}

void SCGroupDeleteRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupDeleteRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupDeleteRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupDeleteRsp_descriptor_;
}

const SCGroupDeleteRsp& SCGroupDeleteRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupDeleteRsp* SCGroupDeleteRsp::default_instance_ = NULL;

SCGroupDeleteRsp* SCGroupDeleteRsp::New() const {
  return new SCGroupDeleteRsp;
}

void SCGroupDeleteRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupDeleteRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupDeleteRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupDeleteRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupDeleteRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupDeleteRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupDeleteRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupDeleteRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupDeleteRsp::MergeFrom(const SCGroupDeleteRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupDeleteRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupDeleteRsp::CopyFrom(const SCGroupDeleteRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupDeleteRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupDeleteRsp::Swap(SCGroupDeleteRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupDeleteRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupDeleteRsp_descriptor_;
  metadata.reflection = SCGroupDeleteRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupDeleteNtf::kGroupidFieldNumber;
#endif  // !_MSC_VER

SCGroupDeleteNtf::SCGroupDeleteNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupDeleteNtf::InitAsDefaultInstance() {
}

SCGroupDeleteNtf::SCGroupDeleteNtf(const SCGroupDeleteNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupDeleteNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupDeleteNtf::~SCGroupDeleteNtf() {
  SharedDtor();
}

void SCGroupDeleteNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCGroupDeleteNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupDeleteNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupDeleteNtf_descriptor_;
}

const SCGroupDeleteNtf& SCGroupDeleteNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupDeleteNtf* SCGroupDeleteNtf::default_instance_ = NULL;

SCGroupDeleteNtf* SCGroupDeleteNtf::New() const {
  return new SCGroupDeleteNtf;
}

void SCGroupDeleteNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupDeleteNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupDeleteNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupDeleteNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupDeleteNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupDeleteNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupDeleteNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupDeleteNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupDeleteNtf::MergeFrom(const SCGroupDeleteNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupDeleteNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupDeleteNtf::CopyFrom(const SCGroupDeleteNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupDeleteNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCGroupDeleteNtf::Swap(SCGroupDeleteNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupDeleteNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupDeleteNtf_descriptor_;
  metadata.reflection = SCGroupDeleteNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupMessageReq::kGroupidFieldNumber;
const int CSGroupMessageReq::kContentFieldNumber;
#endif  // !_MSC_VER

CSGroupMessageReq::CSGroupMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupMessageReq::InitAsDefaultInstance() {
}

CSGroupMessageReq::CSGroupMessageReq(const CSGroupMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupMessageReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupMessageReq::~CSGroupMessageReq() {
  SharedDtor();
}

void CSGroupMessageReq::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void CSGroupMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupMessageReq_descriptor_;
}

const CSGroupMessageReq& CSGroupMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupMessageReq* CSGroupMessageReq::default_instance_ = NULL;

CSGroupMessageReq* CSGroupMessageReq::New() const {
  return new CSGroupMessageReq;
}

void CSGroupMessageReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupMessageReq::MergeFrom(const CSGroupMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupMessageReq::CopyFrom(const CSGroupMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGroupMessageReq::Swap(CSGroupMessageReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupMessageReq_descriptor_;
  metadata.reflection = CSGroupMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupMessageNtf::kGroupidFieldNumber;
const int SCGroupMessageNtf::kContentFieldNumber;
const int SCGroupMessageNtf::kSenderFieldNumber;
#endif  // !_MSC_VER

SCGroupMessageNtf::SCGroupMessageNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupMessageNtf::InitAsDefaultInstance() {
}

SCGroupMessageNtf::SCGroupMessageNtf(const SCGroupMessageNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupMessageNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupMessageNtf::~SCGroupMessageNtf() {
  SharedDtor();
}

void SCGroupMessageNtf::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (this != default_instance_) {
  }
}

void SCGroupMessageNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupMessageNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupMessageNtf_descriptor_;
}

const SCGroupMessageNtf& SCGroupMessageNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupMessageNtf* SCGroupMessageNtf::default_instance_ = NULL;

SCGroupMessageNtf* SCGroupMessageNtf::New() const {
  return new SCGroupMessageNtf;
}

void SCGroupMessageNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_sender()) {
      if (sender_ != &::google::protobuf::internal::kEmptyString) {
        sender_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupMessageNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // required string content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sender;
        break;
      }

      // required string sender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sender:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sender()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sender().data(), this->sender().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupMessageNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->content(), output);
  }

  // required string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sender(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupMessageNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required string content = 2;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->content(), target);
  }

  // required string sender = 3;
  if (has_sender()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sender().data(), this->sender().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sender(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupMessageNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required string content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // required string sender = 3;
    if (has_sender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sender());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupMessageNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupMessageNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupMessageNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupMessageNtf::MergeFrom(const SCGroupMessageNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_sender()) {
      set_sender(from.sender());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupMessageNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupMessageNtf::CopyFrom(const SCGroupMessageNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupMessageNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SCGroupMessageNtf::Swap(SCGroupMessageNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(content_, other->content_);
    std::swap(sender_, other->sender_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupMessageNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupMessageNtf_descriptor_;
  metadata.reflection = SCGroupMessageNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupMemberOnlineNtf::kGroupidFieldNumber;
const int SCGroupMemberOnlineNtf::kUserFieldNumber;
#endif  // !_MSC_VER

SCGroupMemberOnlineNtf::SCGroupMemberOnlineNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupMemberOnlineNtf::InitAsDefaultInstance() {
}

SCGroupMemberOnlineNtf::SCGroupMemberOnlineNtf(const SCGroupMemberOnlineNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupMemberOnlineNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupMemberOnlineNtf::~SCGroupMemberOnlineNtf() {
  SharedDtor();
}

void SCGroupMemberOnlineNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void SCGroupMemberOnlineNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupMemberOnlineNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupMemberOnlineNtf_descriptor_;
}

const SCGroupMemberOnlineNtf& SCGroupMemberOnlineNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupMemberOnlineNtf* SCGroupMemberOnlineNtf::default_instance_ = NULL;

SCGroupMemberOnlineNtf* SCGroupMemberOnlineNtf::New() const {
  return new SCGroupMemberOnlineNtf;
}

void SCGroupMemberOnlineNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupMemberOnlineNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupMemberOnlineNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupMemberOnlineNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupMemberOnlineNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupMemberOnlineNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupMemberOnlineNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupMemberOnlineNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupMemberOnlineNtf::MergeFrom(const SCGroupMemberOnlineNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupMemberOnlineNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupMemberOnlineNtf::CopyFrom(const SCGroupMemberOnlineNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupMemberOnlineNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupMemberOnlineNtf::Swap(SCGroupMemberOnlineNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupMemberOnlineNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupMemberOnlineNtf_descriptor_;
  metadata.reflection = SCGroupMemberOnlineNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupMemberOfflineNtf::kGroupidFieldNumber;
const int SCGroupMemberOfflineNtf::kUserFieldNumber;
#endif  // !_MSC_VER

SCGroupMemberOfflineNtf::SCGroupMemberOfflineNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupMemberOfflineNtf::InitAsDefaultInstance() {
}

SCGroupMemberOfflineNtf::SCGroupMemberOfflineNtf(const SCGroupMemberOfflineNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupMemberOfflineNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupMemberOfflineNtf::~SCGroupMemberOfflineNtf() {
  SharedDtor();
}

void SCGroupMemberOfflineNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void SCGroupMemberOfflineNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupMemberOfflineNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupMemberOfflineNtf_descriptor_;
}

const SCGroupMemberOfflineNtf& SCGroupMemberOfflineNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupMemberOfflineNtf* SCGroupMemberOfflineNtf::default_instance_ = NULL;

SCGroupMemberOfflineNtf* SCGroupMemberOfflineNtf::New() const {
  return new SCGroupMemberOfflineNtf;
}

void SCGroupMemberOfflineNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupMemberOfflineNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // required string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupMemberOfflineNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupMemberOfflineNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupMemberOfflineNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupMemberOfflineNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupMemberOfflineNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupMemberOfflineNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupMemberOfflineNtf::MergeFrom(const SCGroupMemberOfflineNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupMemberOfflineNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupMemberOfflineNtf::CopyFrom(const SCGroupMemberOfflineNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupMemberOfflineNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCGroupMemberOfflineNtf::Swap(SCGroupMemberOfflineNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupMemberOfflineNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupMemberOfflineNtf_descriptor_;
  metadata.reflection = SCGroupMemberOfflineNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSGroupCreateGameRoomReq::kGroupidFieldNumber;
const int CSGroupCreateGameRoomReq::kGameFieldNumber;
#endif  // !_MSC_VER

CSGroupCreateGameRoomReq::CSGroupCreateGameRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSGroupCreateGameRoomReq::InitAsDefaultInstance() {
}

CSGroupCreateGameRoomReq::CSGroupCreateGameRoomReq(const CSGroupCreateGameRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSGroupCreateGameRoomReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSGroupCreateGameRoomReq::~CSGroupCreateGameRoomReq() {
  SharedDtor();
}

void CSGroupCreateGameRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSGroupCreateGameRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSGroupCreateGameRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSGroupCreateGameRoomReq_descriptor_;
}

const CSGroupCreateGameRoomReq& CSGroupCreateGameRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

CSGroupCreateGameRoomReq* CSGroupCreateGameRoomReq::default_instance_ = NULL;

CSGroupCreateGameRoomReq* CSGroupCreateGameRoomReq::New() const {
  return new CSGroupCreateGameRoomReq;
}

void CSGroupCreateGameRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSGroupCreateGameRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game;
        break;
      }

      // required int32 game = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSGroupCreateGameRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 game = 2;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSGroupCreateGameRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 game = 2;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSGroupCreateGameRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 game = 2;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSGroupCreateGameRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSGroupCreateGameRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSGroupCreateGameRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSGroupCreateGameRoomReq::MergeFrom(const CSGroupCreateGameRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSGroupCreateGameRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSGroupCreateGameRoomReq::CopyFrom(const CSGroupCreateGameRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSGroupCreateGameRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSGroupCreateGameRoomReq::Swap(CSGroupCreateGameRoomReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(game_, other->game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSGroupCreateGameRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSGroupCreateGameRoomReq_descriptor_;
  metadata.reflection = CSGroupCreateGameRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupCreateGameRoomRsp::kResultFieldNumber;
const int SCGroupCreateGameRoomRsp::kGroupidFieldNumber;
const int SCGroupCreateGameRoomRsp::kGameFieldNumber;
const int SCGroupCreateGameRoomRsp::kIpFieldNumber;
const int SCGroupCreateGameRoomRsp::kPortFieldNumber;
const int SCGroupCreateGameRoomRsp::kRoomidFieldNumber;
const int SCGroupCreateGameRoomRsp::kPasswordFieldNumber;
#endif  // !_MSC_VER

SCGroupCreateGameRoomRsp::SCGroupCreateGameRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupCreateGameRoomRsp::InitAsDefaultInstance() {
}

SCGroupCreateGameRoomRsp::SCGroupCreateGameRoomRsp(const SCGroupCreateGameRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupCreateGameRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  roomid_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupCreateGameRoomRsp::~SCGroupCreateGameRoomRsp() {
  SharedDtor();
}

void SCGroupCreateGameRoomRsp::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SCGroupCreateGameRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupCreateGameRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupCreateGameRoomRsp_descriptor_;
}

const SCGroupCreateGameRoomRsp& SCGroupCreateGameRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupCreateGameRoomRsp* SCGroupCreateGameRoomRsp::default_instance_ = NULL;

SCGroupCreateGameRoomRsp* SCGroupCreateGameRoomRsp::New() const {
  return new SCGroupCreateGameRoomRsp;
}

void SCGroupCreateGameRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    roomid_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupCreateGameRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game;
        break;
      }

      // required int32 game = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_password;
        break;
      }

      // optional string password = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupCreateGameRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // required int32 game = 3;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional int32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional int32 roomid = 6;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->roomid(), output);
  }

  // optional string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupCreateGameRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // required int32 game = 3;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional int32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional int32 roomid = 6;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->roomid(), target);
  }

  // optional string password = 7;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupCreateGameRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 game = 3;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 roomid = 6;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string password = 7;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupCreateGameRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupCreateGameRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupCreateGameRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupCreateGameRoomRsp::MergeFrom(const SCGroupCreateGameRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupCreateGameRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupCreateGameRoomRsp::CopyFrom(const SCGroupCreateGameRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupCreateGameRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SCGroupCreateGameRoomRsp::Swap(SCGroupCreateGameRoomRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(game_, other->game_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(roomid_, other->roomid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupCreateGameRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupCreateGameRoomRsp_descriptor_;
  metadata.reflection = SCGroupCreateGameRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCGroupCreateGameRoomNtf::kCreaterFieldNumber;
const int SCGroupCreateGameRoomNtf::kGameFieldNumber;
const int SCGroupCreateGameRoomNtf::kIpFieldNumber;
const int SCGroupCreateGameRoomNtf::kPortFieldNumber;
const int SCGroupCreateGameRoomNtf::kRoomidFieldNumber;
const int SCGroupCreateGameRoomNtf::kPasswordFieldNumber;
const int SCGroupCreateGameRoomNtf::kGroupidFieldNumber;
#endif  // !_MSC_VER

SCGroupCreateGameRoomNtf::SCGroupCreateGameRoomNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCGroupCreateGameRoomNtf::InitAsDefaultInstance() {
}

SCGroupCreateGameRoomNtf::SCGroupCreateGameRoomNtf(const SCGroupCreateGameRoomNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCGroupCreateGameRoomNtf::SharedCtor() {
  _cached_size_ = 0;
  creater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  roomid_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCGroupCreateGameRoomNtf::~SCGroupCreateGameRoomNtf() {
  SharedDtor();
}

void SCGroupCreateGameRoomNtf::SharedDtor() {
  if (creater_ != &::google::protobuf::internal::kEmptyString) {
    delete creater_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void SCGroupCreateGameRoomNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCGroupCreateGameRoomNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCGroupCreateGameRoomNtf_descriptor_;
}

const SCGroupCreateGameRoomNtf& SCGroupCreateGameRoomNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

SCGroupCreateGameRoomNtf* SCGroupCreateGameRoomNtf::default_instance_ = NULL;

SCGroupCreateGameRoomNtf* SCGroupCreateGameRoomNtf::New() const {
  return new SCGroupCreateGameRoomNtf;
}

void SCGroupCreateGameRoomNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_creater()) {
      if (creater_ != &::google::protobuf::internal::kEmptyString) {
        creater_->clear();
      }
    }
    game_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    roomid_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCGroupCreateGameRoomNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string creater = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_creater()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->creater().data(), this->creater().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game;
        break;
      }

      // required int32 game = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_password;
        break;
      }

      // optional string password = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCGroupCreateGameRoomNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string creater = 1;
  if (has_creater()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creater().data(), this->creater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->creater(), output);
  }

  // required int32 game = 2;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  // optional int32 roomid = 5;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->roomid(), output);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->password(), output);
  }

  // required uint64 groupid = 7;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCGroupCreateGameRoomNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string creater = 1;
  if (has_creater()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->creater().data(), this->creater().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->creater(), target);
  }

  // required int32 game = 2;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  // optional int32 roomid = 5;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->roomid(), target);
  }

  // optional string password = 6;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->password(), target);
  }

  // required uint64 groupid = 7;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCGroupCreateGameRoomNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string creater = 1;
    if (has_creater()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->creater());
    }

    // required int32 game = 2;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 roomid = 5;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string password = 6;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // required uint64 groupid = 7;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCGroupCreateGameRoomNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCGroupCreateGameRoomNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCGroupCreateGameRoomNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCGroupCreateGameRoomNtf::MergeFrom(const SCGroupCreateGameRoomNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_creater()) {
      set_creater(from.creater());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCGroupCreateGameRoomNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCGroupCreateGameRoomNtf::CopyFrom(const SCGroupCreateGameRoomNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCGroupCreateGameRoomNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000043) != 0x00000043) return false;

  return true;
}

void SCGroupCreateGameRoomNtf::Swap(SCGroupCreateGameRoomNtf* other) {
  if (other != this) {
    std::swap(creater_, other->creater_);
    std::swap(game_, other->game_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(roomid_, other->roomid_);
    std::swap(password_, other->password_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCGroupCreateGameRoomNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCGroupCreateGameRoomNtf_descriptor_;
  metadata.reflection = SCGroupCreateGameRoomNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGateAddGroupNtf::kGroupidFieldNumber;
const int GroupGateAddGroupNtf::kServeridFieldNumber;
#endif  // !_MSC_VER

GroupGateAddGroupNtf::GroupGateAddGroupNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGateAddGroupNtf::InitAsDefaultInstance() {
}

GroupGateAddGroupNtf::GroupGateAddGroupNtf(const GroupGateAddGroupNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGateAddGroupNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGateAddGroupNtf::~GroupGateAddGroupNtf() {
  SharedDtor();
}

void GroupGateAddGroupNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGateAddGroupNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGateAddGroupNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGateAddGroupNtf_descriptor_;
}

const GroupGateAddGroupNtf& GroupGateAddGroupNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGateAddGroupNtf* GroupGateAddGroupNtf::default_instance_ = NULL;

GroupGateAddGroupNtf* GroupGateAddGroupNtf::New() const {
  return new GroupGateAddGroupNtf;
}

void GroupGateAddGroupNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGateAddGroupNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGateAddGroupNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGateAddGroupNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGateAddGroupNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGateAddGroupNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGateAddGroupNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGateAddGroupNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGateAddGroupNtf::MergeFrom(const GroupGateAddGroupNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGateAddGroupNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGateAddGroupNtf::CopyFrom(const GroupGateAddGroupNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGateAddGroupNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupGateAddGroupNtf::Swap(GroupGateAddGroupNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGateAddGroupNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGateAddGroupNtf_descriptor_;
  metadata.reflection = GroupGateAddGroupNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGateDelGroupNtf::kGroupidFieldNumber;
#endif  // !_MSC_VER

GroupGateDelGroupNtf::GroupGateDelGroupNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGateDelGroupNtf::InitAsDefaultInstance() {
}

GroupGateDelGroupNtf::GroupGateDelGroupNtf(const GroupGateDelGroupNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGateDelGroupNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGateDelGroupNtf::~GroupGateDelGroupNtf() {
  SharedDtor();
}

void GroupGateDelGroupNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGateDelGroupNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGateDelGroupNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGateDelGroupNtf_descriptor_;
}

const GroupGateDelGroupNtf& GroupGateDelGroupNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGateDelGroupNtf* GroupGateDelGroupNtf::default_instance_ = NULL;

GroupGateDelGroupNtf* GroupGateDelGroupNtf::New() const {
  return new GroupGateDelGroupNtf;
}

void GroupGateDelGroupNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGateDelGroupNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGateDelGroupNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGateDelGroupNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGateDelGroupNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGateDelGroupNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGateDelGroupNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGateDelGroupNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGateDelGroupNtf::MergeFrom(const GroupGateDelGroupNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGateDelGroupNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGateDelGroupNtf::CopyFrom(const GroupGateDelGroupNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGateDelGroupNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupGateDelGroupNtf::Swap(GroupGateDelGroupNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGateDelGroupNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGateDelGroupNtf_descriptor_;
  metadata.reflection = GroupGateDelGroupNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerGateCloseNtf::kGateidFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerGateCloseNtf::GroupGroupmanagerGateCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerGateCloseNtf::InitAsDefaultInstance() {
}

GroupGroupmanagerGateCloseNtf::GroupGroupmanagerGateCloseNtf(const GroupGroupmanagerGateCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerGateCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerGateCloseNtf::~GroupGroupmanagerGateCloseNtf() {
  SharedDtor();
}

void GroupGroupmanagerGateCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerGateCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerGateCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerGateCloseNtf_descriptor_;
}

const GroupGroupmanagerGateCloseNtf& GroupGroupmanagerGateCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerGateCloseNtf* GroupGroupmanagerGateCloseNtf::default_instance_ = NULL;

GroupGroupmanagerGateCloseNtf* GroupGroupmanagerGateCloseNtf::New() const {
  return new GroupGroupmanagerGateCloseNtf;
}

void GroupGroupmanagerGateCloseNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerGateCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerGateCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerGateCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerGateCloseNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerGateCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerGateCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerGateCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerGateCloseNtf::MergeFrom(const GroupGroupmanagerGateCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerGateCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerGateCloseNtf::CopyFrom(const GroupGroupmanagerGateCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerGateCloseNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupGroupmanagerGateCloseNtf::Swap(GroupGroupmanagerGateCloseNtf* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerGateCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerGateCloseNtf_descriptor_;
  metadata.reflection = GroupGroupmanagerGateCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerCenterGateCloseNtf::kGateidFieldNumber;
#endif  // !_MSC_VER

GroupmanagerCenterGateCloseNtf::GroupmanagerCenterGateCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerCenterGateCloseNtf::InitAsDefaultInstance() {
}

GroupmanagerCenterGateCloseNtf::GroupmanagerCenterGateCloseNtf(const GroupmanagerCenterGateCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerCenterGateCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerCenterGateCloseNtf::~GroupmanagerCenterGateCloseNtf() {
  SharedDtor();
}

void GroupmanagerCenterGateCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupmanagerCenterGateCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerCenterGateCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerCenterGateCloseNtf_descriptor_;
}

const GroupmanagerCenterGateCloseNtf& GroupmanagerCenterGateCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerCenterGateCloseNtf* GroupmanagerCenterGateCloseNtf::default_instance_ = NULL;

GroupmanagerCenterGateCloseNtf* GroupmanagerCenterGateCloseNtf::New() const {
  return new GroupmanagerCenterGateCloseNtf;
}

void GroupmanagerCenterGateCloseNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerCenterGateCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerCenterGateCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerCenterGateCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerCenterGateCloseNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerCenterGateCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerCenterGateCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerCenterGateCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerCenterGateCloseNtf::MergeFrom(const GroupmanagerCenterGateCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerCenterGateCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerCenterGateCloseNtf::CopyFrom(const GroupmanagerCenterGateCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerCenterGateCloseNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupmanagerCenterGateCloseNtf::Swap(GroupmanagerCenterGateCloseNtf* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerCenterGateCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerCenterGateCloseNtf_descriptor_;
  metadata.reflection = GroupmanagerCenterGateCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerDynamicStartNtf::kIdFieldNumber;
const int GroupGroupmanagerDynamicStartNtf::kIpFieldNumber;
const int GroupGroupmanagerDynamicStartNtf::kPortFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerDynamicStartNtf::GroupGroupmanagerDynamicStartNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerDynamicStartNtf::InitAsDefaultInstance() {
}

GroupGroupmanagerDynamicStartNtf::GroupGroupmanagerDynamicStartNtf(const GroupGroupmanagerDynamicStartNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerDynamicStartNtf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerDynamicStartNtf::~GroupGroupmanagerDynamicStartNtf() {
  SharedDtor();
}

void GroupGroupmanagerDynamicStartNtf::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerDynamicStartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerDynamicStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerDynamicStartNtf_descriptor_;
}

const GroupGroupmanagerDynamicStartNtf& GroupGroupmanagerDynamicStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerDynamicStartNtf* GroupGroupmanagerDynamicStartNtf::default_instance_ = NULL;

GroupGroupmanagerDynamicStartNtf* GroupGroupmanagerDynamicStartNtf::New() const {
  return new GroupGroupmanagerDynamicStartNtf;
}

void GroupGroupmanagerDynamicStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerDynamicStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerDynamicStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerDynamicStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerDynamicStartNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerDynamicStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerDynamicStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerDynamicStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerDynamicStartNtf::MergeFrom(const GroupGroupmanagerDynamicStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerDynamicStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerDynamicStartNtf::CopyFrom(const GroupGroupmanagerDynamicStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerDynamicStartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupGroupmanagerDynamicStartNtf::Swap(GroupGroupmanagerDynamicStartNtf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerDynamicStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerDynamicStartNtf_descriptor_;
  metadata.reflection = GroupGroupmanagerDynamicStartNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupDynamicServerStartNtf::kIdFieldNumber;
const int GroupmanagerGroupDynamicServerStartNtf::kIpFieldNumber;
const int GroupmanagerGroupDynamicServerStartNtf::kPortFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupDynamicServerStartNtf::GroupmanagerGroupDynamicServerStartNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupDynamicServerStartNtf::InitAsDefaultInstance() {
}

GroupmanagerGroupDynamicServerStartNtf::GroupmanagerGroupDynamicServerStartNtf(const GroupmanagerGroupDynamicServerStartNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupDynamicServerStartNtf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupDynamicServerStartNtf::~GroupmanagerGroupDynamicServerStartNtf() {
  SharedDtor();
}

void GroupmanagerGroupDynamicServerStartNtf::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupDynamicServerStartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupDynamicServerStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupDynamicServerStartNtf_descriptor_;
}

const GroupmanagerGroupDynamicServerStartNtf& GroupmanagerGroupDynamicServerStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupDynamicServerStartNtf* GroupmanagerGroupDynamicServerStartNtf::default_instance_ = NULL;

GroupmanagerGroupDynamicServerStartNtf* GroupmanagerGroupDynamicServerStartNtf::New() const {
  return new GroupmanagerGroupDynamicServerStartNtf;
}

void GroupmanagerGroupDynamicServerStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupDynamicServerStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupDynamicServerStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupDynamicServerStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupDynamicServerStartNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupDynamicServerStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupDynamicServerStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupDynamicServerStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupDynamicServerStartNtf::MergeFrom(const GroupmanagerGroupDynamicServerStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupDynamicServerStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupDynamicServerStartNtf::CopyFrom(const GroupmanagerGroupDynamicServerStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupDynamicServerStartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupmanagerGroupDynamicServerStartNtf::Swap(GroupmanagerGroupDynamicServerStartNtf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupDynamicServerStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupDynamicServerStartNtf_descriptor_;
  metadata.reflection = GroupmanagerGroupDynamicServerStartNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerCenterGroupCloseNtf::kServeridFieldNumber;
#endif  // !_MSC_VER

GroupmanagerCenterGroupCloseNtf::GroupmanagerCenterGroupCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerCenterGroupCloseNtf::InitAsDefaultInstance() {
}

GroupmanagerCenterGroupCloseNtf::GroupmanagerCenterGroupCloseNtf(const GroupmanagerCenterGroupCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerCenterGroupCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerCenterGroupCloseNtf::~GroupmanagerCenterGroupCloseNtf() {
  SharedDtor();
}

void GroupmanagerCenterGroupCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupmanagerCenterGroupCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerCenterGroupCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerCenterGroupCloseNtf_descriptor_;
}

const GroupmanagerCenterGroupCloseNtf& GroupmanagerCenterGroupCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerCenterGroupCloseNtf* GroupmanagerCenterGroupCloseNtf::default_instance_ = NULL;

GroupmanagerCenterGroupCloseNtf* GroupmanagerCenterGroupCloseNtf::New() const {
  return new GroupmanagerCenterGroupCloseNtf;
}

void GroupmanagerCenterGroupCloseNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerCenterGroupCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerCenterGroupCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerCenterGroupCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerCenterGroupCloseNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerCenterGroupCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerCenterGroupCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerCenterGroupCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerCenterGroupCloseNtf::MergeFrom(const GroupmanagerCenterGroupCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerCenterGroupCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerCenterGroupCloseNtf::CopyFrom(const GroupmanagerCenterGroupCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerCenterGroupCloseNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupmanagerCenterGroupCloseNtf::Swap(GroupmanagerCenterGroupCloseNtf* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerCenterGroupCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerCenterGroupCloseNtf_descriptor_;
  metadata.reflection = GroupmanagerCenterGroupCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerReportStatusInfo::kServeridFieldNumber;
const int GroupGroupmanagerReportStatusInfo::kTotalgroupFieldNumber;
const int GroupGroupmanagerReportStatusInfo::kTotalmemberFieldNumber;
const int GroupGroupmanagerReportStatusInfo::kGateserversFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerReportStatusInfo::GroupGroupmanagerReportStatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerReportStatusInfo::InitAsDefaultInstance() {
}

GroupGroupmanagerReportStatusInfo::GroupGroupmanagerReportStatusInfo(const GroupGroupmanagerReportStatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerReportStatusInfo::SharedCtor() {
  _cached_size_ = 0;
  serverid_ = 0;
  totalgroup_ = 0;
  totalmember_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerReportStatusInfo::~GroupGroupmanagerReportStatusInfo() {
  SharedDtor();
}

void GroupGroupmanagerReportStatusInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerReportStatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerReportStatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerReportStatusInfo_descriptor_;
}

const GroupGroupmanagerReportStatusInfo& GroupGroupmanagerReportStatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerReportStatusInfo* GroupGroupmanagerReportStatusInfo::default_instance_ = NULL;

GroupGroupmanagerReportStatusInfo* GroupGroupmanagerReportStatusInfo::New() const {
  return new GroupGroupmanagerReportStatusInfo;
}

void GroupGroupmanagerReportStatusInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    serverid_ = 0;
    totalgroup_ = 0;
    totalmember_ = 0;
  }
  gateservers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerReportStatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 serverid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalgroup;
        break;
      }

      // required int32 totalgroup = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgroup_)));
          set_has_totalgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalmember;
        break;
      }

      // required int32 totalmember = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalmember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmember_)));
          set_has_totalmember();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gateservers;
        break;
      }

      // repeated .sglib.publicproto.GateServerInfo gateservers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gateservers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gateservers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerReportStatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->serverid(), output);
  }

  // required int32 totalgroup = 2;
  if (has_totalgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalgroup(), output);
  }

  // required int32 totalmember = 3;
  if (has_totalmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalmember(), output);
  }

  // repeated .sglib.publicproto.GateServerInfo gateservers = 4;
  for (int i = 0; i < this->gateservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gateservers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerReportStatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 serverid = 1;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->serverid(), target);
  }

  // required int32 totalgroup = 2;
  if (has_totalgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalgroup(), target);
  }

  // required int32 totalmember = 3;
  if (has_totalmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalmember(), target);
  }

  // repeated .sglib.publicproto.GateServerInfo gateservers = 4;
  for (int i = 0; i < this->gateservers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gateservers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerReportStatusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 serverid = 1;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 totalgroup = 2;
    if (has_totalgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgroup());
    }

    // required int32 totalmember = 3;
    if (has_totalmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmember());
    }

  }
  // repeated .sglib.publicproto.GateServerInfo gateservers = 4;
  total_size += 1 * this->gateservers_size();
  for (int i = 0; i < this->gateservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gateservers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerReportStatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerReportStatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerReportStatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerReportStatusInfo::MergeFrom(const GroupGroupmanagerReportStatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gateservers_.MergeFrom(from.gateservers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_totalgroup()) {
      set_totalgroup(from.totalgroup());
    }
    if (from.has_totalmember()) {
      set_totalmember(from.totalmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerReportStatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerReportStatusInfo::CopyFrom(const GroupGroupmanagerReportStatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerReportStatusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < gateservers_size(); i++) {
    if (!this->gateservers(i).IsInitialized()) return false;
  }
  return true;
}

void GroupGroupmanagerReportStatusInfo::Swap(GroupGroupmanagerReportStatusInfo* other) {
  if (other != this) {
    std::swap(serverid_, other->serverid_);
    std::swap(totalgroup_, other->totalgroup_);
    std::swap(totalmember_, other->totalmember_);
    gateservers_.Swap(&other->gateservers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerReportStatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerReportStatusInfo_descriptor_;
  metadata.reflection = GroupGroupmanagerReportStatusInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerCenterReportGroupGateInfo::kGateserversFieldNumber;
#endif  // !_MSC_VER

GroupmanagerCenterReportGroupGateInfo::GroupmanagerCenterReportGroupGateInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerCenterReportGroupGateInfo::InitAsDefaultInstance() {
}

GroupmanagerCenterReportGroupGateInfo::GroupmanagerCenterReportGroupGateInfo(const GroupmanagerCenterReportGroupGateInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerCenterReportGroupGateInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerCenterReportGroupGateInfo::~GroupmanagerCenterReportGroupGateInfo() {
  SharedDtor();
}

void GroupmanagerCenterReportGroupGateInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupmanagerCenterReportGroupGateInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerCenterReportGroupGateInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerCenterReportGroupGateInfo_descriptor_;
}

const GroupmanagerCenterReportGroupGateInfo& GroupmanagerCenterReportGroupGateInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerCenterReportGroupGateInfo* GroupmanagerCenterReportGroupGateInfo::default_instance_ = NULL;

GroupmanagerCenterReportGroupGateInfo* GroupmanagerCenterReportGroupGateInfo::New() const {
  return new GroupmanagerCenterReportGroupGateInfo;
}

void GroupmanagerCenterReportGroupGateInfo::Clear() {
  gateservers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerCenterReportGroupGateInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sglib.publicproto.GateServerInfo gateservers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gateservers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_gateservers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerCenterReportGroupGateInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sglib.publicproto.GateServerInfo gateservers = 1;
  for (int i = 0; i < this->gateservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gateservers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerCenterReportGroupGateInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sglib.publicproto.GateServerInfo gateservers = 1;
  for (int i = 0; i < this->gateservers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gateservers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerCenterReportGroupGateInfo::ByteSize() const {
  int total_size = 0;

  // repeated .sglib.publicproto.GateServerInfo gateservers = 1;
  total_size += 1 * this->gateservers_size();
  for (int i = 0; i < this->gateservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gateservers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerCenterReportGroupGateInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerCenterReportGroupGateInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerCenterReportGroupGateInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerCenterReportGroupGateInfo::MergeFrom(const GroupmanagerCenterReportGroupGateInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gateservers_.MergeFrom(from.gateservers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerCenterReportGroupGateInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerCenterReportGroupGateInfo::CopyFrom(const GroupmanagerCenterReportGroupGateInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerCenterReportGroupGateInfo::IsInitialized() const {

  for (int i = 0; i < gateservers_size(); i++) {
    if (!this->gateservers(i).IsInitialized()) return false;
  }
  return true;
}

void GroupmanagerCenterReportGroupGateInfo::Swap(GroupmanagerCenterReportGroupGateInfo* other) {
  if (other != this) {
    gateservers_.Swap(&other->gateservers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerCenterReportGroupGateInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerCenterReportGroupGateInfo_descriptor_;
  metadata.reflection = GroupmanagerCenterReportGroupGateInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerUserLoginNtf::kGateresidFieldNumber;
const int GroupGroupmanagerUserLoginNtf::kClientidFieldNumber;
const int GroupGroupmanagerUserLoginNtf::kUserFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerUserLoginNtf::GroupGroupmanagerUserLoginNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerUserLoginNtf::InitAsDefaultInstance() {
}

GroupGroupmanagerUserLoginNtf::GroupGroupmanagerUserLoginNtf(const GroupGroupmanagerUserLoginNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerUserLoginNtf::SharedCtor() {
  _cached_size_ = 0;
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerUserLoginNtf::~GroupGroupmanagerUserLoginNtf() {
  SharedDtor();
}

void GroupGroupmanagerUserLoginNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerUserLoginNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerUserLoginNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerUserLoginNtf_descriptor_;
}

const GroupGroupmanagerUserLoginNtf& GroupGroupmanagerUserLoginNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerUserLoginNtf* GroupGroupmanagerUserLoginNtf::default_instance_ = NULL;

GroupGroupmanagerUserLoginNtf* GroupGroupmanagerUserLoginNtf::New() const {
  return new GroupGroupmanagerUserLoginNtf;
}

void GroupGroupmanagerUserLoginNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerUserLoginNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateresid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_user;
        break;
      }

      // required string user = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerUserLoginNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateresid = 1;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateresid(), output);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientid(), output);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerUserLoginNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateresid = 1;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateresid(), target);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientid(), target);
  }

  // required string user = 3;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerUserLoginNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateresid = 1;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string user = 3;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerUserLoginNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerUserLoginNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerUserLoginNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerUserLoginNtf::MergeFrom(const GroupGroupmanagerUserLoginNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerUserLoginNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerUserLoginNtf::CopyFrom(const GroupGroupmanagerUserLoginNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerUserLoginNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupGroupmanagerUserLoginNtf::Swap(GroupGroupmanagerUserLoginNtf* other) {
  if (other != this) {
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerUserLoginNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerUserLoginNtf_descriptor_;
  metadata.reflection = GroupGroupmanagerUserLoginNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerUserLogoutNtf::kGateresidFieldNumber;
const int GroupGroupmanagerUserLogoutNtf::kClientidFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerUserLogoutNtf::GroupGroupmanagerUserLogoutNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerUserLogoutNtf::InitAsDefaultInstance() {
}

GroupGroupmanagerUserLogoutNtf::GroupGroupmanagerUserLogoutNtf(const GroupGroupmanagerUserLogoutNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerUserLogoutNtf::SharedCtor() {
  _cached_size_ = 0;
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerUserLogoutNtf::~GroupGroupmanagerUserLogoutNtf() {
  SharedDtor();
}

void GroupGroupmanagerUserLogoutNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerUserLogoutNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerUserLogoutNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerUserLogoutNtf_descriptor_;
}

const GroupGroupmanagerUserLogoutNtf& GroupGroupmanagerUserLogoutNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerUserLogoutNtf* GroupGroupmanagerUserLogoutNtf::default_instance_ = NULL;

GroupGroupmanagerUserLogoutNtf* GroupGroupmanagerUserLogoutNtf::New() const {
  return new GroupGroupmanagerUserLogoutNtf;
}

void GroupGroupmanagerUserLogoutNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerUserLogoutNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateresid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerUserLogoutNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateresid = 1;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateresid(), output);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerUserLogoutNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateresid = 1;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateresid(), target);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerUserLogoutNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateresid = 1;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerUserLogoutNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerUserLogoutNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerUserLogoutNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerUserLogoutNtf::MergeFrom(const GroupGroupmanagerUserLogoutNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerUserLogoutNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerUserLogoutNtf::CopyFrom(const GroupGroupmanagerUserLogoutNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerUserLogoutNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GroupGroupmanagerUserLogoutNtf::Swap(GroupGroupmanagerUserLogoutNtf* other) {
  if (other != this) {
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerUserLogoutNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerUserLogoutNtf_descriptor_;
  metadata.reflection = GroupGroupmanagerUserLogoutNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanageCreateGroupReq::kGateidFieldNumber;
const int GroupGroupmanageCreateGroupReq::kGateresidFieldNumber;
const int GroupGroupmanageCreateGroupReq::kClientidFieldNumber;
const int GroupGroupmanageCreateGroupReq::kNameFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanageCreateGroupReq::GroupGroupmanageCreateGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanageCreateGroupReq::InitAsDefaultInstance() {
}

GroupGroupmanageCreateGroupReq::GroupGroupmanageCreateGroupReq(const GroupGroupmanageCreateGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanageCreateGroupReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanageCreateGroupReq::~GroupGroupmanageCreateGroupReq() {
  SharedDtor();
}

void GroupGroupmanageCreateGroupReq::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GroupGroupmanageCreateGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanageCreateGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanageCreateGroupReq_descriptor_;
}

const GroupGroupmanageCreateGroupReq& GroupGroupmanageCreateGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanageCreateGroupReq* GroupGroupmanageCreateGroupReq::default_instance_ = NULL;

GroupGroupmanageCreateGroupReq* GroupGroupmanageCreateGroupReq::New() const {
  return new GroupGroupmanageCreateGroupReq;
}

void GroupGroupmanageCreateGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanageCreateGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanageCreateGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanageCreateGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanageCreateGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanageCreateGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanageCreateGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanageCreateGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanageCreateGroupReq::MergeFrom(const GroupGroupmanageCreateGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanageCreateGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanageCreateGroupReq::CopyFrom(const GroupGroupmanageCreateGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanageCreateGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupGroupmanageCreateGroupReq::Swap(GroupGroupmanageCreateGroupReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanageCreateGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanageCreateGroupReq_descriptor_;
  metadata.reflection = GroupGroupmanageCreateGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanageGroupCreateGroupNtf::kGateidFieldNumber;
const int GroupmanageGroupCreateGroupNtf::kGateresidFieldNumber;
const int GroupmanageGroupCreateGroupNtf::kClientidFieldNumber;
const int GroupmanageGroupCreateGroupNtf::kUserFieldNumber;
const int GroupmanageGroupCreateGroupNtf::kNameFieldNumber;
const int GroupmanageGroupCreateGroupNtf::kGroupidFieldNumber;
const int GroupmanageGroupCreateGroupNtf::kGroupserveridFieldNumber;
#endif  // !_MSC_VER

GroupmanageGroupCreateGroupNtf::GroupmanageGroupCreateGroupNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanageGroupCreateGroupNtf::InitAsDefaultInstance() {
}

GroupmanageGroupCreateGroupNtf::GroupmanageGroupCreateGroupNtf(const GroupmanageGroupCreateGroupNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanageGroupCreateGroupNtf::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = GOOGLE_ULONGLONG(0);
  groupserverid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanageGroupCreateGroupNtf::~GroupmanageGroupCreateGroupNtf() {
  SharedDtor();
}

void GroupmanageGroupCreateGroupNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanageGroupCreateGroupNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanageGroupCreateGroupNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanageGroupCreateGroupNtf_descriptor_;
}

const GroupmanageGroupCreateGroupNtf& GroupmanageGroupCreateGroupNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanageGroupCreateGroupNtf* GroupmanageGroupCreateGroupNtf::default_instance_ = NULL;

GroupmanageGroupCreateGroupNtf* GroupmanageGroupCreateGroupNtf::New() const {
  return new GroupmanageGroupCreateGroupNtf;
}

void GroupmanageGroupCreateGroupNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
    groupserverid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanageGroupCreateGroupNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_groupserverid;
        break;
      }

      // required uint64 groupserverid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupserverid_)));
          set_has_groupserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanageGroupCreateGroupNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required uint64 groupid = 6;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->groupid(), output);
  }

  // required uint64 groupserverid = 7;
  if (has_groupserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->groupserverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanageGroupCreateGroupNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required uint64 groupid = 6;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->groupid(), target);
  }

  // required uint64 groupserverid = 7;
  if (has_groupserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->groupserverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanageGroupCreateGroupNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 groupid = 6;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint64 groupserverid = 7;
    if (has_groupserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupserverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanageGroupCreateGroupNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanageGroupCreateGroupNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanageGroupCreateGroupNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanageGroupCreateGroupNtf::MergeFrom(const GroupmanageGroupCreateGroupNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupserverid()) {
      set_groupserverid(from.groupserverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanageGroupCreateGroupNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanageGroupCreateGroupNtf::CopyFrom(const GroupmanageGroupCreateGroupNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanageGroupCreateGroupNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GroupmanageGroupCreateGroupNtf::Swap(GroupmanageGroupCreateGroupNtf* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(user_, other->user_);
    std::swap(name_, other->name_);
    std::swap(groupid_, other->groupid_);
    std::swap(groupserverid_, other->groupserverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanageGroupCreateGroupNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanageGroupCreateGroupNtf_descriptor_;
  metadata.reflection = GroupmanageGroupCreateGroupNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerCreateGroupResult::kResultFieldNumber;
const int GroupGroupmanagerCreateGroupResult::kGateidFieldNumber;
const int GroupGroupmanagerCreateGroupResult::kClientidFieldNumber;
const int GroupGroupmanagerCreateGroupResult::kUserFieldNumber;
const int GroupGroupmanagerCreateGroupResult::kNameFieldNumber;
const int GroupGroupmanagerCreateGroupResult::kGroupidFieldNumber;
const int GroupGroupmanagerCreateGroupResult::kGroupserveridFieldNumber;
const int GroupGroupmanagerCreateGroupResult::kServeridFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerCreateGroupResult::GroupGroupmanagerCreateGroupResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerCreateGroupResult::InitAsDefaultInstance() {
}

GroupGroupmanagerCreateGroupResult::GroupGroupmanagerCreateGroupResult(const GroupGroupmanagerCreateGroupResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerCreateGroupResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = GOOGLE_ULONGLONG(0);
  groupserverid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerCreateGroupResult::~GroupGroupmanagerCreateGroupResult() {
  SharedDtor();
}

void GroupGroupmanagerCreateGroupResult::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerCreateGroupResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerCreateGroupResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerCreateGroupResult_descriptor_;
}

const GroupGroupmanagerCreateGroupResult& GroupGroupmanagerCreateGroupResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerCreateGroupResult* GroupGroupmanagerCreateGroupResult::default_instance_ = NULL;

GroupGroupmanagerCreateGroupResult* GroupGroupmanagerCreateGroupResult::New() const {
  return new GroupGroupmanagerCreateGroupResult;
}

void GroupGroupmanagerCreateGroupResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
    groupserverid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerCreateGroupResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint64 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_groupserverid;
        break;
      }

      // required uint64 groupserverid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupserverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupserverid_)));
          set_has_groupserverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerCreateGroupResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gateid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required uint64 groupid = 6;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->groupid(), output);
  }

  // required uint64 groupserverid = 7;
  if (has_groupserverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->groupserverid(), output);
  }

  // optional int32 serverid = 8;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerCreateGroupResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gateid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required uint64 groupid = 6;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->groupid(), target);
  }

  // required uint64 groupserverid = 7;
  if (has_groupserverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->groupserverid(), target);
  }

  // optional int32 serverid = 8;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerCreateGroupResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint64 groupid = 6;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required uint64 groupserverid = 7;
    if (has_groupserverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupserverid());
    }

    // optional int32 serverid = 8;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerCreateGroupResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerCreateGroupResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerCreateGroupResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerCreateGroupResult::MergeFrom(const GroupGroupmanagerCreateGroupResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_groupserverid()) {
      set_groupserverid(from.groupserverid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerCreateGroupResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerCreateGroupResult::CopyFrom(const GroupGroupmanagerCreateGroupResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerCreateGroupResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void GroupGroupmanagerCreateGroupResult::Swap(GroupGroupmanagerCreateGroupResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(user_, other->user_);
    std::swap(name_, other->name_);
    std::swap(groupid_, other->groupid_);
    std::swap(groupserverid_, other->groupserverid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerCreateGroupResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerCreateGroupResult_descriptor_;
  metadata.reflection = GroupGroupmanagerCreateGroupResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupCreateGroupRsp::kResultFieldNumber;
const int GroupmanagerGroupCreateGroupRsp::kGateidFieldNumber;
const int GroupmanagerGroupCreateGroupRsp::kClientidFieldNumber;
const int GroupmanagerGroupCreateGroupRsp::kNameFieldNumber;
const int GroupmanagerGroupCreateGroupRsp::kGroupidFieldNumber;
const int GroupmanagerGroupCreateGroupRsp::kServeridFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupCreateGroupRsp::GroupmanagerGroupCreateGroupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupCreateGroupRsp::InitAsDefaultInstance() {
}

GroupmanagerGroupCreateGroupRsp::GroupmanagerGroupCreateGroupRsp(const GroupmanagerGroupCreateGroupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupCreateGroupRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupCreateGroupRsp::~GroupmanagerGroupCreateGroupRsp() {
  SharedDtor();
}

void GroupmanagerGroupCreateGroupRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupCreateGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupCreateGroupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupCreateGroupRsp_descriptor_;
}

const GroupmanagerGroupCreateGroupRsp& GroupmanagerGroupCreateGroupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupCreateGroupRsp* GroupmanagerGroupCreateGroupRsp::default_instance_ = NULL;

GroupmanagerGroupCreateGroupRsp* GroupmanagerGroupCreateGroupRsp::New() const {
  return new GroupmanagerGroupCreateGroupRsp;
}

void GroupmanagerGroupCreateGroupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    groupid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupCreateGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint64 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // required string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_groupid;
        break;
      }

      // optional uint64 groupid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupCreateGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gateid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional uint64 groupid = 5;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->groupid(), output);
  }

  // optional int32 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupCreateGroupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gateid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional uint64 groupid = 5;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->groupid(), target);
  }

  // optional int32 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupCreateGroupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 groupid = 5;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional int32 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupCreateGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupCreateGroupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupCreateGroupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupCreateGroupRsp::MergeFrom(const GroupmanagerGroupCreateGroupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupCreateGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupCreateGroupRsp::CopyFrom(const GroupmanagerGroupCreateGroupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupCreateGroupRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupmanagerGroupCreateGroupRsp::Swap(GroupmanagerGroupCreateGroupRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(name_, other->name_);
    std::swap(groupid_, other->groupid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupCreateGroupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupCreateGroupRsp_descriptor_;
  metadata.reflection = GroupmanagerGroupCreateGroupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerAddMemberToGroupReq::kGateidFieldNumber;
const int GroupGroupmanagerAddMemberToGroupReq::kGateresidFieldNumber;
const int GroupGroupmanagerAddMemberToGroupReq::kClientidFieldNumber;
const int GroupGroupmanagerAddMemberToGroupReq::kGroupidFieldNumber;
const int GroupGroupmanagerAddMemberToGroupReq::kUsersFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerAddMemberToGroupReq::GroupGroupmanagerAddMemberToGroupReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerAddMemberToGroupReq::InitAsDefaultInstance() {
}

GroupGroupmanagerAddMemberToGroupReq::GroupGroupmanagerAddMemberToGroupReq(const GroupGroupmanagerAddMemberToGroupReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerAddMemberToGroupReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerAddMemberToGroupReq::~GroupGroupmanagerAddMemberToGroupReq() {
  SharedDtor();
}

void GroupGroupmanagerAddMemberToGroupReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerAddMemberToGroupReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerAddMemberToGroupReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerAddMemberToGroupReq_descriptor_;
}

const GroupGroupmanagerAddMemberToGroupReq& GroupGroupmanagerAddMemberToGroupReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerAddMemberToGroupReq* GroupGroupmanagerAddMemberToGroupReq::default_instance_ = NULL;

GroupGroupmanagerAddMemberToGroupReq* GroupGroupmanagerAddMemberToGroupReq::New() const {
  return new GroupGroupmanagerAddMemberToGroupReq;
}

void GroupGroupmanagerAddMemberToGroupReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerAddMemberToGroupReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_users;
        break;
      }

      // repeated string users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_users()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->users(this->users_size() - 1).data(),
            this->users(this->users_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerAddMemberToGroupReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->groupid(), output);
  }

  // repeated string users = 5;
  for (int i = 0; i < this->users_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->users(i).data(), this->users(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerAddMemberToGroupReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->groupid(), target);
  }

  // repeated string users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->users(i).data(), this->users(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerAddMemberToGroupReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required uint64 groupid = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated string users = 5;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerAddMemberToGroupReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerAddMemberToGroupReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerAddMemberToGroupReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerAddMemberToGroupReq::MergeFrom(const GroupGroupmanagerAddMemberToGroupReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerAddMemberToGroupReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerAddMemberToGroupReq::CopyFrom(const GroupGroupmanagerAddMemberToGroupReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerAddMemberToGroupReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupGroupmanagerAddMemberToGroupReq::Swap(GroupGroupmanagerAddMemberToGroupReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(groupid_, other->groupid_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerAddMemberToGroupReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerAddMemberToGroupReq_descriptor_;
  metadata.reflection = GroupGroupmanagerAddMemberToGroupReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupAddMemberToGroupRsp::kGateidFieldNumber;
const int GroupmanagerGroupAddMemberToGroupRsp::kGateresidFieldNumber;
const int GroupmanagerGroupAddMemberToGroupRsp::kClientidFieldNumber;
const int GroupmanagerGroupAddMemberToGroupRsp::kGroupidFieldNumber;
const int GroupmanagerGroupAddMemberToGroupRsp::kUsersFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupAddMemberToGroupRsp::GroupmanagerGroupAddMemberToGroupRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupAddMemberToGroupRsp::InitAsDefaultInstance() {
}

GroupmanagerGroupAddMemberToGroupRsp::GroupmanagerGroupAddMemberToGroupRsp(const GroupmanagerGroupAddMemberToGroupRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupAddMemberToGroupRsp::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupAddMemberToGroupRsp::~GroupmanagerGroupAddMemberToGroupRsp() {
  SharedDtor();
}

void GroupmanagerGroupAddMemberToGroupRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupAddMemberToGroupRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupAddMemberToGroupRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupAddMemberToGroupRsp_descriptor_;
}

const GroupmanagerGroupAddMemberToGroupRsp& GroupmanagerGroupAddMemberToGroupRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupAddMemberToGroupRsp* GroupmanagerGroupAddMemberToGroupRsp::default_instance_ = NULL;

GroupmanagerGroupAddMemberToGroupRsp* GroupmanagerGroupAddMemberToGroupRsp::New() const {
  return new GroupmanagerGroupAddMemberToGroupRsp;
}

void GroupmanagerGroupAddMemberToGroupRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupAddMemberToGroupRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_users;
        break;
      }

      // repeated .sglib.publicproto.GroupMemberPosInfo users = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupAddMemberToGroupRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->groupid(), output);
  }

  // repeated .sglib.publicproto.GroupMemberPosInfo users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupAddMemberToGroupRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->groupid(), target);
  }

  // repeated .sglib.publicproto.GroupMemberPosInfo users = 5;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupAddMemberToGroupRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required uint64 groupid = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated .sglib.publicproto.GroupMemberPosInfo users = 5;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupAddMemberToGroupRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupAddMemberToGroupRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupAddMemberToGroupRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupAddMemberToGroupRsp::MergeFrom(const GroupmanagerGroupAddMemberToGroupRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupAddMemberToGroupRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupAddMemberToGroupRsp::CopyFrom(const GroupmanagerGroupAddMemberToGroupRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupAddMemberToGroupRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void GroupmanagerGroupAddMemberToGroupRsp::Swap(GroupmanagerGroupAddMemberToGroupRsp* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(groupid_, other->groupid_);
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupAddMemberToGroupRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupAddMemberToGroupRsp_descriptor_;
  metadata.reflection = GroupmanagerGroupAddMemberToGroupRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerForAgreeJoinAskInfoReq::kGateresidFieldNumber;
const int GroupGroupmanagerForAgreeJoinAskInfoReq::kClientidFieldNumber;
const int GroupGroupmanagerForAgreeJoinAskInfoReq::kGroupidFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerForAgreeJoinAskInfoReq::GroupGroupmanagerForAgreeJoinAskInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::InitAsDefaultInstance() {
}

GroupGroupmanagerForAgreeJoinAskInfoReq::GroupGroupmanagerForAgreeJoinAskInfoReq(const GroupGroupmanagerForAgreeJoinAskInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::SharedCtor() {
  _cached_size_ = 0;
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerForAgreeJoinAskInfoReq::~GroupGroupmanagerForAgreeJoinAskInfoReq() {
  SharedDtor();
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerForAgreeJoinAskInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerForAgreeJoinAskInfoReq_descriptor_;
}

const GroupGroupmanagerForAgreeJoinAskInfoReq& GroupGroupmanagerForAgreeJoinAskInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerForAgreeJoinAskInfoReq* GroupGroupmanagerForAgreeJoinAskInfoReq::default_instance_ = NULL;

GroupGroupmanagerForAgreeJoinAskInfoReq* GroupGroupmanagerForAgreeJoinAskInfoReq::New() const {
  return new GroupGroupmanagerForAgreeJoinAskInfoReq;
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerForAgreeJoinAskInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gateresid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gateresid = 1;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gateresid(), output);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientid(), output);
  }

  // required uint64 groupid = 3;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerForAgreeJoinAskInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gateresid = 1;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gateresid(), target);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientid(), target);
  }

  // required uint64 groupid = 3;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerForAgreeJoinAskInfoReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gateresid = 1;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required uint64 groupid = 3;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerForAgreeJoinAskInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerForAgreeJoinAskInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::MergeFrom(const GroupGroupmanagerForAgreeJoinAskInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::CopyFrom(const GroupGroupmanagerForAgreeJoinAskInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerForAgreeJoinAskInfoReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GroupGroupmanagerForAgreeJoinAskInfoReq::Swap(GroupGroupmanagerForAgreeJoinAskInfoReq* other) {
  if (other != this) {
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerForAgreeJoinAskInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerForAgreeJoinAskInfoReq_descriptor_;
  metadata.reflection = GroupGroupmanagerForAgreeJoinAskInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupForAgreeJoinAskInfoRsp::kResultFieldNumber;
const int GroupmanagerGroupForAgreeJoinAskInfoRsp::kGateresidFieldNumber;
const int GroupmanagerGroupForAgreeJoinAskInfoRsp::kClientidFieldNumber;
const int GroupmanagerGroupForAgreeJoinAskInfoRsp::kGroupidFieldNumber;
const int GroupmanagerGroupForAgreeJoinAskInfoRsp::kUserFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupForAgreeJoinAskInfoRsp::GroupmanagerGroupForAgreeJoinAskInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::InitAsDefaultInstance() {
}

GroupmanagerGroupForAgreeJoinAskInfoRsp::GroupmanagerGroupForAgreeJoinAskInfoRsp(const GroupmanagerGroupForAgreeJoinAskInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  groupid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupForAgreeJoinAskInfoRsp::~GroupmanagerGroupForAgreeJoinAskInfoRsp() {
  SharedDtor();
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupForAgreeJoinAskInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupForAgreeJoinAskInfoRsp_descriptor_;
}

const GroupmanagerGroupForAgreeJoinAskInfoRsp& GroupmanagerGroupForAgreeJoinAskInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupForAgreeJoinAskInfoRsp* GroupmanagerGroupForAgreeJoinAskInfoRsp::default_instance_ = NULL;

GroupmanagerGroupForAgreeJoinAskInfoRsp* GroupmanagerGroupForAgreeJoinAskInfoRsp::New() const {
  return new GroupmanagerGroupForAgreeJoinAskInfoRsp;
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    groupid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupForAgreeJoinAskInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_user;
        break;
      }

      // optional string user = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->groupid(), output);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupForAgreeJoinAskInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required uint64 groupid = 4;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->groupid(), target);
  }

  // optional string user = 5;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupForAgreeJoinAskInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required uint64 groupid = 4;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional string user = 5;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupForAgreeJoinAskInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupForAgreeJoinAskInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::MergeFrom(const GroupmanagerGroupForAgreeJoinAskInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::CopyFrom(const GroupmanagerGroupForAgreeJoinAskInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupForAgreeJoinAskInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupmanagerGroupForAgreeJoinAskInfoRsp::Swap(GroupmanagerGroupForAgreeJoinAskInfoRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(groupid_, other->groupid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupForAgreeJoinAskInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupForAgreeJoinAskInfoRsp_descriptor_;
  metadata.reflection = GroupmanagerGroupForAgreeJoinAskInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupLoadGroupNtf::kGroupidFieldNumber;
const int GroupmanagerGroupLoadGroupNtf::kGateresidFieldNumber;
const int GroupmanagerGroupLoadGroupNtf::kClientidFieldNumber;
const int GroupmanagerGroupLoadGroupNtf::kUserFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupLoadGroupNtf::GroupmanagerGroupLoadGroupNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupLoadGroupNtf::InitAsDefaultInstance() {
}

GroupmanagerGroupLoadGroupNtf::GroupmanagerGroupLoadGroupNtf(const GroupmanagerGroupLoadGroupNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupLoadGroupNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupLoadGroupNtf::~GroupmanagerGroupLoadGroupNtf() {
  SharedDtor();
}

void GroupmanagerGroupLoadGroupNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupLoadGroupNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupLoadGroupNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupLoadGroupNtf_descriptor_;
}

const GroupmanagerGroupLoadGroupNtf& GroupmanagerGroupLoadGroupNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupLoadGroupNtf* GroupmanagerGroupLoadGroupNtf::default_instance_ = NULL;

GroupmanagerGroupLoadGroupNtf* GroupmanagerGroupLoadGroupNtf::New() const {
  return new GroupmanagerGroupLoadGroupNtf;
}

void GroupmanagerGroupLoadGroupNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupLoadGroupNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupLoadGroupNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupLoadGroupNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupLoadGroupNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupLoadGroupNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupLoadGroupNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupLoadGroupNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupLoadGroupNtf::MergeFrom(const GroupmanagerGroupLoadGroupNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupLoadGroupNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupLoadGroupNtf::CopyFrom(const GroupmanagerGroupLoadGroupNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupLoadGroupNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupmanagerGroupLoadGroupNtf::Swap(GroupmanagerGroupLoadGroupNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupLoadGroupNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupLoadGroupNtf_descriptor_;
  metadata.reflection = GroupmanagerGroupLoadGroupNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerLoadGroupResult::kResultFieldNumber;
const int GroupGroupmanagerLoadGroupResult::kGroupidFieldNumber;
const int GroupGroupmanagerLoadGroupResult::kServeridFieldNumber;
const int GroupGroupmanagerLoadGroupResult::kUserFieldNumber;
const int GroupGroupmanagerLoadGroupResult::kTotalgroupFieldNumber;
const int GroupGroupmanagerLoadGroupResult::kTotalmemberFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerLoadGroupResult::GroupGroupmanagerLoadGroupResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerLoadGroupResult::InitAsDefaultInstance() {
}

GroupGroupmanagerLoadGroupResult::GroupGroupmanagerLoadGroupResult(const GroupGroupmanagerLoadGroupResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerLoadGroupResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  serverid_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalgroup_ = 0;
  totalmember_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerLoadGroupResult::~GroupGroupmanagerLoadGroupResult() {
  SharedDtor();
}

void GroupGroupmanagerLoadGroupResult::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerLoadGroupResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerLoadGroupResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerLoadGroupResult_descriptor_;
}

const GroupGroupmanagerLoadGroupResult& GroupGroupmanagerLoadGroupResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerLoadGroupResult* GroupGroupmanagerLoadGroupResult::default_instance_ = NULL;

GroupGroupmanagerLoadGroupResult* GroupGroupmanagerLoadGroupResult::New() const {
  return new GroupGroupmanagerLoadGroupResult;
}

void GroupGroupmanagerLoadGroupResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
    serverid_ = 0;
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    totalgroup_ = 0;
    totalmember_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerLoadGroupResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalgroup;
        break;
      }

      // required int32 totalgroup = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgroup_)));
          set_has_totalgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalmember;
        break;
      }

      // required int32 totalmember = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalmember:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalmember_)));
          set_has_totalmember();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerLoadGroupResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // optional int32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->serverid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // required int32 totalgroup = 5;
  if (has_totalgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalgroup(), output);
  }

  // required int32 totalmember = 6;
  if (has_totalmember()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalmember(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerLoadGroupResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // optional int32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->serverid(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // required int32 totalgroup = 5;
  if (has_totalgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalgroup(), target);
  }

  // required int32 totalmember = 6;
  if (has_totalmember()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalmember(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerLoadGroupResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // optional int32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // required int32 totalgroup = 5;
    if (has_totalgroup()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgroup());
    }

    // required int32 totalmember = 6;
    if (has_totalmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalmember());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerLoadGroupResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerLoadGroupResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerLoadGroupResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerLoadGroupResult::MergeFrom(const GroupGroupmanagerLoadGroupResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_totalgroup()) {
      set_totalgroup(from.totalgroup());
    }
    if (from.has_totalmember()) {
      set_totalmember(from.totalmember());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerLoadGroupResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerLoadGroupResult::CopyFrom(const GroupGroupmanagerLoadGroupResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerLoadGroupResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void GroupGroupmanagerLoadGroupResult::Swap(GroupGroupmanagerLoadGroupResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(serverid_, other->serverid_);
    std::swap(user_, other->user_);
    std::swap(totalgroup_, other->totalgroup_);
    std::swap(totalmember_, other->totalmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerLoadGroupResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerLoadGroupResult_descriptor_;
  metadata.reflection = GroupGroupmanagerLoadGroupResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupMemberOnlineNtf::kGroupidFieldNumber;
const int GroupmanagerGroupMemberOnlineNtf::kGateresidFieldNumber;
const int GroupmanagerGroupMemberOnlineNtf::kClientidFieldNumber;
const int GroupmanagerGroupMemberOnlineNtf::kUserFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupMemberOnlineNtf::GroupmanagerGroupMemberOnlineNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupMemberOnlineNtf::InitAsDefaultInstance() {
}

GroupmanagerGroupMemberOnlineNtf::GroupmanagerGroupMemberOnlineNtf(const GroupmanagerGroupMemberOnlineNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupMemberOnlineNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupMemberOnlineNtf::~GroupmanagerGroupMemberOnlineNtf() {
  SharedDtor();
}

void GroupmanagerGroupMemberOnlineNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupMemberOnlineNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupMemberOnlineNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupMemberOnlineNtf_descriptor_;
}

const GroupmanagerGroupMemberOnlineNtf& GroupmanagerGroupMemberOnlineNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupMemberOnlineNtf* GroupmanagerGroupMemberOnlineNtf::default_instance_ = NULL;

GroupmanagerGroupMemberOnlineNtf* GroupmanagerGroupMemberOnlineNtf::New() const {
  return new GroupmanagerGroupMemberOnlineNtf;
}

void GroupmanagerGroupMemberOnlineNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupMemberOnlineNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupMemberOnlineNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupMemberOnlineNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupMemberOnlineNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupMemberOnlineNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupMemberOnlineNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupMemberOnlineNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupMemberOnlineNtf::MergeFrom(const GroupmanagerGroupMemberOnlineNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupMemberOnlineNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupMemberOnlineNtf::CopyFrom(const GroupmanagerGroupMemberOnlineNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupMemberOnlineNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupmanagerGroupMemberOnlineNtf::Swap(GroupmanagerGroupMemberOnlineNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupMemberOnlineNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupMemberOnlineNtf_descriptor_;
  metadata.reflection = GroupmanagerGroupMemberOnlineNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupMemberOfflineNtf::kGroupidFieldNumber;
const int GroupmanagerGroupMemberOfflineNtf::kGateresidFieldNumber;
const int GroupmanagerGroupMemberOfflineNtf::kClientidFieldNumber;
const int GroupmanagerGroupMemberOfflineNtf::kUserFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupMemberOfflineNtf::GroupmanagerGroupMemberOfflineNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupMemberOfflineNtf::InitAsDefaultInstance() {
}

GroupmanagerGroupMemberOfflineNtf::GroupmanagerGroupMemberOfflineNtf(const GroupmanagerGroupMemberOfflineNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupMemberOfflineNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupMemberOfflineNtf::~GroupmanagerGroupMemberOfflineNtf() {
  SharedDtor();
}

void GroupmanagerGroupMemberOfflineNtf::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupMemberOfflineNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupMemberOfflineNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupMemberOfflineNtf_descriptor_;
}

const GroupmanagerGroupMemberOfflineNtf& GroupmanagerGroupMemberOfflineNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupMemberOfflineNtf* GroupmanagerGroupMemberOfflineNtf::default_instance_ = NULL;

GroupmanagerGroupMemberOfflineNtf* GroupmanagerGroupMemberOfflineNtf::New() const {
  return new GroupmanagerGroupMemberOfflineNtf;
}

void GroupmanagerGroupMemberOfflineNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupMemberOfflineNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupMemberOfflineNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupMemberOfflineNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupMemberOfflineNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupMemberOfflineNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupMemberOfflineNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupMemberOfflineNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupMemberOfflineNtf::MergeFrom(const GroupmanagerGroupMemberOfflineNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupMemberOfflineNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupMemberOfflineNtf::CopyFrom(const GroupmanagerGroupMemberOfflineNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupMemberOfflineNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupmanagerGroupMemberOfflineNtf::Swap(GroupmanagerGroupMemberOfflineNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupMemberOfflineNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupMemberOfflineNtf_descriptor_;
  metadata.reflection = GroupmanagerGroupMemberOfflineNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerMemberLeaveNtf::kGroupidFieldNumber;
const int GroupGroupmanagerMemberLeaveNtf::kUserFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerMemberLeaveNtf::GroupGroupmanagerMemberLeaveNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerMemberLeaveNtf::InitAsDefaultInstance() {
}

GroupGroupmanagerMemberLeaveNtf::GroupGroupmanagerMemberLeaveNtf(const GroupGroupmanagerMemberLeaveNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerMemberLeaveNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerMemberLeaveNtf::~GroupGroupmanagerMemberLeaveNtf() {
  SharedDtor();
}

void GroupGroupmanagerMemberLeaveNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerMemberLeaveNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerMemberLeaveNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerMemberLeaveNtf_descriptor_;
}

const GroupGroupmanagerMemberLeaveNtf& GroupGroupmanagerMemberLeaveNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerMemberLeaveNtf* GroupGroupmanagerMemberLeaveNtf::default_instance_ = NULL;

GroupGroupmanagerMemberLeaveNtf* GroupGroupmanagerMemberLeaveNtf::New() const {
  return new GroupGroupmanagerMemberLeaveNtf;
}

void GroupGroupmanagerMemberLeaveNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  user_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerMemberLeaveNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // repeated string user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user(this->user_size() - 1).data(),
            this->user(this->user_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_user;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerMemberLeaveNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // repeated string user = 2;
  for (int i = 0; i < this->user_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->user(i).data(), this->user(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->user(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerMemberLeaveNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // repeated string user = 2;
  for (int i = 0; i < this->user_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user(i).data(), this->user(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->user(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerMemberLeaveNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  // repeated string user = 2;
  total_size += 1 * this->user_size();
  for (int i = 0; i < this->user_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->user(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerMemberLeaveNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerMemberLeaveNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerMemberLeaveNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerMemberLeaveNtf::MergeFrom(const GroupGroupmanagerMemberLeaveNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_.MergeFrom(from.user_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerMemberLeaveNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerMemberLeaveNtf::CopyFrom(const GroupGroupmanagerMemberLeaveNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerMemberLeaveNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupGroupmanagerMemberLeaveNtf::Swap(GroupGroupmanagerMemberLeaveNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    user_.Swap(&other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerMemberLeaveNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerMemberLeaveNtf_descriptor_;
  metadata.reflection = GroupGroupmanagerMemberLeaveNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerGroupDeleteNtf::kGroupidFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerGroupDeleteNtf::GroupGroupmanagerGroupDeleteNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerGroupDeleteNtf::InitAsDefaultInstance() {
}

GroupGroupmanagerGroupDeleteNtf::GroupGroupmanagerGroupDeleteNtf(const GroupGroupmanagerGroupDeleteNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerGroupDeleteNtf::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerGroupDeleteNtf::~GroupGroupmanagerGroupDeleteNtf() {
  SharedDtor();
}

void GroupGroupmanagerGroupDeleteNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerGroupDeleteNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerGroupDeleteNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerGroupDeleteNtf_descriptor_;
}

const GroupGroupmanagerGroupDeleteNtf& GroupGroupmanagerGroupDeleteNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerGroupDeleteNtf* GroupGroupmanagerGroupDeleteNtf::default_instance_ = NULL;

GroupGroupmanagerGroupDeleteNtf* GroupGroupmanagerGroupDeleteNtf::New() const {
  return new GroupGroupmanagerGroupDeleteNtf;
}

void GroupGroupmanagerGroupDeleteNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerGroupDeleteNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerGroupDeleteNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerGroupDeleteNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerGroupDeleteNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerGroupDeleteNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerGroupDeleteNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerGroupDeleteNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerGroupDeleteNtf::MergeFrom(const GroupGroupmanagerGroupDeleteNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerGroupDeleteNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerGroupDeleteNtf::CopyFrom(const GroupGroupmanagerGroupDeleteNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerGroupDeleteNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupGroupmanagerGroupDeleteNtf::Swap(GroupGroupmanagerGroupDeleteNtf* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerGroupDeleteNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerGroupDeleteNtf_descriptor_;
  metadata.reflection = GroupGroupmanagerGroupDeleteNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupGroupmanagerCreateGameRoomReq::kGroupidFieldNumber;
const int GroupGroupmanagerCreateGameRoomReq::kGateresidFieldNumber;
const int GroupGroupmanagerCreateGameRoomReq::kClientidFieldNumber;
const int GroupGroupmanagerCreateGameRoomReq::kGameFieldNumber;
#endif  // !_MSC_VER

GroupGroupmanagerCreateGameRoomReq::GroupGroupmanagerCreateGameRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupGroupmanagerCreateGameRoomReq::InitAsDefaultInstance() {
}

GroupGroupmanagerCreateGameRoomReq::GroupGroupmanagerCreateGameRoomReq(const GroupGroupmanagerCreateGameRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupGroupmanagerCreateGameRoomReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupGroupmanagerCreateGameRoomReq::~GroupGroupmanagerCreateGameRoomReq() {
  SharedDtor();
}

void GroupGroupmanagerCreateGameRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupGroupmanagerCreateGameRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupGroupmanagerCreateGameRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupGroupmanagerCreateGameRoomReq_descriptor_;
}

const GroupGroupmanagerCreateGameRoomReq& GroupGroupmanagerCreateGameRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupGroupmanagerCreateGameRoomReq* GroupGroupmanagerCreateGameRoomReq::default_instance_ = NULL;

GroupGroupmanagerCreateGameRoomReq* GroupGroupmanagerCreateGameRoomReq::New() const {
  return new GroupGroupmanagerCreateGameRoomReq;
}

void GroupGroupmanagerCreateGameRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupGroupmanagerCreateGameRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game;
        break;
      }

      // required int32 game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupGroupmanagerCreateGameRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required int32 game = 4;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupGroupmanagerCreateGameRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required int32 game = 4;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupGroupmanagerCreateGameRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 game = 4;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupGroupmanagerCreateGameRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupGroupmanagerCreateGameRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupGroupmanagerCreateGameRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupGroupmanagerCreateGameRoomReq::MergeFrom(const GroupGroupmanagerCreateGameRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupGroupmanagerCreateGameRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupGroupmanagerCreateGameRoomReq::CopyFrom(const GroupGroupmanagerCreateGameRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupGroupmanagerCreateGameRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GroupGroupmanagerCreateGameRoomReq::Swap(GroupGroupmanagerCreateGameRoomReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(game_, other->game_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupGroupmanagerCreateGameRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupGroupmanagerCreateGameRoomReq_descriptor_;
  metadata.reflection = GroupGroupmanagerCreateGameRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGroupCreateGameRoomRsp::kResultFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kGroupidFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kGateresidFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kClientidFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kGameFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kIpFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kPortFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kRoomidFieldNumber;
const int GroupmanagerGroupCreateGameRoomRsp::kPasswordFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGroupCreateGameRoomRsp::GroupmanagerGroupCreateGameRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGroupCreateGameRoomRsp::InitAsDefaultInstance() {
}

GroupmanagerGroupCreateGameRoomRsp::GroupmanagerGroupCreateGameRoomRsp(const GroupmanagerGroupCreateGameRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGroupCreateGameRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  roomid_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGroupCreateGameRoomRsp::~GroupmanagerGroupCreateGameRoomRsp() {
  SharedDtor();
}

void GroupmanagerGroupCreateGameRoomRsp::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GroupmanagerGroupCreateGameRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGroupCreateGameRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGroupCreateGameRoomRsp_descriptor_;
}

const GroupmanagerGroupCreateGameRoomRsp& GroupmanagerGroupCreateGameRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGroupCreateGameRoomRsp* GroupmanagerGroupCreateGameRoomRsp::default_instance_ = NULL;

GroupmanagerGroupCreateGameRoomRsp* GroupmanagerGroupCreateGameRoomRsp::New() const {
  return new GroupmanagerGroupCreateGameRoomRsp;
}

void GroupmanagerGroupCreateGameRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    roomid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGroupCreateGameRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game;
        break;
      }

      // required int32 game = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_ip;
        break;
      }

      // optional string ip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_port;
        break;
      }

      // optional int32 port = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_password;
        break;
      }

      // optional string password = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGroupCreateGameRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // required int32 gateresid = 3;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gateresid(), output);
  }

  // required uint64 clientid = 4;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->clientid(), output);
  }

  // required int32 game = 5;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->game(), output);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->ip(), output);
  }

  // optional int32 port = 7;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->port(), output);
  }

  // optional int32 roomid = 8;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->roomid(), output);
  }

  // optional string password = 9;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGroupCreateGameRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // required int32 gateresid = 3;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gateresid(), target);
  }

  // required uint64 clientid = 4;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->clientid(), target);
  }

  // required int32 game = 5;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->game(), target);
  }

  // optional string ip = 6;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->ip(), target);
  }

  // optional int32 port = 7;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->port(), target);
  }

  // optional int32 roomid = 8;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->roomid(), target);
  }

  // optional string password = 9;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGroupCreateGameRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 3;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 4;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 game = 5;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

    // optional string ip = 6;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 7;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 roomid = 8;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string password = 9;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGroupCreateGameRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGroupCreateGameRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGroupCreateGameRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGroupCreateGameRoomRsp::MergeFrom(const GroupmanagerGroupCreateGameRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGroupCreateGameRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGroupCreateGameRoomRsp::CopyFrom(const GroupmanagerGroupCreateGameRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGroupCreateGameRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GroupmanagerGroupCreateGameRoomRsp::Swap(GroupmanagerGroupCreateGameRoomRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(game_, other->game_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(roomid_, other->roomid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGroupCreateGameRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGroupCreateGameRoomRsp_descriptor_;
  metadata.reflection = GroupmanagerGroupCreateGameRoomRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupmanagerGamemanagerCreateGameRoomReq::kGroupidFieldNumber;
const int GroupmanagerGamemanagerCreateGameRoomReq::kGateresidFieldNumber;
const int GroupmanagerGamemanagerCreateGameRoomReq::kClientidFieldNumber;
const int GroupmanagerGamemanagerCreateGameRoomReq::kGameFieldNumber;
const int GroupmanagerGamemanagerCreateGameRoomReq::kGameidFieldNumber;
const int GroupmanagerGamemanagerCreateGameRoomReq::kServeridFieldNumber;
#endif  // !_MSC_VER

GroupmanagerGamemanagerCreateGameRoomReq::GroupmanagerGamemanagerCreateGameRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupmanagerGamemanagerCreateGameRoomReq::InitAsDefaultInstance() {
}

GroupmanagerGamemanagerCreateGameRoomReq::GroupmanagerGamemanagerCreateGameRoomReq(const GroupmanagerGamemanagerCreateGameRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupmanagerGamemanagerCreateGameRoomReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  gameid_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupmanagerGamemanagerCreateGameRoomReq::~GroupmanagerGamemanagerCreateGameRoomReq() {
  SharedDtor();
}

void GroupmanagerGamemanagerCreateGameRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupmanagerGamemanagerCreateGameRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupmanagerGamemanagerCreateGameRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupmanagerGamemanagerCreateGameRoomReq_descriptor_;
}

const GroupmanagerGamemanagerCreateGameRoomReq& GroupmanagerGamemanagerCreateGameRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GroupmanagerGamemanagerCreateGameRoomReq* GroupmanagerGamemanagerCreateGameRoomReq::default_instance_ = NULL;

GroupmanagerGamemanagerCreateGameRoomReq* GroupmanagerGamemanagerCreateGameRoomReq::New() const {
  return new GroupmanagerGamemanagerCreateGameRoomReq;
}

void GroupmanagerGamemanagerCreateGameRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
    gameid_ = 0;
    serverid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupmanagerGamemanagerCreateGameRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game;
        break;
      }

      // required int32 game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // required uint64 serverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupmanagerGamemanagerCreateGameRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required int32 game = 4;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game(), output);
  }

  // required int32 gameid = 5;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gameid(), output);
  }

  // required uint64 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupmanagerGamemanagerCreateGameRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required int32 game = 4;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game(), target);
  }

  // required int32 gameid = 5;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gameid(), target);
  }

  // required uint64 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupmanagerGamemanagerCreateGameRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 game = 4;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

    // required int32 gameid = 5;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required uint64 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupmanagerGamemanagerCreateGameRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupmanagerGamemanagerCreateGameRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupmanagerGamemanagerCreateGameRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupmanagerGamemanagerCreateGameRoomReq::MergeFrom(const GroupmanagerGamemanagerCreateGameRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupmanagerGamemanagerCreateGameRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupmanagerGamemanagerCreateGameRoomReq::CopyFrom(const GroupmanagerGamemanagerCreateGameRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupmanagerGamemanagerCreateGameRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GroupmanagerGamemanagerCreateGameRoomReq::Swap(GroupmanagerGamemanagerCreateGameRoomReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(game_, other->game_);
    std::swap(gameid_, other->gameid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupmanagerGamemanagerCreateGameRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupmanagerGamemanagerCreateGameRoomReq_descriptor_;
  metadata.reflection = GroupmanagerGamemanagerCreateGameRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamemanagerGroupmanagerCreateGameRoomRsp::kResultFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kGroupidFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kGateresidFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kClientidFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kGameFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kServeridFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kIpFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kPortFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kRoomidFieldNumber;
const int GamemanagerGroupmanagerCreateGameRoomRsp::kPasswordFieldNumber;
#endif  // !_MSC_VER

GamemanagerGroupmanagerCreateGameRoomRsp::GamemanagerGroupmanagerCreateGameRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerGroupmanagerCreateGameRoomRsp::InitAsDefaultInstance() {
}

GamemanagerGroupmanagerCreateGameRoomRsp::GamemanagerGroupmanagerCreateGameRoomRsp(const GamemanagerGroupmanagerCreateGameRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerGroupmanagerCreateGameRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  roomid_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerGroupmanagerCreateGameRoomRsp::~GamemanagerGroupmanagerCreateGameRoomRsp() {
  SharedDtor();
}

void GamemanagerGroupmanagerCreateGameRoomRsp::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void GamemanagerGroupmanagerCreateGameRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerGroupmanagerCreateGameRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerGroupmanagerCreateGameRoomRsp_descriptor_;
}

const GamemanagerGroupmanagerCreateGameRoomRsp& GamemanagerGroupmanagerCreateGameRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_group_2eproto();
  return *default_instance_;
}

GamemanagerGroupmanagerCreateGameRoomRsp* GamemanagerGroupmanagerCreateGameRoomRsp::default_instance_ = NULL;

GamemanagerGroupmanagerCreateGameRoomRsp* GamemanagerGroupmanagerCreateGameRoomRsp::New() const {
  return new GamemanagerGroupmanagerCreateGameRoomRsp;
}

void GamemanagerGroupmanagerCreateGameRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
    serverid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    roomid_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerGroupmanagerCreateGameRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game;
        break;
      }

      // required int32 game = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // required uint64 serverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_ip;
        break;
      }

      // optional string ip = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_port;
        break;
      }

      // optional int32 port = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_password;
        break;
      }

      // optional string password = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerGroupmanagerCreateGameRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // required int32 gateresid = 3;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gateresid(), output);
  }

  // required uint64 clientid = 4;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->clientid(), output);
  }

  // required int32 game = 5;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->game(), output);
  }

  // required uint64 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->serverid(), output);
  }

  // optional string ip = 7;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->ip(), output);
  }

  // optional int32 port = 8;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->port(), output);
  }

  // optional int32 roomid = 9;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->roomid(), output);
  }

  // optional string password = 10;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerGroupmanagerCreateGameRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // required int32 gateresid = 3;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gateresid(), target);
  }

  // required uint64 clientid = 4;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->clientid(), target);
  }

  // required int32 game = 5;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->game(), target);
  }

  // required uint64 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->serverid(), target);
  }

  // optional string ip = 7;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->ip(), target);
  }

  // optional int32 port = 8;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->port(), target);
  }

  // optional int32 roomid = 9;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->roomid(), target);
  }

  // optional string password = 10;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerGroupmanagerCreateGameRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 3;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 4;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 game = 5;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

    // required uint64 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional string ip = 7;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 8;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 roomid = 9;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string password = 10;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerGroupmanagerCreateGameRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerGroupmanagerCreateGameRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerGroupmanagerCreateGameRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerGroupmanagerCreateGameRoomRsp::MergeFrom(const GamemanagerGroupmanagerCreateGameRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerGroupmanagerCreateGameRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerGroupmanagerCreateGameRoomRsp::CopyFrom(const GamemanagerGroupmanagerCreateGameRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerGroupmanagerCreateGameRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GamemanagerGroupmanagerCreateGameRoomRsp::Swap(GamemanagerGroupmanagerCreateGameRoomRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(game_, other->game_);
    std::swap(serverid_, other->serverid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(roomid_, other->roomid_);
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerGroupmanagerCreateGameRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerGroupmanagerCreateGameRoomRsp_descriptor_;
  metadata.reflection = GamemanagerGroupmanagerCreateGameRoomRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace groupproto
}  // namespace sglib

// @@protoc_insertion_point(global_scope)
