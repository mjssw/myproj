// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tetris.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tetris.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sglib {
namespace tetrisproto {

namespace {

const ::google::protobuf::Descriptor* CSMsgReadyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgReadyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCMsgReadyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMsgReadyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCMsgReadyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMsgReadyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgGameLostReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgGameLostReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCMsgGameStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMsgGameStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCMsgGameEndNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMsgGameEndNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgPutBlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgPutBlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* CSMsgClearBlockReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CSMsgClearBlockReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCMsgPutBlockNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMsgPutBlockNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCMsgClearBlockNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMsgClearBlockNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* SCMsgRoomInfoNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SCMsgRoomInfoNtf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tetris_2eproto() {
  protobuf_AddDesc_tetris_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tetris.proto");
  GOOGLE_CHECK(file != NULL);
  CSMsgReadyReq_descriptor_ = file->message_type(0);
  static const int CSMsgReadyReq_offsets_[1] = {
  };
  CSMsgReadyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgReadyReq_descriptor_,
      CSMsgReadyReq::default_instance_,
      CSMsgReadyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgReadyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgReadyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgReadyReq));
  SCMsgReadyRsp_descriptor_ = file->message_type(1);
  static const int SCMsgReadyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgReadyRsp, result_),
  };
  SCMsgReadyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMsgReadyRsp_descriptor_,
      SCMsgReadyRsp::default_instance_,
      SCMsgReadyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgReadyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgReadyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMsgReadyRsp));
  SCMsgReadyNtf_descriptor_ = file->message_type(2);
  static const int SCMsgReadyNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgReadyNtf, player_),
  };
  SCMsgReadyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMsgReadyNtf_descriptor_,
      SCMsgReadyNtf::default_instance_,
      SCMsgReadyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgReadyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgReadyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMsgReadyNtf));
  CSMsgGameLostReq_descriptor_ = file->message_type(3);
  static const int CSMsgGameLostReq_offsets_[1] = {
  };
  CSMsgGameLostReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgGameLostReq_descriptor_,
      CSMsgGameLostReq::default_instance_,
      CSMsgGameLostReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgGameLostReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgGameLostReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgGameLostReq));
  SCMsgGameStartNtf_descriptor_ = file->message_type(4);
  static const int SCMsgGameStartNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgGameStartNtf, blockseed_),
  };
  SCMsgGameStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMsgGameStartNtf_descriptor_,
      SCMsgGameStartNtf::default_instance_,
      SCMsgGameStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgGameStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgGameStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMsgGameStartNtf));
  SCMsgGameEndNtf_descriptor_ = file->message_type(5);
  static const int SCMsgGameEndNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgGameEndNtf, loser_),
  };
  SCMsgGameEndNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMsgGameEndNtf_descriptor_,
      SCMsgGameEndNtf::default_instance_,
      SCMsgGameEndNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgGameEndNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgGameEndNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMsgGameEndNtf));
  CSMsgPutBlockReq_descriptor_ = file->message_type(6);
  static const int CSMsgPutBlockReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPutBlockReq, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPutBlockReq, column_),
  };
  CSMsgPutBlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgPutBlockReq_descriptor_,
      CSMsgPutBlockReq::default_instance_,
      CSMsgPutBlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPutBlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgPutBlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgPutBlockReq));
  CSMsgClearBlockReq_descriptor_ = file->message_type(7);
  static const int CSMsgClearBlockReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgClearBlockReq, rows_),
  };
  CSMsgClearBlockReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CSMsgClearBlockReq_descriptor_,
      CSMsgClearBlockReq::default_instance_,
      CSMsgClearBlockReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgClearBlockReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSMsgClearBlockReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CSMsgClearBlockReq));
  SCMsgPutBlockNtf_descriptor_ = file->message_type(8);
  static const int SCMsgPutBlockNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgPutBlockNtf, blockid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgPutBlockNtf, column_),
  };
  SCMsgPutBlockNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMsgPutBlockNtf_descriptor_,
      SCMsgPutBlockNtf::default_instance_,
      SCMsgPutBlockNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgPutBlockNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgPutBlockNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMsgPutBlockNtf));
  SCMsgClearBlockNtf_descriptor_ = file->message_type(9);
  static const int SCMsgClearBlockNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgClearBlockNtf, rows_),
  };
  SCMsgClearBlockNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMsgClearBlockNtf_descriptor_,
      SCMsgClearBlockNtf::default_instance_,
      SCMsgClearBlockNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgClearBlockNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgClearBlockNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMsgClearBlockNtf));
  SCMsgRoomInfoNtf_descriptor_ = file->message_type(10);
  static const int SCMsgRoomInfoNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgRoomInfoNtf, players_),
  };
  SCMsgRoomInfoNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SCMsgRoomInfoNtf_descriptor_,
      SCMsgRoomInfoNtf::default_instance_,
      SCMsgRoomInfoNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgRoomInfoNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SCMsgRoomInfoNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SCMsgRoomInfoNtf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tetris_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgReadyReq_descriptor_, &CSMsgReadyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMsgReadyRsp_descriptor_, &SCMsgReadyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMsgReadyNtf_descriptor_, &SCMsgReadyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgGameLostReq_descriptor_, &CSMsgGameLostReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMsgGameStartNtf_descriptor_, &SCMsgGameStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMsgGameEndNtf_descriptor_, &SCMsgGameEndNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgPutBlockReq_descriptor_, &CSMsgPutBlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CSMsgClearBlockReq_descriptor_, &CSMsgClearBlockReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMsgPutBlockNtf_descriptor_, &SCMsgPutBlockNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMsgClearBlockNtf_descriptor_, &SCMsgClearBlockNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SCMsgRoomInfoNtf_descriptor_, &SCMsgRoomInfoNtf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tetris_2eproto() {
  delete CSMsgReadyReq::default_instance_;
  delete CSMsgReadyReq_reflection_;
  delete SCMsgReadyRsp::default_instance_;
  delete SCMsgReadyRsp_reflection_;
  delete SCMsgReadyNtf::default_instance_;
  delete SCMsgReadyNtf_reflection_;
  delete CSMsgGameLostReq::default_instance_;
  delete CSMsgGameLostReq_reflection_;
  delete SCMsgGameStartNtf::default_instance_;
  delete SCMsgGameStartNtf_reflection_;
  delete SCMsgGameEndNtf::default_instance_;
  delete SCMsgGameEndNtf_reflection_;
  delete CSMsgPutBlockReq::default_instance_;
  delete CSMsgPutBlockReq_reflection_;
  delete CSMsgClearBlockReq::default_instance_;
  delete CSMsgClearBlockReq_reflection_;
  delete SCMsgPutBlockNtf::default_instance_;
  delete SCMsgPutBlockNtf_reflection_;
  delete SCMsgClearBlockNtf::default_instance_;
  delete SCMsgClearBlockNtf_reflection_;
  delete SCMsgRoomInfoNtf::default_instance_;
  delete SCMsgRoomInfoNtf_reflection_;
}

void protobuf_AddDesc_tetris_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::sglib::publicproto::protobuf_AddDesc_public_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014tetris.proto\022\021sglib.tetrisproto\032\014publi"
    "c.proto\"\017\n\rCSMsgReadyReq\"\037\n\rSCMsgReadyRs"
    "p\022\016\n\006result\030\001 \002(\005\"\037\n\rSCMsgReadyNtf\022\016\n\006pl"
    "ayer\030\001 \002(\t\"\022\n\020CSMsgGameLostReq\"&\n\021SCMsgG"
    "ameStartNtf\022\021\n\tblockseed\030\001 \002(\005\" \n\017SCMsgG"
    "ameEndNtf\022\r\n\005loser\030\001 \002(\t\"3\n\020CSMsgPutBloc"
    "kReq\022\017\n\007blockid\030\001 \002(\005\022\016\n\006column\030\002 \002(\005\"\"\n"
    "\022CSMsgClearBlockReq\022\014\n\004rows\030\001 \003(\005\"3\n\020SCM"
    "sgPutBlockNtf\022\017\n\007blockid\030\001 \002(\005\022\016\n\006column"
    "\030\002 \002(\005\"\"\n\022SCMsgClearBlockNtf\022\014\n\004rows\030\001 \003"
    "(\005\"F\n\020SCMsgRoomInfoNtf\0222\n\007players\030\001 \003(\0132"
    "!.sglib.publicproto.RoomPlayerInfo", 474);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tetris.proto", &protobuf_RegisterTypes);
  CSMsgReadyReq::default_instance_ = new CSMsgReadyReq();
  SCMsgReadyRsp::default_instance_ = new SCMsgReadyRsp();
  SCMsgReadyNtf::default_instance_ = new SCMsgReadyNtf();
  CSMsgGameLostReq::default_instance_ = new CSMsgGameLostReq();
  SCMsgGameStartNtf::default_instance_ = new SCMsgGameStartNtf();
  SCMsgGameEndNtf::default_instance_ = new SCMsgGameEndNtf();
  CSMsgPutBlockReq::default_instance_ = new CSMsgPutBlockReq();
  CSMsgClearBlockReq::default_instance_ = new CSMsgClearBlockReq();
  SCMsgPutBlockNtf::default_instance_ = new SCMsgPutBlockNtf();
  SCMsgClearBlockNtf::default_instance_ = new SCMsgClearBlockNtf();
  SCMsgRoomInfoNtf::default_instance_ = new SCMsgRoomInfoNtf();
  CSMsgReadyReq::default_instance_->InitAsDefaultInstance();
  SCMsgReadyRsp::default_instance_->InitAsDefaultInstance();
  SCMsgReadyNtf::default_instance_->InitAsDefaultInstance();
  CSMsgGameLostReq::default_instance_->InitAsDefaultInstance();
  SCMsgGameStartNtf::default_instance_->InitAsDefaultInstance();
  SCMsgGameEndNtf::default_instance_->InitAsDefaultInstance();
  CSMsgPutBlockReq::default_instance_->InitAsDefaultInstance();
  CSMsgClearBlockReq::default_instance_->InitAsDefaultInstance();
  SCMsgPutBlockNtf::default_instance_->InitAsDefaultInstance();
  SCMsgClearBlockNtf::default_instance_->InitAsDefaultInstance();
  SCMsgRoomInfoNtf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tetris_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tetris_2eproto {
  StaticDescriptorInitializer_tetris_2eproto() {
    protobuf_AddDesc_tetris_2eproto();
  }
} static_descriptor_initializer_tetris_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSMsgReadyReq::CSMsgReadyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgReadyReq::InitAsDefaultInstance() {
}

CSMsgReadyReq::CSMsgReadyReq(const CSMsgReadyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgReadyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgReadyReq::~CSMsgReadyReq() {
  SharedDtor();
}

void CSMsgReadyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgReadyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgReadyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgReadyReq_descriptor_;
}

const CSMsgReadyReq& CSMsgReadyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

CSMsgReadyReq* CSMsgReadyReq::default_instance_ = NULL;

CSMsgReadyReq* CSMsgReadyReq::New() const {
  return new CSMsgReadyReq;
}

void CSMsgReadyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgReadyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSMsgReadyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgReadyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgReadyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgReadyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgReadyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgReadyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgReadyReq::MergeFrom(const CSMsgReadyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgReadyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgReadyReq::CopyFrom(const CSMsgReadyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgReadyReq::IsInitialized() const {

  return true;
}

void CSMsgReadyReq::Swap(CSMsgReadyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgReadyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgReadyReq_descriptor_;
  metadata.reflection = CSMsgReadyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCMsgReadyRsp::kResultFieldNumber;
#endif  // !_MSC_VER

SCMsgReadyRsp::SCMsgReadyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMsgReadyRsp::InitAsDefaultInstance() {
}

SCMsgReadyRsp::SCMsgReadyRsp(const SCMsgReadyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMsgReadyRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMsgReadyRsp::~SCMsgReadyRsp() {
  SharedDtor();
}

void SCMsgReadyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCMsgReadyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMsgReadyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMsgReadyRsp_descriptor_;
}

const SCMsgReadyRsp& SCMsgReadyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

SCMsgReadyRsp* SCMsgReadyRsp::default_instance_ = NULL;

SCMsgReadyRsp* SCMsgReadyRsp::New() const {
  return new SCMsgReadyRsp;
}

void SCMsgReadyRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMsgReadyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMsgReadyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMsgReadyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMsgReadyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMsgReadyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMsgReadyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMsgReadyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMsgReadyRsp::MergeFrom(const SCMsgReadyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMsgReadyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMsgReadyRsp::CopyFrom(const SCMsgReadyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMsgReadyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMsgReadyRsp::Swap(SCMsgReadyRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMsgReadyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMsgReadyRsp_descriptor_;
  metadata.reflection = SCMsgReadyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCMsgReadyNtf::kPlayerFieldNumber;
#endif  // !_MSC_VER

SCMsgReadyNtf::SCMsgReadyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMsgReadyNtf::InitAsDefaultInstance() {
}

SCMsgReadyNtf::SCMsgReadyNtf(const SCMsgReadyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMsgReadyNtf::SharedCtor() {
  _cached_size_ = 0;
  player_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMsgReadyNtf::~SCMsgReadyNtf() {
  SharedDtor();
}

void SCMsgReadyNtf::SharedDtor() {
  if (player_ != &::google::protobuf::internal::kEmptyString) {
    delete player_;
  }
  if (this != default_instance_) {
  }
}

void SCMsgReadyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMsgReadyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMsgReadyNtf_descriptor_;
}

const SCMsgReadyNtf& SCMsgReadyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

SCMsgReadyNtf* SCMsgReadyNtf::default_instance_ = NULL;

SCMsgReadyNtf* SCMsgReadyNtf::New() const {
  return new SCMsgReadyNtf;
}

void SCMsgReadyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player()) {
      if (player_ != &::google::protobuf::internal::kEmptyString) {
        player_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMsgReadyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player().data(), this->player().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMsgReadyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player().data(), this->player().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->player(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMsgReadyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player().data(), this->player().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->player(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMsgReadyNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMsgReadyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMsgReadyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMsgReadyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMsgReadyNtf::MergeFrom(const SCMsgReadyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMsgReadyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMsgReadyNtf::CopyFrom(const SCMsgReadyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMsgReadyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMsgReadyNtf::Swap(SCMsgReadyNtf* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMsgReadyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMsgReadyNtf_descriptor_;
  metadata.reflection = SCMsgReadyNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CSMsgGameLostReq::CSMsgGameLostReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgGameLostReq::InitAsDefaultInstance() {
}

CSMsgGameLostReq::CSMsgGameLostReq(const CSMsgGameLostReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgGameLostReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgGameLostReq::~CSMsgGameLostReq() {
  SharedDtor();
}

void CSMsgGameLostReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgGameLostReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgGameLostReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgGameLostReq_descriptor_;
}

const CSMsgGameLostReq& CSMsgGameLostReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

CSMsgGameLostReq* CSMsgGameLostReq::default_instance_ = NULL;

CSMsgGameLostReq* CSMsgGameLostReq::New() const {
  return new CSMsgGameLostReq;
}

void CSMsgGameLostReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgGameLostReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CSMsgGameLostReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgGameLostReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgGameLostReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgGameLostReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgGameLostReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgGameLostReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgGameLostReq::MergeFrom(const CSMsgGameLostReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgGameLostReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgGameLostReq::CopyFrom(const CSMsgGameLostReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgGameLostReq::IsInitialized() const {

  return true;
}

void CSMsgGameLostReq::Swap(CSMsgGameLostReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgGameLostReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgGameLostReq_descriptor_;
  metadata.reflection = CSMsgGameLostReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCMsgGameStartNtf::kBlockseedFieldNumber;
#endif  // !_MSC_VER

SCMsgGameStartNtf::SCMsgGameStartNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMsgGameStartNtf::InitAsDefaultInstance() {
}

SCMsgGameStartNtf::SCMsgGameStartNtf(const SCMsgGameStartNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMsgGameStartNtf::SharedCtor() {
  _cached_size_ = 0;
  blockseed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMsgGameStartNtf::~SCMsgGameStartNtf() {
  SharedDtor();
}

void SCMsgGameStartNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCMsgGameStartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMsgGameStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMsgGameStartNtf_descriptor_;
}

const SCMsgGameStartNtf& SCMsgGameStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

SCMsgGameStartNtf* SCMsgGameStartNtf::default_instance_ = NULL;

SCMsgGameStartNtf* SCMsgGameStartNtf::New() const {
  return new SCMsgGameStartNtf;
}

void SCMsgGameStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blockseed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMsgGameStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blockseed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockseed_)));
          set_has_blockseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMsgGameStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blockseed = 1;
  if (has_blockseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blockseed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMsgGameStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 blockseed = 1;
  if (has_blockseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blockseed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMsgGameStartNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blockseed = 1;
    if (has_blockseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockseed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMsgGameStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMsgGameStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMsgGameStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMsgGameStartNtf::MergeFrom(const SCMsgGameStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blockseed()) {
      set_blockseed(from.blockseed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMsgGameStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMsgGameStartNtf::CopyFrom(const SCMsgGameStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMsgGameStartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMsgGameStartNtf::Swap(SCMsgGameStartNtf* other) {
  if (other != this) {
    std::swap(blockseed_, other->blockseed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMsgGameStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMsgGameStartNtf_descriptor_;
  metadata.reflection = SCMsgGameStartNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCMsgGameEndNtf::kLoserFieldNumber;
#endif  // !_MSC_VER

SCMsgGameEndNtf::SCMsgGameEndNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMsgGameEndNtf::InitAsDefaultInstance() {
}

SCMsgGameEndNtf::SCMsgGameEndNtf(const SCMsgGameEndNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMsgGameEndNtf::SharedCtor() {
  _cached_size_ = 0;
  loser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMsgGameEndNtf::~SCMsgGameEndNtf() {
  SharedDtor();
}

void SCMsgGameEndNtf::SharedDtor() {
  if (loser_ != &::google::protobuf::internal::kEmptyString) {
    delete loser_;
  }
  if (this != default_instance_) {
  }
}

void SCMsgGameEndNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMsgGameEndNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMsgGameEndNtf_descriptor_;
}

const SCMsgGameEndNtf& SCMsgGameEndNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

SCMsgGameEndNtf* SCMsgGameEndNtf::default_instance_ = NULL;

SCMsgGameEndNtf* SCMsgGameEndNtf::New() const {
  return new SCMsgGameEndNtf;
}

void SCMsgGameEndNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_loser()) {
      if (loser_ != &::google::protobuf::internal::kEmptyString) {
        loser_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMsgGameEndNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string loser = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loser().data(), this->loser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMsgGameEndNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string loser = 1;
  if (has_loser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loser().data(), this->loser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->loser(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMsgGameEndNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string loser = 1;
  if (has_loser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loser().data(), this->loser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->loser(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMsgGameEndNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string loser = 1;
    if (has_loser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loser());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMsgGameEndNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMsgGameEndNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMsgGameEndNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMsgGameEndNtf::MergeFrom(const SCMsgGameEndNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loser()) {
      set_loser(from.loser());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMsgGameEndNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMsgGameEndNtf::CopyFrom(const SCMsgGameEndNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMsgGameEndNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SCMsgGameEndNtf::Swap(SCMsgGameEndNtf* other) {
  if (other != this) {
    std::swap(loser_, other->loser_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMsgGameEndNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMsgGameEndNtf_descriptor_;
  metadata.reflection = SCMsgGameEndNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgPutBlockReq::kBlockidFieldNumber;
const int CSMsgPutBlockReq::kColumnFieldNumber;
#endif  // !_MSC_VER

CSMsgPutBlockReq::CSMsgPutBlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgPutBlockReq::InitAsDefaultInstance() {
}

CSMsgPutBlockReq::CSMsgPutBlockReq(const CSMsgPutBlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgPutBlockReq::SharedCtor() {
  _cached_size_ = 0;
  blockid_ = 0;
  column_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgPutBlockReq::~CSMsgPutBlockReq() {
  SharedDtor();
}

void CSMsgPutBlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgPutBlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgPutBlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgPutBlockReq_descriptor_;
}

const CSMsgPutBlockReq& CSMsgPutBlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

CSMsgPutBlockReq* CSMsgPutBlockReq::default_instance_ = NULL;

CSMsgPutBlockReq* CSMsgPutBlockReq::New() const {
  return new CSMsgPutBlockReq;
}

void CSMsgPutBlockReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blockid_ = 0;
    column_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgPutBlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blockid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_column;
        break;
      }

      // required int32 column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgPutBlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blockid = 1;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blockid(), output);
  }

  // required int32 column = 2;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->column(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgPutBlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 blockid = 1;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blockid(), target);
  }

  // required int32 column = 2;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->column(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgPutBlockReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blockid = 1;
    if (has_blockid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockid());
    }

    // required int32 column = 2;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgPutBlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgPutBlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgPutBlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgPutBlockReq::MergeFrom(const CSMsgPutBlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgPutBlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgPutBlockReq::CopyFrom(const CSMsgPutBlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgPutBlockReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CSMsgPutBlockReq::Swap(CSMsgPutBlockReq* other) {
  if (other != this) {
    std::swap(blockid_, other->blockid_);
    std::swap(column_, other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgPutBlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgPutBlockReq_descriptor_;
  metadata.reflection = CSMsgPutBlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CSMsgClearBlockReq::kRowsFieldNumber;
#endif  // !_MSC_VER

CSMsgClearBlockReq::CSMsgClearBlockReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CSMsgClearBlockReq::InitAsDefaultInstance() {
}

CSMsgClearBlockReq::CSMsgClearBlockReq(const CSMsgClearBlockReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CSMsgClearBlockReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CSMsgClearBlockReq::~CSMsgClearBlockReq() {
  SharedDtor();
}

void CSMsgClearBlockReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CSMsgClearBlockReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSMsgClearBlockReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CSMsgClearBlockReq_descriptor_;
}

const CSMsgClearBlockReq& CSMsgClearBlockReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

CSMsgClearBlockReq* CSMsgClearBlockReq::default_instance_ = NULL;

CSMsgClearBlockReq* CSMsgClearBlockReq::New() const {
  return new CSMsgClearBlockReq;
}

void CSMsgClearBlockReq::Clear() {
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CSMsgClearBlockReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rows())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rows())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rows;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CSMsgClearBlockReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CSMsgClearBlockReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CSMsgClearBlockReq::ByteSize() const {
  int total_size = 0;

  // repeated int32 rows = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rows_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rows(i));
    }
    total_size += 1 * this->rows_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSMsgClearBlockReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CSMsgClearBlockReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CSMsgClearBlockReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CSMsgClearBlockReq::MergeFrom(const CSMsgClearBlockReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CSMsgClearBlockReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSMsgClearBlockReq::CopyFrom(const CSMsgClearBlockReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSMsgClearBlockReq::IsInitialized() const {

  return true;
}

void CSMsgClearBlockReq::Swap(CSMsgClearBlockReq* other) {
  if (other != this) {
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CSMsgClearBlockReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CSMsgClearBlockReq_descriptor_;
  metadata.reflection = CSMsgClearBlockReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCMsgPutBlockNtf::kBlockidFieldNumber;
const int SCMsgPutBlockNtf::kColumnFieldNumber;
#endif  // !_MSC_VER

SCMsgPutBlockNtf::SCMsgPutBlockNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMsgPutBlockNtf::InitAsDefaultInstance() {
}

SCMsgPutBlockNtf::SCMsgPutBlockNtf(const SCMsgPutBlockNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMsgPutBlockNtf::SharedCtor() {
  _cached_size_ = 0;
  blockid_ = 0;
  column_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMsgPutBlockNtf::~SCMsgPutBlockNtf() {
  SharedDtor();
}

void SCMsgPutBlockNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCMsgPutBlockNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMsgPutBlockNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMsgPutBlockNtf_descriptor_;
}

const SCMsgPutBlockNtf& SCMsgPutBlockNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

SCMsgPutBlockNtf* SCMsgPutBlockNtf::default_instance_ = NULL;

SCMsgPutBlockNtf* SCMsgPutBlockNtf::New() const {
  return new SCMsgPutBlockNtf;
}

void SCMsgPutBlockNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    blockid_ = 0;
    column_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMsgPutBlockNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 blockid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blockid_)));
          set_has_blockid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_column;
        break;
      }

      // required int32 column = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_column:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &column_)));
          set_has_column();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMsgPutBlockNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 blockid = 1;
  if (has_blockid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->blockid(), output);
  }

  // required int32 column = 2;
  if (has_column()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->column(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMsgPutBlockNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 blockid = 1;
  if (has_blockid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->blockid(), target);
  }

  // required int32 column = 2;
  if (has_column()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->column(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMsgPutBlockNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 blockid = 1;
    if (has_blockid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blockid());
    }

    // required int32 column = 2;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->column());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMsgPutBlockNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMsgPutBlockNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMsgPutBlockNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMsgPutBlockNtf::MergeFrom(const SCMsgPutBlockNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_blockid()) {
      set_blockid(from.blockid());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMsgPutBlockNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMsgPutBlockNtf::CopyFrom(const SCMsgPutBlockNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMsgPutBlockNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SCMsgPutBlockNtf::Swap(SCMsgPutBlockNtf* other) {
  if (other != this) {
    std::swap(blockid_, other->blockid_);
    std::swap(column_, other->column_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMsgPutBlockNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMsgPutBlockNtf_descriptor_;
  metadata.reflection = SCMsgPutBlockNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCMsgClearBlockNtf::kRowsFieldNumber;
#endif  // !_MSC_VER

SCMsgClearBlockNtf::SCMsgClearBlockNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMsgClearBlockNtf::InitAsDefaultInstance() {
}

SCMsgClearBlockNtf::SCMsgClearBlockNtf(const SCMsgClearBlockNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMsgClearBlockNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMsgClearBlockNtf::~SCMsgClearBlockNtf() {
  SharedDtor();
}

void SCMsgClearBlockNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCMsgClearBlockNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMsgClearBlockNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMsgClearBlockNtf_descriptor_;
}

const SCMsgClearBlockNtf& SCMsgClearBlockNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

SCMsgClearBlockNtf* SCMsgClearBlockNtf::default_instance_ = NULL;

SCMsgClearBlockNtf* SCMsgClearBlockNtf::New() const {
  return new SCMsgClearBlockNtf;
}

void SCMsgClearBlockNtf::Clear() {
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMsgClearBlockNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rows())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rows())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rows;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMsgClearBlockNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rows(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMsgClearBlockNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 rows = 1;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rows(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMsgClearBlockNtf::ByteSize() const {
  int total_size = 0;

  // repeated int32 rows = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rows_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rows(i));
    }
    total_size += 1 * this->rows_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMsgClearBlockNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMsgClearBlockNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMsgClearBlockNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMsgClearBlockNtf::MergeFrom(const SCMsgClearBlockNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMsgClearBlockNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMsgClearBlockNtf::CopyFrom(const SCMsgClearBlockNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMsgClearBlockNtf::IsInitialized() const {

  return true;
}

void SCMsgClearBlockNtf::Swap(SCMsgClearBlockNtf* other) {
  if (other != this) {
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMsgClearBlockNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMsgClearBlockNtf_descriptor_;
  metadata.reflection = SCMsgClearBlockNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SCMsgRoomInfoNtf::kPlayersFieldNumber;
#endif  // !_MSC_VER

SCMsgRoomInfoNtf::SCMsgRoomInfoNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SCMsgRoomInfoNtf::InitAsDefaultInstance() {
}

SCMsgRoomInfoNtf::SCMsgRoomInfoNtf(const SCMsgRoomInfoNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SCMsgRoomInfoNtf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SCMsgRoomInfoNtf::~SCMsgRoomInfoNtf() {
  SharedDtor();
}

void SCMsgRoomInfoNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SCMsgRoomInfoNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SCMsgRoomInfoNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SCMsgRoomInfoNtf_descriptor_;
}

const SCMsgRoomInfoNtf& SCMsgRoomInfoNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tetris_2eproto();
  return *default_instance_;
}

SCMsgRoomInfoNtf* SCMsgRoomInfoNtf::default_instance_ = NULL;

SCMsgRoomInfoNtf* SCMsgRoomInfoNtf::New() const {
  return new SCMsgRoomInfoNtf;
}

void SCMsgRoomInfoNtf::Clear() {
  players_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SCMsgRoomInfoNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sglib.publicproto.RoomPlayerInfo players = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_players:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_players()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_players;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SCMsgRoomInfoNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .sglib.publicproto.RoomPlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->players(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SCMsgRoomInfoNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .sglib.publicproto.RoomPlayerInfo players = 1;
  for (int i = 0; i < this->players_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->players(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SCMsgRoomInfoNtf::ByteSize() const {
  int total_size = 0;

  // repeated .sglib.publicproto.RoomPlayerInfo players = 1;
  total_size += 1 * this->players_size();
  for (int i = 0; i < this->players_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->players(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SCMsgRoomInfoNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SCMsgRoomInfoNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SCMsgRoomInfoNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SCMsgRoomInfoNtf::MergeFrom(const SCMsgRoomInfoNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  players_.MergeFrom(from.players_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SCMsgRoomInfoNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SCMsgRoomInfoNtf::CopyFrom(const SCMsgRoomInfoNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCMsgRoomInfoNtf::IsInitialized() const {

  for (int i = 0; i < players_size(); i++) {
    if (!this->players(i).IsInitialized()) return false;
  }
  return true;
}

void SCMsgRoomInfoNtf::Swap(SCMsgRoomInfoNtf* other) {
  if (other != this) {
    players_.Swap(&other->players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SCMsgRoomInfoNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SCMsgRoomInfoNtf_descriptor_;
  metadata.reflection = SCMsgRoomInfoNtf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tetrisproto
}  // namespace sglib

// @@protoc_insertion_point(global_scope)
