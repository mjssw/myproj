// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: login.proto

#ifndef PROTOBUF_login_2eproto__INCLUDED
#define PROTOBUF_login_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "public.pb.h"
// @@protoc_insertion_point(includes)

namespace sglib {
namespace loginproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_login_2eproto();
void protobuf_AssignDesc_login_2eproto();
void protobuf_ShutdownFile_login_2eproto();

class CSUserLoginReq;
class SCUserLoginRsp;
class CSUserRegisterReq;
class SCUserRegisterRsp;
class SCGameInfoNotify;
class SCGroupGateNotify;
class LoginCenterUserLoginReq;

// ===================================================================

class CSUserLoginReq : public ::google::protobuf::Message {
 public:
  CSUserLoginReq();
  virtual ~CSUserLoginReq();

  CSUserLoginReq(const CSUserLoginReq& from);

  inline CSUserLoginReq& operator=(const CSUserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSUserLoginReq& default_instance();

  void Swap(CSUserLoginReq* other);

  // implements Message ----------------------------------------------

  CSUserLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSUserLoginReq& from);
  void MergeFrom(const CSUserLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  inline void set_allocated_flag(::std::string* flag);

  // @@protoc_insertion_point(class_scope:sglib.loginproto.CSUserLoginReq)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* password_;
  ::std::string* flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static CSUserLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class SCUserLoginRsp : public ::google::protobuf::Message {
 public:
  SCUserLoginRsp();
  virtual ~SCUserLoginRsp();

  SCUserLoginRsp(const SCUserLoginRsp& from);

  inline SCUserLoginRsp& operator=(const SCUserLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCUserLoginRsp& default_instance();

  void Swap(SCUserLoginRsp* other);

  // implements Message ----------------------------------------------

  SCUserLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCUserLoginRsp& from);
  void MergeFrom(const SCUserLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:sglib.loginproto.SCUserLoginRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* token_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static SCUserLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSUserRegisterReq : public ::google::protobuf::Message {
 public:
  CSUserRegisterReq();
  virtual ~CSUserRegisterReq();

  CSUserRegisterReq(const CSUserRegisterReq& from);

  inline CSUserRegisterReq& operator=(const CSUserRegisterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSUserRegisterReq& default_instance();

  void Swap(CSUserRegisterReq* other);

  // implements Message ----------------------------------------------

  CSUserRegisterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSUserRegisterReq& from);
  void MergeFrom(const CSUserRegisterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:sglib.loginproto.CSUserRegisterReq)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static CSUserRegisterReq* default_instance_;
};
// -------------------------------------------------------------------

class SCUserRegisterRsp : public ::google::protobuf::Message {
 public:
  SCUserRegisterRsp();
  virtual ~SCUserRegisterRsp();

  SCUserRegisterRsp(const SCUserRegisterRsp& from);

  inline SCUserRegisterRsp& operator=(const SCUserRegisterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCUserRegisterRsp& default_instance();

  void Swap(SCUserRegisterRsp* other);

  // implements Message ----------------------------------------------

  SCUserRegisterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCUserRegisterRsp& from);
  void MergeFrom(const SCUserRegisterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.loginproto.SCUserRegisterRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static SCUserRegisterRsp* default_instance_;
};
// -------------------------------------------------------------------

class SCGameInfoNotify : public ::google::protobuf::Message {
 public:
  SCGameInfoNotify();
  virtual ~SCGameInfoNotify();

  SCGameInfoNotify(const SCGameInfoNotify& from);

  inline SCGameInfoNotify& operator=(const SCGameInfoNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGameInfoNotify& default_instance();

  void Swap(SCGameInfoNotify* other);

  // implements Message ----------------------------------------------

  SCGameInfoNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGameInfoNotify& from);
  void MergeFrom(const SCGameInfoNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sglib.publicproto.GameInfo games = 1;
  inline int games_size() const;
  inline void clear_games();
  static const int kGamesFieldNumber = 1;
  inline const ::sglib::publicproto::GameInfo& games(int index) const;
  inline ::sglib::publicproto::GameInfo* mutable_games(int index);
  inline ::sglib::publicproto::GameInfo* add_games();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >&
      games() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >*
      mutable_games();

  // @@protoc_insertion_point(class_scope:sglib.loginproto.SCGameInfoNotify)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo > games_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static SCGameInfoNotify* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupGateNotify : public ::google::protobuf::Message {
 public:
  SCGroupGateNotify();
  virtual ~SCGroupGateNotify();

  SCGroupGateNotify(const SCGroupGateNotify& from);

  inline SCGroupGateNotify& operator=(const SCGroupGateNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupGateNotify& default_instance();

  void Swap(SCGroupGateNotify* other);

  // implements Message ----------------------------------------------

  SCGroupGateNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupGateNotify& from);
  void MergeFrom(const SCGroupGateNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.loginproto.SCGroupGateNotify)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static SCGroupGateNotify* default_instance_;
};
// -------------------------------------------------------------------

class LoginCenterUserLoginReq : public ::google::protobuf::Message {
 public:
  LoginCenterUserLoginReq();
  virtual ~LoginCenterUserLoginReq();

  LoginCenterUserLoginReq(const LoginCenterUserLoginReq& from);

  inline LoginCenterUserLoginReq& operator=(const LoginCenterUserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginCenterUserLoginReq& default_instance();

  void Swap(LoginCenterUserLoginReq* other);

  // implements Message ----------------------------------------------

  LoginCenterUserLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginCenterUserLoginReq& from);
  void MergeFrom(const LoginCenterUserLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 2;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string flag = 4;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 4;
  inline const ::std::string& flag() const;
  inline void set_flag(const ::std::string& value);
  inline void set_flag(const char* value);
  inline void set_flag(const char* value, size_t size);
  inline ::std::string* mutable_flag();
  inline ::std::string* release_flag();
  inline void set_allocated_flag(::std::string* flag);

  // @@protoc_insertion_point(class_scope:sglib.loginproto.LoginCenterUserLoginReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::std::string* flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_login_2eproto();
  friend void protobuf_AssignDesc_login_2eproto();
  friend void protobuf_ShutdownFile_login_2eproto();

  void InitAsDefaultInstance();
  static LoginCenterUserLoginReq* default_instance_;
};
// ===================================================================


// ===================================================================

// CSUserLoginReq

// required string user = 1;
inline bool CSUserLoginReq::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSUserLoginReq::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSUserLoginReq::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSUserLoginReq::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& CSUserLoginReq::user() const {
  return *user_;
}
inline void CSUserLoginReq::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CSUserLoginReq::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CSUserLoginReq::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSUserLoginReq::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* CSUserLoginReq::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSUserLoginReq::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool CSUserLoginReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSUserLoginReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSUserLoginReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSUserLoginReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& CSUserLoginReq::password() const {
  return *password_;
}
inline void CSUserLoginReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CSUserLoginReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CSUserLoginReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSUserLoginReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* CSUserLoginReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSUserLoginReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string flag = 3;
inline bool CSUserLoginReq::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSUserLoginReq::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSUserLoginReq::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSUserLoginReq::clear_flag() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& CSUserLoginReq::flag() const {
  return *flag_;
}
inline void CSUserLoginReq::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CSUserLoginReq::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void CSUserLoginReq::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSUserLoginReq::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  return flag_;
}
inline ::std::string* CSUserLoginReq::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSUserLoginReq::set_allocated_flag(::std::string* flag) {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (flag) {
    set_has_flag();
    flag_ = flag;
  } else {
    clear_has_flag();
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCUserLoginRsp

// required int32 result = 1;
inline bool SCUserLoginRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCUserLoginRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCUserLoginRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCUserLoginRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCUserLoginRsp::result() const {
  return result_;
}
inline void SCUserLoginRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional string token = 2;
inline bool SCUserLoginRsp::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCUserLoginRsp::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCUserLoginRsp::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCUserLoginRsp::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& SCUserLoginRsp::token() const {
  return *token_;
}
inline void SCUserLoginRsp::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void SCUserLoginRsp::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void SCUserLoginRsp::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCUserLoginRsp::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* SCUserLoginRsp::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCUserLoginRsp::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CSUserRegisterReq

// required string user = 1;
inline bool CSUserRegisterReq::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSUserRegisterReq::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSUserRegisterReq::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSUserRegisterReq::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& CSUserRegisterReq::user() const {
  return *user_;
}
inline void CSUserRegisterReq::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CSUserRegisterReq::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CSUserRegisterReq::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSUserRegisterReq::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* CSUserRegisterReq::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSUserRegisterReq::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string password = 2;
inline bool CSUserRegisterReq::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSUserRegisterReq::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSUserRegisterReq::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSUserRegisterReq::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& CSUserRegisterReq::password() const {
  return *password_;
}
inline void CSUserRegisterReq::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CSUserRegisterReq::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void CSUserRegisterReq::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSUserRegisterReq::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* CSUserRegisterReq::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSUserRegisterReq::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCUserRegisterRsp

// required int32 result = 1;
inline bool SCUserRegisterRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCUserRegisterRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCUserRegisterRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCUserRegisterRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCUserRegisterRsp::result() const {
  return result_;
}
inline void SCUserRegisterRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SCGameInfoNotify

// repeated .sglib.publicproto.GameInfo games = 1;
inline int SCGameInfoNotify::games_size() const {
  return games_.size();
}
inline void SCGameInfoNotify::clear_games() {
  games_.Clear();
}
inline const ::sglib::publicproto::GameInfo& SCGameInfoNotify::games(int index) const {
  return games_.Get(index);
}
inline ::sglib::publicproto::GameInfo* SCGameInfoNotify::mutable_games(int index) {
  return games_.Mutable(index);
}
inline ::sglib::publicproto::GameInfo* SCGameInfoNotify::add_games() {
  return games_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >&
SCGameInfoNotify::games() const {
  return games_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameInfo >*
SCGameInfoNotify::mutable_games() {
  return &games_;
}

// -------------------------------------------------------------------

// SCGroupGateNotify

// required string ip = 1;
inline bool SCGroupGateNotify::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupGateNotify::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupGateNotify::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupGateNotify::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SCGroupGateNotify::ip() const {
  return *ip_;
}
inline void SCGroupGateNotify::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SCGroupGateNotify::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SCGroupGateNotify::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupGateNotify::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SCGroupGateNotify::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupGateNotify::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 2;
inline bool SCGroupGateNotify::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupGateNotify::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupGateNotify::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupGateNotify::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 SCGroupGateNotify::port() const {
  return port_;
}
inline void SCGroupGateNotify::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// LoginCenterUserLoginReq

// required uint64 gateid = 1;
inline bool LoginCenterUserLoginReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginCenterUserLoginReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginCenterUserLoginReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginCenterUserLoginReq::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 LoginCenterUserLoginReq::gateid() const {
  return gateid_;
}
inline void LoginCenterUserLoginReq::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 2;
inline bool LoginCenterUserLoginReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoginCenterUserLoginReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoginCenterUserLoginReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoginCenterUserLoginReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 LoginCenterUserLoginReq::clientid() const {
  return clientid_;
}
inline void LoginCenterUserLoginReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 3;
inline bool LoginCenterUserLoginReq::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoginCenterUserLoginReq::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoginCenterUserLoginReq::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoginCenterUserLoginReq::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& LoginCenterUserLoginReq::user() const {
  return *user_;
}
inline void LoginCenterUserLoginReq::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void LoginCenterUserLoginReq::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void LoginCenterUserLoginReq::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCenterUserLoginReq::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* LoginCenterUserLoginReq::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCenterUserLoginReq::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string flag = 4;
inline bool LoginCenterUserLoginReq::has_flag() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoginCenterUserLoginReq::set_has_flag() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoginCenterUserLoginReq::clear_has_flag() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoginCenterUserLoginReq::clear_flag() {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    flag_->clear();
  }
  clear_has_flag();
}
inline const ::std::string& LoginCenterUserLoginReq::flag() const {
  return *flag_;
}
inline void LoginCenterUserLoginReq::set_flag(const ::std::string& value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void LoginCenterUserLoginReq::set_flag(const char* value) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(value);
}
inline void LoginCenterUserLoginReq::set_flag(const char* value, size_t size) {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  flag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* LoginCenterUserLoginReq::mutable_flag() {
  set_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    flag_ = new ::std::string;
  }
  return flag_;
}
inline ::std::string* LoginCenterUserLoginReq::release_flag() {
  clear_has_flag();
  if (flag_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = flag_;
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void LoginCenterUserLoginReq::set_allocated_flag(::std::string* flag) {
  if (flag_ != &::google::protobuf::internal::kEmptyString) {
    delete flag_;
  }
  if (flag) {
    set_has_flag();
    flag_ = flag;
  } else {
    clear_has_flag();
    flag_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace loginproto
}  // namespace sglib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_login_2eproto__INCLUDED
