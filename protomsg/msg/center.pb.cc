// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: center.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "center.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sglib {
namespace centerproto {

namespace {

const ::google::protobuf::Descriptor* CenterServerEnterGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterServerEnterGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterLoginUserLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterLoginUserLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterLoginGameInfoNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterLoginGameInfoNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCenterEnterGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCenterEnterGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerCenterUserLogoutNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerCenterUserLogoutNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* CenterLoginGroupGateNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CenterLoginGroupGateNotify_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_center_2eproto() {
  protobuf_AddDesc_center_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "center.proto");
  GOOGLE_CHECK(file != NULL);
  CenterServerEnterGameRsp_descriptor_ = file->message_type(0);
  static const int CenterServerEnterGameRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, gsid_),
  };
  CenterServerEnterGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterServerEnterGameRsp_descriptor_,
      CenterServerEnterGameRsp::default_instance_,
      CenterServerEnterGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterServerEnterGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterServerEnterGameRsp));
  CenterLoginUserLoginRsp_descriptor_ = file->message_type(1);
  static const int CenterLoginUserLoginRsp_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginUserLoginRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginUserLoginRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginUserLoginRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginUserLoginRsp, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginUserLoginRsp, token_),
  };
  CenterLoginUserLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterLoginUserLoginRsp_descriptor_,
      CenterLoginUserLoginRsp::default_instance_,
      CenterLoginUserLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginUserLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginUserLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterLoginUserLoginRsp));
  CenterLoginGameInfoNotify_descriptor_ = file->message_type(2);
  static const int CenterLoginGameInfoNotify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGameInfoNotify, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGameInfoNotify, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGameInfoNotify, games_),
  };
  CenterLoginGameInfoNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterLoginGameInfoNotify_descriptor_,
      CenterLoginGameInfoNotify::default_instance_,
      CenterLoginGameInfoNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGameInfoNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGameInfoNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterLoginGameInfoNotify));
  ServerCenterEnterGameReq_descriptor_ = file->message_type(3);
  static const int ServerCenterEnterGameReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterEnterGameReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterEnterGameReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterEnterGameReq, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterEnterGameReq, gsid_),
  };
  ServerCenterEnterGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCenterEnterGameReq_descriptor_,
      ServerCenterEnterGameReq::default_instance_,
      ServerCenterEnterGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterEnterGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterEnterGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCenterEnterGameReq));
  ServerCenterUserLogoutNotify_descriptor_ = file->message_type(4);
  static const int ServerCenterUserLogoutNotify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterUserLogoutNotify, user_),
  };
  ServerCenterUserLogoutNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerCenterUserLogoutNotify_descriptor_,
      ServerCenterUserLogoutNotify::default_instance_,
      ServerCenterUserLogoutNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterUserLogoutNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerCenterUserLogoutNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerCenterUserLogoutNotify));
  CenterLoginGroupGateNotify_descriptor_ = file->message_type(5);
  static const int CenterLoginGroupGateNotify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGroupGateNotify, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGroupGateNotify, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGroupGateNotify, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGroupGateNotify, port_),
  };
  CenterLoginGroupGateNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CenterLoginGroupGateNotify_descriptor_,
      CenterLoginGroupGateNotify::default_instance_,
      CenterLoginGroupGateNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGroupGateNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CenterLoginGroupGateNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CenterLoginGroupGateNotify));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_center_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterServerEnterGameRsp_descriptor_, &CenterServerEnterGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterLoginUserLoginRsp_descriptor_, &CenterLoginUserLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterLoginGameInfoNotify_descriptor_, &CenterLoginGameInfoNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCenterEnterGameReq_descriptor_, &ServerCenterEnterGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerCenterUserLogoutNotify_descriptor_, &ServerCenterUserLogoutNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CenterLoginGroupGateNotify_descriptor_, &CenterLoginGroupGateNotify::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_center_2eproto() {
  delete CenterServerEnterGameRsp::default_instance_;
  delete CenterServerEnterGameRsp_reflection_;
  delete CenterLoginUserLoginRsp::default_instance_;
  delete CenterLoginUserLoginRsp_reflection_;
  delete CenterLoginGameInfoNotify::default_instance_;
  delete CenterLoginGameInfoNotify_reflection_;
  delete ServerCenterEnterGameReq::default_instance_;
  delete ServerCenterEnterGameReq_reflection_;
  delete ServerCenterUserLogoutNotify::default_instance_;
  delete ServerCenterUserLogoutNotify_reflection_;
  delete CenterLoginGroupGateNotify::default_instance_;
  delete CenterLoginGroupGateNotify_reflection_;
}

void protobuf_AddDesc_center_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::sglib::publicproto::protobuf_AddDesc_public_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014center.proto\022\021sglib.centerproto\032\014publi"
    "c.proto\"\226\001\n\030CenterServerEnterGameRsp\022\016\n\006"
    "result\030\001 \002(\005\022\016\n\006gateid\030\002 \002(\004\022\020\n\010clientid"
    "\030\003 \002(\004\022\016\n\006gameid\030\004 \002(\005\022\n\n\002ip\030\005 \001(\t\022\014\n\004po"
    "rt\030\006 \001(\005\022\020\n\010serverid\030\007 \001(\005\022\014\n\004gsid\030\010 \001(\004"
    "\"h\n\027CenterLoginUserLoginRsp\022\016\n\006result\030\001 "
    "\002(\005\022\016\n\006gateid\030\002 \002(\004\022\020\n\010clientid\030\003 \002(\004\022\014\n"
    "\004user\030\004 \002(\t\022\r\n\005token\030\005 \001(\t\"i\n\031CenterLogi"
    "nGameInfoNotify\022\016\n\006gateid\030\001 \002(\004\022\020\n\010clien"
    "tid\030\002 \002(\004\022*\n\005games\030\003 \003(\0132\033.sglib.publicp"
    "roto.GameInfo\"Z\n\030ServerCenterEnterGameRe"
    "q\022\016\n\006gateid\030\001 \002(\004\022\020\n\010clientid\030\002 \002(\004\022\016\n\006g"
    "ameid\030\003 \002(\005\022\014\n\004gsid\030\004 \001(\004\",\n\034ServerCente"
    "rUserLogoutNotify\022\014\n\004user\030\001 \002(\t\"X\n\032Cente"
    "rLoginGroupGateNotify\022\016\n\006gateid\030\001 \002(\004\022\020\n"
    "\010clientid\030\002 \002(\004\022\n\n\002ip\030\003 \002(\t\022\014\n\004port\030\004 \002("
    "\005", 641);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "center.proto", &protobuf_RegisterTypes);
  CenterServerEnterGameRsp::default_instance_ = new CenterServerEnterGameRsp();
  CenterLoginUserLoginRsp::default_instance_ = new CenterLoginUserLoginRsp();
  CenterLoginGameInfoNotify::default_instance_ = new CenterLoginGameInfoNotify();
  ServerCenterEnterGameReq::default_instance_ = new ServerCenterEnterGameReq();
  ServerCenterUserLogoutNotify::default_instance_ = new ServerCenterUserLogoutNotify();
  CenterLoginGroupGateNotify::default_instance_ = new CenterLoginGroupGateNotify();
  CenterServerEnterGameRsp::default_instance_->InitAsDefaultInstance();
  CenterLoginUserLoginRsp::default_instance_->InitAsDefaultInstance();
  CenterLoginGameInfoNotify::default_instance_->InitAsDefaultInstance();
  ServerCenterEnterGameReq::default_instance_->InitAsDefaultInstance();
  ServerCenterUserLogoutNotify::default_instance_->InitAsDefaultInstance();
  CenterLoginGroupGateNotify::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_center_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_center_2eproto {
  StaticDescriptorInitializer_center_2eproto() {
    protobuf_AddDesc_center_2eproto();
  }
} static_descriptor_initializer_center_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CenterServerEnterGameRsp::kResultFieldNumber;
const int CenterServerEnterGameRsp::kGateidFieldNumber;
const int CenterServerEnterGameRsp::kClientidFieldNumber;
const int CenterServerEnterGameRsp::kGameidFieldNumber;
const int CenterServerEnterGameRsp::kIpFieldNumber;
const int CenterServerEnterGameRsp::kPortFieldNumber;
const int CenterServerEnterGameRsp::kServeridFieldNumber;
const int CenterServerEnterGameRsp::kGsidFieldNumber;
#endif  // !_MSC_VER

CenterServerEnterGameRsp::CenterServerEnterGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterServerEnterGameRsp::InitAsDefaultInstance() {
}

CenterServerEnterGameRsp::CenterServerEnterGameRsp(const CenterServerEnterGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterServerEnterGameRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  serverid_ = 0;
  gsid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterServerEnterGameRsp::~CenterServerEnterGameRsp() {
  SharedDtor();
}

void CenterServerEnterGameRsp::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CenterServerEnterGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterServerEnterGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterServerEnterGameRsp_descriptor_;
}

const CenterServerEnterGameRsp& CenterServerEnterGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2eproto();
  return *default_instance_;
}

CenterServerEnterGameRsp* CenterServerEnterGameRsp::default_instance_ = NULL;

CenterServerEnterGameRsp* CenterServerEnterGameRsp::New() const {
  return new CenterServerEnterGameRsp;
}

void CenterServerEnterGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    gameid_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    serverid_ = 0;
    gsid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterServerEnterGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint64 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gsid;
        break;
      }

      // optional uint64 gsid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterServerEnterGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gateid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required int32 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gameid(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional int32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  // optional int32 serverid = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->serverid(), output);
  }

  // optional uint64 gsid = 8;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterServerEnterGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gateid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required int32 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gameid(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional int32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  // optional int32 serverid = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->serverid(), target);
  }

  // optional uint64 gsid = 8;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterServerEnterGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 serverid = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional uint64 gsid = 8;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterServerEnterGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterServerEnterGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterServerEnterGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterServerEnterGameRsp::MergeFrom(const CenterServerEnterGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterServerEnterGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterServerEnterGameRsp::CopyFrom(const CenterServerEnterGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterServerEnterGameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CenterServerEnterGameRsp::Swap(CenterServerEnterGameRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(gameid_, other->gameid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(serverid_, other->serverid_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterServerEnterGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterServerEnterGameRsp_descriptor_;
  metadata.reflection = CenterServerEnterGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterLoginUserLoginRsp::kResultFieldNumber;
const int CenterLoginUserLoginRsp::kGateidFieldNumber;
const int CenterLoginUserLoginRsp::kClientidFieldNumber;
const int CenterLoginUserLoginRsp::kUserFieldNumber;
const int CenterLoginUserLoginRsp::kTokenFieldNumber;
#endif  // !_MSC_VER

CenterLoginUserLoginRsp::CenterLoginUserLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterLoginUserLoginRsp::InitAsDefaultInstance() {
}

CenterLoginUserLoginRsp::CenterLoginUserLoginRsp(const CenterLoginUserLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterLoginUserLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterLoginUserLoginRsp::~CenterLoginUserLoginRsp() {
  SharedDtor();
}

void CenterLoginUserLoginRsp::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (this != default_instance_) {
  }
}

void CenterLoginUserLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterLoginUserLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterLoginUserLoginRsp_descriptor_;
}

const CenterLoginUserLoginRsp& CenterLoginUserLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2eproto();
  return *default_instance_;
}

CenterLoginUserLoginRsp* CenterLoginUserLoginRsp::default_instance_ = NULL;

CenterLoginUserLoginRsp* CenterLoginUserLoginRsp::New() const {
  return new CenterLoginUserLoginRsp;
}

void CenterLoginUserLoginRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterLoginUserLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint64 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_user;
        break;
      }

      // required string user = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_token;
        break;
      }

      // optional string token = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterLoginUserLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gateid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->user(), output);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterLoginUserLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gateid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required string user = 4;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->user(), target);
  }

  // optional string token = 5;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterLoginUserLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string user = 4;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional string token = 5;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterLoginUserLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterLoginUserLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterLoginUserLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterLoginUserLoginRsp::MergeFrom(const CenterLoginUserLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterLoginUserLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterLoginUserLoginRsp::CopyFrom(const CenterLoginUserLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterLoginUserLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CenterLoginUserLoginRsp::Swap(CenterLoginUserLoginRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(user_, other->user_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterLoginUserLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterLoginUserLoginRsp_descriptor_;
  metadata.reflection = CenterLoginUserLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterLoginGameInfoNotify::kGateidFieldNumber;
const int CenterLoginGameInfoNotify::kClientidFieldNumber;
const int CenterLoginGameInfoNotify::kGamesFieldNumber;
#endif  // !_MSC_VER

CenterLoginGameInfoNotify::CenterLoginGameInfoNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterLoginGameInfoNotify::InitAsDefaultInstance() {
}

CenterLoginGameInfoNotify::CenterLoginGameInfoNotify(const CenterLoginGameInfoNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterLoginGameInfoNotify::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterLoginGameInfoNotify::~CenterLoginGameInfoNotify() {
  SharedDtor();
}

void CenterLoginGameInfoNotify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CenterLoginGameInfoNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterLoginGameInfoNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterLoginGameInfoNotify_descriptor_;
}

const CenterLoginGameInfoNotify& CenterLoginGameInfoNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2eproto();
  return *default_instance_;
}

CenterLoginGameInfoNotify* CenterLoginGameInfoNotify::default_instance_ = NULL;

CenterLoginGameInfoNotify* CenterLoginGameInfoNotify::New() const {
  return new CenterLoginGameInfoNotify;
}

void CenterLoginGameInfoNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
  }
  games_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterLoginGameInfoNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_games;
        break;
      }

      // repeated .sglib.publicproto.GameInfo games = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_games:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_games()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_games;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterLoginGameInfoNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientid(), output);
  }

  // repeated .sglib.publicproto.GameInfo games = 3;
  for (int i = 0; i < this->games_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->games(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterLoginGameInfoNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientid(), target);
  }

  // repeated .sglib.publicproto.GameInfo games = 3;
  for (int i = 0; i < this->games_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->games(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterLoginGameInfoNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

  }
  // repeated .sglib.publicproto.GameInfo games = 3;
  total_size += 1 * this->games_size();
  for (int i = 0; i < this->games_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->games(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterLoginGameInfoNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterLoginGameInfoNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterLoginGameInfoNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterLoginGameInfoNotify::MergeFrom(const CenterLoginGameInfoNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  games_.MergeFrom(from.games_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterLoginGameInfoNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterLoginGameInfoNotify::CopyFrom(const CenterLoginGameInfoNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterLoginGameInfoNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < games_size(); i++) {
    if (!this->games(i).IsInitialized()) return false;
  }
  return true;
}

void CenterLoginGameInfoNotify::Swap(CenterLoginGameInfoNotify* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    games_.Swap(&other->games_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterLoginGameInfoNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterLoginGameInfoNotify_descriptor_;
  metadata.reflection = CenterLoginGameInfoNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCenterEnterGameReq::kGateidFieldNumber;
const int ServerCenterEnterGameReq::kClientidFieldNumber;
const int ServerCenterEnterGameReq::kGameidFieldNumber;
const int ServerCenterEnterGameReq::kGsidFieldNumber;
#endif  // !_MSC_VER

ServerCenterEnterGameReq::ServerCenterEnterGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerCenterEnterGameReq::InitAsDefaultInstance() {
}

ServerCenterEnterGameReq::ServerCenterEnterGameReq(const ServerCenterEnterGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerCenterEnterGameReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0;
  gsid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCenterEnterGameReq::~ServerCenterEnterGameReq() {
  SharedDtor();
}

void ServerCenterEnterGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerCenterEnterGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCenterEnterGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCenterEnterGameReq_descriptor_;
}

const ServerCenterEnterGameReq& ServerCenterEnterGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2eproto();
  return *default_instance_;
}

ServerCenterEnterGameReq* ServerCenterEnterGameReq::default_instance_ = NULL;

ServerCenterEnterGameReq* ServerCenterEnterGameReq::New() const {
  return new ServerCenterEnterGameReq;
}

void ServerCenterEnterGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    gameid_ = 0;
    gsid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCenterEnterGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gsid;
        break;
      }

      // optional uint64 gsid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gsid_)));
          set_has_gsid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerCenterEnterGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientid(), output);
  }

  // required int32 gameid = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gameid(), output);
  }

  // optional uint64 gsid = 4;
  if (has_gsid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->gsid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerCenterEnterGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientid(), target);
  }

  // required int32 gameid = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gameid(), target);
  }

  // optional uint64 gsid = 4;
  if (has_gsid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->gsid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerCenterEnterGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 gameid = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional uint64 gsid = 4;
    if (has_gsid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gsid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCenterEnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCenterEnterGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCenterEnterGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCenterEnterGameReq::MergeFrom(const ServerCenterEnterGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gsid()) {
      set_gsid(from.gsid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCenterEnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCenterEnterGameReq::CopyFrom(const ServerCenterEnterGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCenterEnterGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerCenterEnterGameReq::Swap(ServerCenterEnterGameReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(gameid_, other->gameid_);
    std::swap(gsid_, other->gsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCenterEnterGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCenterEnterGameReq_descriptor_;
  metadata.reflection = ServerCenterEnterGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerCenterUserLogoutNotify::kUserFieldNumber;
#endif  // !_MSC_VER

ServerCenterUserLogoutNotify::ServerCenterUserLogoutNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerCenterUserLogoutNotify::InitAsDefaultInstance() {
}

ServerCenterUserLogoutNotify::ServerCenterUserLogoutNotify(const ServerCenterUserLogoutNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerCenterUserLogoutNotify::SharedCtor() {
  _cached_size_ = 0;
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerCenterUserLogoutNotify::~ServerCenterUserLogoutNotify() {
  SharedDtor();
}

void ServerCenterUserLogoutNotify::SharedDtor() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (this != default_instance_) {
  }
}

void ServerCenterUserLogoutNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerCenterUserLogoutNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerCenterUserLogoutNotify_descriptor_;
}

const ServerCenterUserLogoutNotify& ServerCenterUserLogoutNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2eproto();
  return *default_instance_;
}

ServerCenterUserLogoutNotify* ServerCenterUserLogoutNotify::default_instance_ = NULL;

ServerCenterUserLogoutNotify* ServerCenterUserLogoutNotify::New() const {
  return new ServerCenterUserLogoutNotify;
}

void ServerCenterUserLogoutNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::kEmptyString) {
        user_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerCenterUserLogoutNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string user = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerCenterUserLogoutNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerCenterUserLogoutNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string user = 1;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerCenterUserLogoutNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string user = 1;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerCenterUserLogoutNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerCenterUserLogoutNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerCenterUserLogoutNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerCenterUserLogoutNotify::MergeFrom(const ServerCenterUserLogoutNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user()) {
      set_user(from.user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerCenterUserLogoutNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerCenterUserLogoutNotify::CopyFrom(const ServerCenterUserLogoutNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerCenterUserLogoutNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ServerCenterUserLogoutNotify::Swap(ServerCenterUserLogoutNotify* other) {
  if (other != this) {
    std::swap(user_, other->user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerCenterUserLogoutNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerCenterUserLogoutNotify_descriptor_;
  metadata.reflection = ServerCenterUserLogoutNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CenterLoginGroupGateNotify::kGateidFieldNumber;
const int CenterLoginGroupGateNotify::kClientidFieldNumber;
const int CenterLoginGroupGateNotify::kIpFieldNumber;
const int CenterLoginGroupGateNotify::kPortFieldNumber;
#endif  // !_MSC_VER

CenterLoginGroupGateNotify::CenterLoginGroupGateNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CenterLoginGroupGateNotify::InitAsDefaultInstance() {
}

CenterLoginGroupGateNotify::CenterLoginGroupGateNotify(const CenterLoginGroupGateNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CenterLoginGroupGateNotify::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CenterLoginGroupGateNotify::~CenterLoginGroupGateNotify() {
  SharedDtor();
}

void CenterLoginGroupGateNotify::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void CenterLoginGroupGateNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CenterLoginGroupGateNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CenterLoginGroupGateNotify_descriptor_;
}

const CenterLoginGroupGateNotify& CenterLoginGroupGateNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_center_2eproto();
  return *default_instance_;
}

CenterLoginGroupGateNotify* CenterLoginGroupGateNotify::default_instance_ = NULL;

CenterLoginGroupGateNotify* CenterLoginGroupGateNotify::New() const {
  return new CenterLoginGroupGateNotify;
}

void CenterLoginGroupGateNotify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CenterLoginGroupGateNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // required int32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CenterLoginGroupGateNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientid(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required int32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CenterLoginGroupGateNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientid(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required int32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CenterLoginGroupGateNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CenterLoginGroupGateNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CenterLoginGroupGateNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CenterLoginGroupGateNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CenterLoginGroupGateNotify::MergeFrom(const CenterLoginGroupGateNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CenterLoginGroupGateNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CenterLoginGroupGateNotify::CopyFrom(const CenterLoginGroupGateNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CenterLoginGroupGateNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CenterLoginGroupGateNotify::Swap(CenterLoginGroupGateNotify* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CenterLoginGroupGateNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CenterLoginGroupGateNotify_descriptor_;
  metadata.reflection = CenterLoginGroupGateNotify_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace centerproto
}  // namespace sglib

// @@protoc_insertion_point(global_scope)
