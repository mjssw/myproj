// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamemanager.proto

#ifndef PROTOBUF_gamemanager_2eproto__INCLUDED
#define PROTOBUF_gamemanager_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "public.pb.h"
// @@protoc_insertion_point(includes)

namespace sglib {
namespace gamemanagerproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gamemanager_2eproto();
void protobuf_AssignDesc_gamemanager_2eproto();
void protobuf_ShutdownFile_gamemanager_2eproto();

class GamemanagerCenterReportGameInfo;
class ServerGamemanagerReportGameInfo;
class ServerGamemanagerEnterGameReq;
class GamemanagerServerEnterGameRsp;
class ServerGamemanagerGateCloseNtf;
class GamemanagerCenterGateCloseNtf;
class ServerGamemanagerDynamicStartNtf;
class GamemanagerServerDynamicServerStartNtf;
class GamemanagerCenterServerCloseNtf;
class GamemanagerGroupmanagerReportGameInfo;
class GamemanagerServerCreateGameRoomReq;
class ServerGamemanagerCreateGameRoomRsp;

// ===================================================================

class GamemanagerCenterReportGameInfo : public ::google::protobuf::Message {
 public:
  GamemanagerCenterReportGameInfo();
  virtual ~GamemanagerCenterReportGameInfo();

  GamemanagerCenterReportGameInfo(const GamemanagerCenterReportGameInfo& from);

  inline GamemanagerCenterReportGameInfo& operator=(const GamemanagerCenterReportGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerCenterReportGameInfo& default_instance();

  void Swap(GamemanagerCenterReportGameInfo* other);

  // implements Message ----------------------------------------------

  GamemanagerCenterReportGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerCenterReportGameInfo& from);
  void MergeFrom(const GamemanagerCenterReportGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // repeated .sglib.publicproto.GameServerInfo gameservers = 2;
  inline int gameservers_size() const;
  inline void clear_gameservers();
  static const int kGameserversFieldNumber = 2;
  inline const ::sglib::publicproto::GameServerInfo& gameservers(int index) const;
  inline ::sglib::publicproto::GameServerInfo* mutable_gameservers(int index);
  inline ::sglib::publicproto::GameServerInfo* add_gameservers();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameServerInfo >&
      gameservers() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameServerInfo >*
      mutable_gameservers();

  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  inline int gateservers_size() const;
  inline void clear_gateservers();
  static const int kGateserversFieldNumber = 3;
  inline const ::sglib::publicproto::GateServerInfo& gateservers(int index) const;
  inline ::sglib::publicproto::GateServerInfo* mutable_gateservers(int index);
  inline ::sglib::publicproto::GateServerInfo* add_gateservers();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
      gateservers() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
      mutable_gateservers();

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.GamemanagerCenterReportGameInfo)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameServerInfo > gameservers_;
  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo > gateservers_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerCenterReportGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerGamemanagerReportGameInfo : public ::google::protobuf::Message {
 public:
  ServerGamemanagerReportGameInfo();
  virtual ~ServerGamemanagerReportGameInfo();

  ServerGamemanagerReportGameInfo(const ServerGamemanagerReportGameInfo& from);

  inline ServerGamemanagerReportGameInfo& operator=(const ServerGamemanagerReportGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGamemanagerReportGameInfo& default_instance();

  void Swap(ServerGamemanagerReportGameInfo* other);

  // implements Message ----------------------------------------------

  ServerGamemanagerReportGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGamemanagerReportGameInfo& from);
  void MergeFrom(const ServerGamemanagerReportGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required .sglib.publicproto.GameServerInfo gameserver = 2;
  inline bool has_gameserver() const;
  inline void clear_gameserver();
  static const int kGameserverFieldNumber = 2;
  inline const ::sglib::publicproto::GameServerInfo& gameserver() const;
  inline ::sglib::publicproto::GameServerInfo* mutable_gameserver();
  inline ::sglib::publicproto::GameServerInfo* release_gameserver();
  inline void set_allocated_gameserver(::sglib::publicproto::GameServerInfo* gameserver);

  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  inline int gateservers_size() const;
  inline void clear_gateservers();
  static const int kGateserversFieldNumber = 3;
  inline const ::sglib::publicproto::GateServerInfo& gateservers(int index) const;
  inline ::sglib::publicproto::GateServerInfo* mutable_gateservers(int index);
  inline ::sglib::publicproto::GateServerInfo* add_gateservers();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
      gateservers() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
      mutable_gateservers();

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.ServerGamemanagerReportGameInfo)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gameserver();
  inline void clear_has_gameserver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::sglib::publicproto::GameServerInfo* gameserver_;
  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo > gateservers_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static ServerGamemanagerReportGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class ServerGamemanagerEnterGameReq : public ::google::protobuf::Message {
 public:
  ServerGamemanagerEnterGameReq();
  virtual ~ServerGamemanagerEnterGameReq();

  ServerGamemanagerEnterGameReq(const ServerGamemanagerEnterGameReq& from);

  inline ServerGamemanagerEnterGameReq& operator=(const ServerGamemanagerEnterGameReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGamemanagerEnterGameReq& default_instance();

  void Swap(ServerGamemanagerEnterGameReq* other);

  // implements Message ----------------------------------------------

  ServerGamemanagerEnterGameReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGamemanagerEnterGameReq& from);
  void MergeFrom(const ServerGamemanagerEnterGameReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 2;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 gameid = 3;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 3;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.ServerGamemanagerEnterGameReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static ServerGamemanagerEnterGameReq* default_instance_;
};
// -------------------------------------------------------------------

class GamemanagerServerEnterGameRsp : public ::google::protobuf::Message {
 public:
  GamemanagerServerEnterGameRsp();
  virtual ~GamemanagerServerEnterGameRsp();

  GamemanagerServerEnterGameRsp(const GamemanagerServerEnterGameRsp& from);

  inline GamemanagerServerEnterGameRsp& operator=(const GamemanagerServerEnterGameRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerServerEnterGameRsp& default_instance();

  void Swap(GamemanagerServerEnterGameRsp* other);

  // implements Message ----------------------------------------------

  GamemanagerServerEnterGameRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerServerEnterGameRsp& from);
  void MergeFrom(const GamemanagerServerEnterGameRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // optional string ip = 5;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 5;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 6;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 6;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 serverid = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 7;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.GamemanagerServerEnterGameRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gameid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerServerEnterGameRsp* default_instance_;
};
// -------------------------------------------------------------------

class ServerGamemanagerGateCloseNtf : public ::google::protobuf::Message {
 public:
  ServerGamemanagerGateCloseNtf();
  virtual ~ServerGamemanagerGateCloseNtf();

  ServerGamemanagerGateCloseNtf(const ServerGamemanagerGateCloseNtf& from);

  inline ServerGamemanagerGateCloseNtf& operator=(const ServerGamemanagerGateCloseNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGamemanagerGateCloseNtf& default_instance();

  void Swap(ServerGamemanagerGateCloseNtf* other);

  // implements Message ----------------------------------------------

  ServerGamemanagerGateCloseNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGamemanagerGateCloseNtf& from);
  void MergeFrom(const ServerGamemanagerGateCloseNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::int32 gateid() const;
  inline void set_gateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.ServerGamemanagerGateCloseNtf)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static ServerGamemanagerGateCloseNtf* default_instance_;
};
// -------------------------------------------------------------------

class GamemanagerCenterGateCloseNtf : public ::google::protobuf::Message {
 public:
  GamemanagerCenterGateCloseNtf();
  virtual ~GamemanagerCenterGateCloseNtf();

  GamemanagerCenterGateCloseNtf(const GamemanagerCenterGateCloseNtf& from);

  inline GamemanagerCenterGateCloseNtf& operator=(const GamemanagerCenterGateCloseNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerCenterGateCloseNtf& default_instance();

  void Swap(GamemanagerCenterGateCloseNtf* other);

  // implements Message ----------------------------------------------

  GamemanagerCenterGateCloseNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerCenterGateCloseNtf& from);
  void MergeFrom(const GamemanagerCenterGateCloseNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::int32 gateid() const;
  inline void set_gateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.GamemanagerCenterGateCloseNtf)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerCenterGateCloseNtf* default_instance_;
};
// -------------------------------------------------------------------

class ServerGamemanagerDynamicStartNtf : public ::google::protobuf::Message {
 public:
  ServerGamemanagerDynamicStartNtf();
  virtual ~ServerGamemanagerDynamicStartNtf();

  ServerGamemanagerDynamicStartNtf(const ServerGamemanagerDynamicStartNtf& from);

  inline ServerGamemanagerDynamicStartNtf& operator=(const ServerGamemanagerDynamicStartNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGamemanagerDynamicStartNtf& default_instance();

  void Swap(ServerGamemanagerDynamicStartNtf* other);

  // implements Message ----------------------------------------------

  ServerGamemanagerDynamicStartNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGamemanagerDynamicStartNtf& from);
  void MergeFrom(const ServerGamemanagerDynamicStartNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // required int32 gameid = 4;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 4;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.ServerGamemanagerDynamicStartNtf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static ServerGamemanagerDynamicStartNtf* default_instance_;
};
// -------------------------------------------------------------------

class GamemanagerServerDynamicServerStartNtf : public ::google::protobuf::Message {
 public:
  GamemanagerServerDynamicServerStartNtf();
  virtual ~GamemanagerServerDynamicServerStartNtf();

  GamemanagerServerDynamicServerStartNtf(const GamemanagerServerDynamicServerStartNtf& from);

  inline GamemanagerServerDynamicServerStartNtf& operator=(const GamemanagerServerDynamicServerStartNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerServerDynamicServerStartNtf& default_instance();

  void Swap(GamemanagerServerDynamicServerStartNtf* other);

  // implements Message ----------------------------------------------

  GamemanagerServerDynamicServerStartNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerServerDynamicServerStartNtf& from);
  void MergeFrom(const GamemanagerServerDynamicServerStartNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.GamemanagerServerDynamicServerStartNtf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerServerDynamicServerStartNtf* default_instance_;
};
// -------------------------------------------------------------------

class GamemanagerCenterServerCloseNtf : public ::google::protobuf::Message {
 public:
  GamemanagerCenterServerCloseNtf();
  virtual ~GamemanagerCenterServerCloseNtf();

  GamemanagerCenterServerCloseNtf(const GamemanagerCenterServerCloseNtf& from);

  inline GamemanagerCenterServerCloseNtf& operator=(const GamemanagerCenterServerCloseNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerCenterServerCloseNtf& default_instance();

  void Swap(GamemanagerCenterServerCloseNtf* other);

  // implements Message ----------------------------------------------

  GamemanagerCenterServerCloseNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerCenterServerCloseNtf& from);
  void MergeFrom(const GamemanagerCenterServerCloseNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.GamemanagerCenterServerCloseNtf)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerCenterServerCloseNtf* default_instance_;
};
// -------------------------------------------------------------------

class GamemanagerGroupmanagerReportGameInfo : public ::google::protobuf::Message {
 public:
  GamemanagerGroupmanagerReportGameInfo();
  virtual ~GamemanagerGroupmanagerReportGameInfo();

  GamemanagerGroupmanagerReportGameInfo(const GamemanagerGroupmanagerReportGameInfo& from);

  inline GamemanagerGroupmanagerReportGameInfo& operator=(const GamemanagerGroupmanagerReportGameInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerGroupmanagerReportGameInfo& default_instance();

  void Swap(GamemanagerGroupmanagerReportGameInfo* other);

  // implements Message ----------------------------------------------

  GamemanagerGroupmanagerReportGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerGroupmanagerReportGameInfo& from);
  void MergeFrom(const GamemanagerGroupmanagerReportGameInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gameid = 1;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 1;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.GamemanagerGroupmanagerReportGameInfo)
 private:
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gameid_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerGroupmanagerReportGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class GamemanagerServerCreateGameRoomReq : public ::google::protobuf::Message {
 public:
  GamemanagerServerCreateGameRoomReq();
  virtual ~GamemanagerServerCreateGameRoomReq();

  GamemanagerServerCreateGameRoomReq(const GamemanagerServerCreateGameRoomReq& from);

  inline GamemanagerServerCreateGameRoomReq& operator=(const GamemanagerServerCreateGameRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerServerCreateGameRoomReq& default_instance();

  void Swap(GamemanagerServerCreateGameRoomReq* other);

  // implements Message ----------------------------------------------

  GamemanagerServerCreateGameRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerServerCreateGameRoomReq& from);
  void MergeFrom(const GamemanagerServerCreateGameRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 game = 4;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 4;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // required uint64 serverid = 5;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 5;
  inline ::google::protobuf::uint64 serverid() const;
  inline void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.GamemanagerServerCreateGameRoomReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::int32 game_;
  ::google::protobuf::uint64 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerServerCreateGameRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class ServerGamemanagerCreateGameRoomRsp : public ::google::protobuf::Message {
 public:
  ServerGamemanagerCreateGameRoomRsp();
  virtual ~ServerGamemanagerCreateGameRoomRsp();

  ServerGamemanagerCreateGameRoomRsp(const ServerGamemanagerCreateGameRoomRsp& from);

  inline ServerGamemanagerCreateGameRoomRsp& operator=(const ServerGamemanagerCreateGameRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGamemanagerCreateGameRoomRsp& default_instance();

  void Swap(ServerGamemanagerCreateGameRoomRsp* other);

  // implements Message ----------------------------------------------

  ServerGamemanagerCreateGameRoomRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGamemanagerCreateGameRoomRsp& from);
  void MergeFrom(const ServerGamemanagerCreateGameRoomRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 3;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 3;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 4;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 4;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 game = 5;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 5;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // required uint64 serverid = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 6;
  inline ::google::protobuf::uint64 serverid() const;
  inline void set_serverid(::google::protobuf::uint64 value);

  // optional int32 roomid = 7;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 7;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional string password = 8;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 8;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required int32 gameid = 9;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 9;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gamemanagerproto.ServerGamemanagerCreateGameRoomRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_gameid();
  inline void clear_has_gameid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::int32 game_;
  ::google::protobuf::int32 roomid_;
  ::std::string* password_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_gamemanager_2eproto();
  friend void protobuf_AssignDesc_gamemanager_2eproto();
  friend void protobuf_ShutdownFile_gamemanager_2eproto();

  void InitAsDefaultInstance();
  static ServerGamemanagerCreateGameRoomRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// GamemanagerCenterReportGameInfo

// required int32 gameid = 1;
inline bool GamemanagerCenterReportGameInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerCenterReportGameInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerCenterReportGameInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerCenterReportGameInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GamemanagerCenterReportGameInfo::gameid() const {
  return gameid_;
}
inline void GamemanagerCenterReportGameInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// repeated .sglib.publicproto.GameServerInfo gameservers = 2;
inline int GamemanagerCenterReportGameInfo::gameservers_size() const {
  return gameservers_.size();
}
inline void GamemanagerCenterReportGameInfo::clear_gameservers() {
  gameservers_.Clear();
}
inline const ::sglib::publicproto::GameServerInfo& GamemanagerCenterReportGameInfo::gameservers(int index) const {
  return gameservers_.Get(index);
}
inline ::sglib::publicproto::GameServerInfo* GamemanagerCenterReportGameInfo::mutable_gameservers(int index) {
  return gameservers_.Mutable(index);
}
inline ::sglib::publicproto::GameServerInfo* GamemanagerCenterReportGameInfo::add_gameservers() {
  return gameservers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameServerInfo >&
GamemanagerCenterReportGameInfo::gameservers() const {
  return gameservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GameServerInfo >*
GamemanagerCenterReportGameInfo::mutable_gameservers() {
  return &gameservers_;
}

// repeated .sglib.publicproto.GateServerInfo gateservers = 3;
inline int GamemanagerCenterReportGameInfo::gateservers_size() const {
  return gateservers_.size();
}
inline void GamemanagerCenterReportGameInfo::clear_gateservers() {
  gateservers_.Clear();
}
inline const ::sglib::publicproto::GateServerInfo& GamemanagerCenterReportGameInfo::gateservers(int index) const {
  return gateservers_.Get(index);
}
inline ::sglib::publicproto::GateServerInfo* GamemanagerCenterReportGameInfo::mutable_gateservers(int index) {
  return gateservers_.Mutable(index);
}
inline ::sglib::publicproto::GateServerInfo* GamemanagerCenterReportGameInfo::add_gateservers() {
  return gateservers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
GamemanagerCenterReportGameInfo::gateservers() const {
  return gateservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
GamemanagerCenterReportGameInfo::mutable_gateservers() {
  return &gateservers_;
}

// -------------------------------------------------------------------

// ServerGamemanagerReportGameInfo

// required int32 gameid = 1;
inline bool ServerGamemanagerReportGameInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGamemanagerReportGameInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGamemanagerReportGameInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGamemanagerReportGameInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ServerGamemanagerReportGameInfo::gameid() const {
  return gameid_;
}
inline void ServerGamemanagerReportGameInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required .sglib.publicproto.GameServerInfo gameserver = 2;
inline bool ServerGamemanagerReportGameInfo::has_gameserver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGamemanagerReportGameInfo::set_has_gameserver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGamemanagerReportGameInfo::clear_has_gameserver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGamemanagerReportGameInfo::clear_gameserver() {
  if (gameserver_ != NULL) gameserver_->::sglib::publicproto::GameServerInfo::Clear();
  clear_has_gameserver();
}
inline const ::sglib::publicproto::GameServerInfo& ServerGamemanagerReportGameInfo::gameserver() const {
  return gameserver_ != NULL ? *gameserver_ : *default_instance_->gameserver_;
}
inline ::sglib::publicproto::GameServerInfo* ServerGamemanagerReportGameInfo::mutable_gameserver() {
  set_has_gameserver();
  if (gameserver_ == NULL) gameserver_ = new ::sglib::publicproto::GameServerInfo;
  return gameserver_;
}
inline ::sglib::publicproto::GameServerInfo* ServerGamemanagerReportGameInfo::release_gameserver() {
  clear_has_gameserver();
  ::sglib::publicproto::GameServerInfo* temp = gameserver_;
  gameserver_ = NULL;
  return temp;
}
inline void ServerGamemanagerReportGameInfo::set_allocated_gameserver(::sglib::publicproto::GameServerInfo* gameserver) {
  delete gameserver_;
  gameserver_ = gameserver;
  if (gameserver) {
    set_has_gameserver();
  } else {
    clear_has_gameserver();
  }
}

// repeated .sglib.publicproto.GateServerInfo gateservers = 3;
inline int ServerGamemanagerReportGameInfo::gateservers_size() const {
  return gateservers_.size();
}
inline void ServerGamemanagerReportGameInfo::clear_gateservers() {
  gateservers_.Clear();
}
inline const ::sglib::publicproto::GateServerInfo& ServerGamemanagerReportGameInfo::gateservers(int index) const {
  return gateservers_.Get(index);
}
inline ::sglib::publicproto::GateServerInfo* ServerGamemanagerReportGameInfo::mutable_gateservers(int index) {
  return gateservers_.Mutable(index);
}
inline ::sglib::publicproto::GateServerInfo* ServerGamemanagerReportGameInfo::add_gateservers() {
  return gateservers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
ServerGamemanagerReportGameInfo::gateservers() const {
  return gateservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
ServerGamemanagerReportGameInfo::mutable_gateservers() {
  return &gateservers_;
}

// -------------------------------------------------------------------

// ServerGamemanagerEnterGameReq

// required uint64 gateid = 1;
inline bool ServerGamemanagerEnterGameReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGamemanagerEnterGameReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGamemanagerEnterGameReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGamemanagerEnterGameReq::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 ServerGamemanagerEnterGameReq::gateid() const {
  return gateid_;
}
inline void ServerGamemanagerEnterGameReq::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 2;
inline bool ServerGamemanagerEnterGameReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGamemanagerEnterGameReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGamemanagerEnterGameReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGamemanagerEnterGameReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 ServerGamemanagerEnterGameReq::clientid() const {
  return clientid_;
}
inline void ServerGamemanagerEnterGameReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 gameid = 3;
inline bool ServerGamemanagerEnterGameReq::has_gameid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerGamemanagerEnterGameReq::set_has_gameid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerGamemanagerEnterGameReq::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerGamemanagerEnterGameReq::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ServerGamemanagerEnterGameReq::gameid() const {
  return gameid_;
}
inline void ServerGamemanagerEnterGameReq::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// GamemanagerServerEnterGameRsp

// required int32 result = 1;
inline bool GamemanagerServerEnterGameRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerServerEnterGameRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerServerEnterGameRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerServerEnterGameRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GamemanagerServerEnterGameRsp::result() const {
  return result_;
}
inline void GamemanagerServerEnterGameRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 gateid = 2;
inline bool GamemanagerServerEnterGameRsp::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamemanagerServerEnterGameRsp::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamemanagerServerEnterGameRsp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamemanagerServerEnterGameRsp::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 GamemanagerServerEnterGameRsp::gateid() const {
  return gateid_;
}
inline void GamemanagerServerEnterGameRsp::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 3;
inline bool GamemanagerServerEnterGameRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamemanagerServerEnterGameRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamemanagerServerEnterGameRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamemanagerServerEnterGameRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GamemanagerServerEnterGameRsp::clientid() const {
  return clientid_;
}
inline void GamemanagerServerEnterGameRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 gameid = 4;
inline bool GamemanagerServerEnterGameRsp::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamemanagerServerEnterGameRsp::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamemanagerServerEnterGameRsp::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamemanagerServerEnterGameRsp::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GamemanagerServerEnterGameRsp::gameid() const {
  return gameid_;
}
inline void GamemanagerServerEnterGameRsp::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// optional string ip = 5;
inline bool GamemanagerServerEnterGameRsp::has_ip() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamemanagerServerEnterGameRsp::set_has_ip() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamemanagerServerEnterGameRsp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamemanagerServerEnterGameRsp::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GamemanagerServerEnterGameRsp::ip() const {
  return *ip_;
}
inline void GamemanagerServerEnterGameRsp::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GamemanagerServerEnterGameRsp::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GamemanagerServerEnterGameRsp::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GamemanagerServerEnterGameRsp::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GamemanagerServerEnterGameRsp::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GamemanagerServerEnterGameRsp::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 6;
inline bool GamemanagerServerEnterGameRsp::has_port() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GamemanagerServerEnterGameRsp::set_has_port() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GamemanagerServerEnterGameRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GamemanagerServerEnterGameRsp::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GamemanagerServerEnterGameRsp::port() const {
  return port_;
}
inline void GamemanagerServerEnterGameRsp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 serverid = 7;
inline bool GamemanagerServerEnterGameRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GamemanagerServerEnterGameRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GamemanagerServerEnterGameRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GamemanagerServerEnterGameRsp::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GamemanagerServerEnterGameRsp::serverid() const {
  return serverid_;
}
inline void GamemanagerServerEnterGameRsp::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// ServerGamemanagerGateCloseNtf

// required int32 gameid = 1;
inline bool ServerGamemanagerGateCloseNtf::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGamemanagerGateCloseNtf::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGamemanagerGateCloseNtf::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGamemanagerGateCloseNtf::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ServerGamemanagerGateCloseNtf::gameid() const {
  return gameid_;
}
inline void ServerGamemanagerGateCloseNtf::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 gateid = 2;
inline bool ServerGamemanagerGateCloseNtf::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGamemanagerGateCloseNtf::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGamemanagerGateCloseNtf::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGamemanagerGateCloseNtf::clear_gateid() {
  gateid_ = 0;
  clear_has_gateid();
}
inline ::google::protobuf::int32 ServerGamemanagerGateCloseNtf::gateid() const {
  return gateid_;
}
inline void ServerGamemanagerGateCloseNtf::set_gateid(::google::protobuf::int32 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// GamemanagerCenterGateCloseNtf

// required int32 gameid = 1;
inline bool GamemanagerCenterGateCloseNtf::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerCenterGateCloseNtf::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerCenterGateCloseNtf::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerCenterGateCloseNtf::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GamemanagerCenterGateCloseNtf::gameid() const {
  return gameid_;
}
inline void GamemanagerCenterGateCloseNtf::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 gateid = 2;
inline bool GamemanagerCenterGateCloseNtf::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamemanagerCenterGateCloseNtf::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamemanagerCenterGateCloseNtf::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamemanagerCenterGateCloseNtf::clear_gateid() {
  gateid_ = 0;
  clear_has_gateid();
}
inline ::google::protobuf::int32 GamemanagerCenterGateCloseNtf::gateid() const {
  return gateid_;
}
inline void GamemanagerCenterGateCloseNtf::set_gateid(::google::protobuf::int32 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// ServerGamemanagerDynamicStartNtf

// required int32 id = 1;
inline bool ServerGamemanagerDynamicStartNtf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGamemanagerDynamicStartNtf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ServerGamemanagerDynamicStartNtf::id() const {
  return id_;
}
inline void ServerGamemanagerDynamicStartNtf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool ServerGamemanagerDynamicStartNtf::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGamemanagerDynamicStartNtf::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerGamemanagerDynamicStartNtf::ip() const {
  return *ip_;
}
inline void ServerGamemanagerDynamicStartNtf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerGamemanagerDynamicStartNtf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerGamemanagerDynamicStartNtf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerGamemanagerDynamicStartNtf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ServerGamemanagerDynamicStartNtf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerGamemanagerDynamicStartNtf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool ServerGamemanagerDynamicStartNtf::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerGamemanagerDynamicStartNtf::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerGamemanagerDynamicStartNtf::port() const {
  return port_;
}
inline void ServerGamemanagerDynamicStartNtf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// required int32 gameid = 4;
inline bool ServerGamemanagerDynamicStartNtf::has_gameid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerGamemanagerDynamicStartNtf::set_has_gameid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerGamemanagerDynamicStartNtf::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ServerGamemanagerDynamicStartNtf::gameid() const {
  return gameid_;
}
inline void ServerGamemanagerDynamicStartNtf::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// -------------------------------------------------------------------

// GamemanagerServerDynamicServerStartNtf

// required int32 id = 1;
inline bool GamemanagerServerDynamicServerStartNtf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerServerDynamicServerStartNtf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerServerDynamicServerStartNtf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerServerDynamicServerStartNtf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GamemanagerServerDynamicServerStartNtf::id() const {
  return id_;
}
inline void GamemanagerServerDynamicServerStartNtf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool GamemanagerServerDynamicServerStartNtf::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamemanagerServerDynamicServerStartNtf::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamemanagerServerDynamicServerStartNtf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamemanagerServerDynamicServerStartNtf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GamemanagerServerDynamicServerStartNtf::ip() const {
  return *ip_;
}
inline void GamemanagerServerDynamicServerStartNtf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GamemanagerServerDynamicServerStartNtf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GamemanagerServerDynamicServerStartNtf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GamemanagerServerDynamicServerStartNtf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GamemanagerServerDynamicServerStartNtf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GamemanagerServerDynamicServerStartNtf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool GamemanagerServerDynamicServerStartNtf::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamemanagerServerDynamicServerStartNtf::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamemanagerServerDynamicServerStartNtf::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamemanagerServerDynamicServerStartNtf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GamemanagerServerDynamicServerStartNtf::port() const {
  return port_;
}
inline void GamemanagerServerDynamicServerStartNtf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// GamemanagerCenterServerCloseNtf

// required int32 gameid = 1;
inline bool GamemanagerCenterServerCloseNtf::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerCenterServerCloseNtf::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerCenterServerCloseNtf::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerCenterServerCloseNtf::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GamemanagerCenterServerCloseNtf::gameid() const {
  return gameid_;
}
inline void GamemanagerCenterServerCloseNtf::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 serverid = 2;
inline bool GamemanagerCenterServerCloseNtf::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamemanagerCenterServerCloseNtf::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamemanagerCenterServerCloseNtf::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamemanagerCenterServerCloseNtf::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GamemanagerCenterServerCloseNtf::serverid() const {
  return serverid_;
}
inline void GamemanagerCenterServerCloseNtf::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// GamemanagerGroupmanagerReportGameInfo

// required int32 gameid = 1;
inline bool GamemanagerGroupmanagerReportGameInfo::has_gameid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerGroupmanagerReportGameInfo::set_has_gameid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerGroupmanagerReportGameInfo::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerGroupmanagerReportGameInfo::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GamemanagerGroupmanagerReportGameInfo::gameid() const {
  return gameid_;
}
inline void GamemanagerGroupmanagerReportGameInfo::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required int32 count = 2;
inline bool GamemanagerGroupmanagerReportGameInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamemanagerGroupmanagerReportGameInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamemanagerGroupmanagerReportGameInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamemanagerGroupmanagerReportGameInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 GamemanagerGroupmanagerReportGameInfo::count() const {
  return count_;
}
inline void GamemanagerGroupmanagerReportGameInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// GamemanagerServerCreateGameRoomReq

// required uint64 groupid = 1;
inline bool GamemanagerServerCreateGameRoomReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerServerCreateGameRoomReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GamemanagerServerCreateGameRoomReq::groupid() const {
  return groupid_;
}
inline void GamemanagerServerCreateGameRoomReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 2;
inline bool GamemanagerServerCreateGameRoomReq::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamemanagerServerCreateGameRoomReq::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GamemanagerServerCreateGameRoomReq::gateresid() const {
  return gateresid_;
}
inline void GamemanagerServerCreateGameRoomReq::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GamemanagerServerCreateGameRoomReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamemanagerServerCreateGameRoomReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GamemanagerServerCreateGameRoomReq::clientid() const {
  return clientid_;
}
inline void GamemanagerServerCreateGameRoomReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 game = 4;
inline bool GamemanagerServerCreateGameRoomReq::has_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamemanagerServerCreateGameRoomReq::set_has_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_has_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 GamemanagerServerCreateGameRoomReq::game() const {
  return game_;
}
inline void GamemanagerServerCreateGameRoomReq::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// required uint64 serverid = 5;
inline bool GamemanagerServerCreateGameRoomReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamemanagerServerCreateGameRoomReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamemanagerServerCreateGameRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::uint64 GamemanagerServerCreateGameRoomReq::serverid() const {
  return serverid_;
}
inline void GamemanagerServerCreateGameRoomReq::set_serverid(::google::protobuf::uint64 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// ServerGamemanagerCreateGameRoomRsp

// required int32 result = 1;
inline bool ServerGamemanagerCreateGameRoomRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 ServerGamemanagerCreateGameRoomRsp::result() const {
  return result_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool ServerGamemanagerCreateGameRoomRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 ServerGamemanagerCreateGameRoomRsp::groupid() const {
  return groupid_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 3;
inline bool ServerGamemanagerCreateGameRoomRsp::has_gateresid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_gateresid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 ServerGamemanagerCreateGameRoomRsp::gateresid() const {
  return gateresid_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 4;
inline bool ServerGamemanagerCreateGameRoomRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 ServerGamemanagerCreateGameRoomRsp::clientid() const {
  return clientid_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 game = 5;
inline bool ServerGamemanagerCreateGameRoomRsp::has_game() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_game() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_game() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 ServerGamemanagerCreateGameRoomRsp::game() const {
  return game_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// required uint64 serverid = 6;
inline bool ServerGamemanagerCreateGameRoomRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::uint64 ServerGamemanagerCreateGameRoomRsp::serverid() const {
  return serverid_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_serverid(::google::protobuf::uint64 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional int32 roomid = 7;
inline bool ServerGamemanagerCreateGameRoomRsp::has_roomid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_roomid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 ServerGamemanagerCreateGameRoomRsp::roomid() const {
  return roomid_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional string password = 8;
inline bool ServerGamemanagerCreateGameRoomRsp::has_password() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_password() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_password() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& ServerGamemanagerCreateGameRoomRsp::password() const {
  return *password_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void ServerGamemanagerCreateGameRoomRsp::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void ServerGamemanagerCreateGameRoomRsp::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerGamemanagerCreateGameRoomRsp::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* ServerGamemanagerCreateGameRoomRsp::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerGamemanagerCreateGameRoomRsp::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 gameid = 9;
inline bool ServerGamemanagerCreateGameRoomRsp::has_gameid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_has_gameid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ServerGamemanagerCreateGameRoomRsp::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 ServerGamemanagerCreateGameRoomRsp::gameid() const {
  return gameid_;
}
inline void ServerGamemanagerCreateGameRoomRsp::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamemanagerproto
}  // namespace sglib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gamemanager_2eproto__INCLUDED
