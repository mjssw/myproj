// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: group.proto

#ifndef PROTOBUF_group_2eproto__INCLUDED
#define PROTOBUF_group_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "public.pb.h"
// @@protoc_insertion_point(includes)

namespace sglib {
namespace groupproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_group_2eproto();
void protobuf_AssignDesc_group_2eproto();
void protobuf_ShutdownFile_group_2eproto();

class CSGroupUserLoginReq;
class SCGroupUserLoginRsp;
class SCGroupListUpdate;
class SCGroupInfoUpdate;
class CSGroupCreateReq;
class SCGroupCreateRsp;
class CSGroupSearchReq;
class SCGroupSearchRsp;
class CSGroupJoinReq;
class SCGroupJoinRsp;
class CSGroupAddMemberReq;
class SCGroupAddMemberRsp;
class SCGroupAskJoinNtf;
class CSGroupAgreeJoinReq;
class SCGroupMemberJoinNtf;
class CSGroupLeaveReq;
class SCGroupLeaveRsp;
class SCGroupMemberLeaveNtf;
class CSGroupDeleteReq;
class SCGroupDeleteRsp;
class SCGroupDeleteNtf;
class CSGroupMessageReq;
class SCGroupMessageNtf;
class SCGroupMemberOnlineNtf;
class SCGroupMemberOfflineNtf;
class CSGroupCreateGameRoomReq;
class SCGroupCreateGameRoomRsp;
class SCGroupCreateGameRoomNtf;
class CSGroupMessageHistoryReq;
class GroupMessage;
class SCGroupMessageHistoryRsp;
class GroupGateAddGroupNtf;
class GroupGateDelGroupNtf;
class GroupGroupmanagerGateCloseNtf;
class GroupmanagerCenterGateCloseNtf;
class GroupGroupmanagerDynamicStartNtf;
class GroupmanagerGroupDynamicServerStartNtf;
class GroupmanagerCenterGroupCloseNtf;
class GroupGroupmanagerReportStatusInfo;
class GroupmanagerCenterReportGroupGateInfo;
class GroupGroupmanagerUserLoginNtf;
class GroupGroupmanagerUserLogoutNtf;
class GroupGroupmanageCreateGroupReq;
class GroupmanageGroupCreateGroupNtf;
class GroupGroupmanagerCreateGroupResult;
class GroupmanagerGroupCreateGroupRsp;
class GroupGroupmanagerAddMemberToGroupReq;
class GroupmanagerGroupAddMemberToGroupRsp;
class GroupGroupmanagerForAgreeJoinAskInfoReq;
class GroupmanagerGroupForAgreeJoinAskInfoRsp;
class GroupmanagerGroupLoadGroupNtf;
class GroupGroupmanagerLoadGroupResult;
class GroupmanagerGroupMemberOnlineNtf;
class GroupmanagerGroupMemberOfflineNtf;
class GroupGroupmanagerMemberLeaveNtf;
class GroupGroupmanagerGroupDeleteNtf;
class GroupGroupmanagerCreateGameRoomReq;
class GroupmanagerGroupCreateGameRoomRsp;
class GroupmanagerGamemanagerCreateGameRoomReq;
class GamemanagerGroupmanagerCreateGameRoomRsp;
class GroupGateLoginSuccessNtf;
class GroupGroupmanagerJoinGroupReq;
class GroupmanagerGroupJoinGroupRsp;

// ===================================================================

class CSGroupUserLoginReq : public ::google::protobuf::Message {
 public:
  CSGroupUserLoginReq();
  virtual ~CSGroupUserLoginReq();

  CSGroupUserLoginReq(const CSGroupUserLoginReq& from);

  inline CSGroupUserLoginReq& operator=(const CSGroupUserLoginReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupUserLoginReq& default_instance();

  void Swap(CSGroupUserLoginReq* other);

  // implements Message ----------------------------------------------

  CSGroupUserLoginReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupUserLoginReq& from);
  void MergeFrom(const CSGroupUserLoginReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string token = 2;
  inline bool has_token() const;
  inline void clear_token();
  static const int kTokenFieldNumber = 2;
  inline const ::std::string& token() const;
  inline void set_token(const ::std::string& value);
  inline void set_token(const char* value);
  inline void set_token(const char* value, size_t size);
  inline ::std::string* mutable_token();
  inline ::std::string* release_token();
  inline void set_allocated_token(::std::string* token);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupUserLoginReq)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_token();
  inline void clear_has_token();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* token_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupUserLoginReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupUserLoginRsp : public ::google::protobuf::Message {
 public:
  SCGroupUserLoginRsp();
  virtual ~SCGroupUserLoginRsp();

  SCGroupUserLoginRsp(const SCGroupUserLoginRsp& from);

  inline SCGroupUserLoginRsp& operator=(const SCGroupUserLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupUserLoginRsp& default_instance();

  void Swap(SCGroupUserLoginRsp* other);

  // implements Message ----------------------------------------------

  SCGroupUserLoginRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupUserLoginRsp& from);
  void MergeFrom(const SCGroupUserLoginRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupUserLoginRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupUserLoginRsp* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupListUpdate : public ::google::protobuf::Message {
 public:
  SCGroupListUpdate();
  virtual ~SCGroupListUpdate();

  SCGroupListUpdate(const SCGroupListUpdate& from);

  inline SCGroupListUpdate& operator=(const SCGroupListUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupListUpdate& default_instance();

  void Swap(SCGroupListUpdate* other);

  // implements Message ----------------------------------------------

  SCGroupListUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupListUpdate& from);
  void MergeFrom(const SCGroupListUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sglib.publicproto.GroupInfo groups = 1;
  inline int groups_size() const;
  inline void clear_groups();
  static const int kGroupsFieldNumber = 1;
  inline const ::sglib::publicproto::GroupInfo& groups(int index) const;
  inline ::sglib::publicproto::GroupInfo* mutable_groups(int index);
  inline ::sglib::publicproto::GroupInfo* add_groups();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupInfo >&
      groups() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupInfo >*
      mutable_groups();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupListUpdate)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupInfo > groups_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupListUpdate* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupInfoUpdate : public ::google::protobuf::Message {
 public:
  SCGroupInfoUpdate();
  virtual ~SCGroupInfoUpdate();

  SCGroupInfoUpdate(const SCGroupInfoUpdate& from);

  inline SCGroupInfoUpdate& operator=(const SCGroupInfoUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupInfoUpdate& default_instance();

  void Swap(SCGroupInfoUpdate* other);

  // implements Message ----------------------------------------------

  SCGroupInfoUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupInfoUpdate& from);
  void MergeFrom(const SCGroupInfoUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // repeated .sglib.publicproto.GroupMemberInfo members = 2;
  inline int members_size() const;
  inline void clear_members();
  static const int kMembersFieldNumber = 2;
  inline const ::sglib::publicproto::GroupMemberInfo& members(int index) const;
  inline ::sglib::publicproto::GroupMemberInfo* mutable_members(int index);
  inline ::sglib::publicproto::GroupMemberInfo* add_members();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberInfo >&
      members() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberInfo >*
      mutable_members();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupInfoUpdate)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberInfo > members_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupInfoUpdate* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupCreateReq : public ::google::protobuf::Message {
 public:
  CSGroupCreateReq();
  virtual ~CSGroupCreateReq();

  CSGroupCreateReq(const CSGroupCreateReq& from);

  inline CSGroupCreateReq& operator=(const CSGroupCreateReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupCreateReq& default_instance();

  void Swap(CSGroupCreateReq* other);

  // implements Message ----------------------------------------------

  CSGroupCreateReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupCreateReq& from);
  void MergeFrom(const CSGroupCreateReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string head = 2;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 2;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupCreateReq)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupCreateReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupCreateRsp : public ::google::protobuf::Message {
 public:
  SCGroupCreateRsp();
  virtual ~SCGroupCreateRsp();

  SCGroupCreateRsp(const SCGroupCreateRsp& from);

  inline SCGroupCreateRsp& operator=(const SCGroupCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupCreateRsp& default_instance();

  void Swap(SCGroupCreateRsp* other);

  // implements Message ----------------------------------------------

  SCGroupCreateRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupCreateRsp& from);
  void MergeFrom(const SCGroupCreateRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string head = 3;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 3;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional uint64 groupid = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 4;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupCreateRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupCreateRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupSearchReq : public ::google::protobuf::Message {
 public:
  CSGroupSearchReq();
  virtual ~CSGroupSearchReq();

  CSGroupSearchReq(const CSGroupSearchReq& from);

  inline CSGroupSearchReq& operator=(const CSGroupSearchReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupSearchReq& default_instance();

  void Swap(CSGroupSearchReq* other);

  // implements Message ----------------------------------------------

  CSGroupSearchReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupSearchReq& from);
  void MergeFrom(const CSGroupSearchReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupSearchReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupSearchReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupSearchRsp : public ::google::protobuf::Message {
 public:
  SCGroupSearchRsp();
  virtual ~SCGroupSearchRsp();

  SCGroupSearchRsp(const SCGroupSearchRsp& from);

  inline SCGroupSearchRsp& operator=(const SCGroupSearchRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupSearchRsp& default_instance();

  void Swap(SCGroupSearchRsp* other);

  // implements Message ----------------------------------------------

  SCGroupSearchRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupSearchRsp& from);
  void MergeFrom(const SCGroupSearchRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // optional .sglib.publicproto.GroupInfo group = 2;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 2;
  inline const ::sglib::publicproto::GroupInfo& group() const;
  inline ::sglib::publicproto::GroupInfo* mutable_group();
  inline ::sglib::publicproto::GroupInfo* release_group();
  inline void set_allocated_group(::sglib::publicproto::GroupInfo* group);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupSearchRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::sglib::publicproto::GroupInfo* group_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupSearchRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupJoinReq : public ::google::protobuf::Message {
 public:
  CSGroupJoinReq();
  virtual ~CSGroupJoinReq();

  CSGroupJoinReq(const CSGroupJoinReq& from);

  inline CSGroupJoinReq& operator=(const CSGroupJoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupJoinReq& default_instance();

  void Swap(CSGroupJoinReq* other);

  // implements Message ----------------------------------------------

  CSGroupJoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupJoinReq& from);
  void MergeFrom(const CSGroupJoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupJoinReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupJoinReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupJoinRsp : public ::google::protobuf::Message {
 public:
  SCGroupJoinRsp();
  virtual ~SCGroupJoinRsp();

  SCGroupJoinRsp(const SCGroupJoinRsp& from);

  inline SCGroupJoinRsp& operator=(const SCGroupJoinRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupJoinRsp& default_instance();

  void Swap(SCGroupJoinRsp* other);

  // implements Message ----------------------------------------------

  SCGroupJoinRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupJoinRsp& from);
  void MergeFrom(const SCGroupJoinRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupJoinRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupJoinRsp* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupAddMemberReq : public ::google::protobuf::Message {
 public:
  CSGroupAddMemberReq();
  virtual ~CSGroupAddMemberReq();

  CSGroupAddMemberReq(const CSGroupAddMemberReq& from);

  inline CSGroupAddMemberReq& operator=(const CSGroupAddMemberReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupAddMemberReq& default_instance();

  void Swap(CSGroupAddMemberReq* other);

  // implements Message ----------------------------------------------

  CSGroupAddMemberReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupAddMemberReq& from);
  void MergeFrom(const CSGroupAddMemberReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // repeated string users = 2;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 2;
  inline const ::std::string& users(int index) const;
  inline ::std::string* mutable_users(int index);
  inline void set_users(int index, const ::std::string& value);
  inline void set_users(int index, const char* value);
  inline void set_users(int index, const char* value, size_t size);
  inline ::std::string* add_users();
  inline void add_users(const ::std::string& value);
  inline void add_users(const char* value);
  inline void add_users(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& users() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_users();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupAddMemberReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> users_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupAddMemberReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupAddMemberRsp : public ::google::protobuf::Message {
 public:
  SCGroupAddMemberRsp();
  virtual ~SCGroupAddMemberRsp();

  SCGroupAddMemberRsp(const SCGroupAddMemberRsp& from);

  inline SCGroupAddMemberRsp& operator=(const SCGroupAddMemberRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupAddMemberRsp& default_instance();

  void Swap(SCGroupAddMemberRsp* other);

  // implements Message ----------------------------------------------

  SCGroupAddMemberRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupAddMemberRsp& from);
  void MergeFrom(const SCGroupAddMemberRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupAddMemberRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupAddMemberRsp* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupAskJoinNtf : public ::google::protobuf::Message {
 public:
  SCGroupAskJoinNtf();
  virtual ~SCGroupAskJoinNtf();

  SCGroupAskJoinNtf(const SCGroupAskJoinNtf& from);

  inline SCGroupAskJoinNtf& operator=(const SCGroupAskJoinNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupAskJoinNtf& default_instance();

  void Swap(SCGroupAskJoinNtf* other);

  // implements Message ----------------------------------------------

  SCGroupAskJoinNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupAskJoinNtf& from);
  void MergeFrom(const SCGroupAskJoinNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .sglib.publicproto.GroupInfo group = 1;
  inline bool has_group() const;
  inline void clear_group();
  static const int kGroupFieldNumber = 1;
  inline const ::sglib::publicproto::GroupInfo& group() const;
  inline ::sglib::publicproto::GroupInfo* mutable_group();
  inline ::sglib::publicproto::GroupInfo* release_group();
  inline void set_allocated_group(::sglib::publicproto::GroupInfo* group);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupAskJoinNtf)
 private:
  inline void set_has_group();
  inline void clear_has_group();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::sglib::publicproto::GroupInfo* group_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupAskJoinNtf* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupAgreeJoinReq : public ::google::protobuf::Message {
 public:
  CSGroupAgreeJoinReq();
  virtual ~CSGroupAgreeJoinReq();

  CSGroupAgreeJoinReq(const CSGroupAgreeJoinReq& from);

  inline CSGroupAgreeJoinReq& operator=(const CSGroupAgreeJoinReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupAgreeJoinReq& default_instance();

  void Swap(CSGroupAgreeJoinReq* other);

  // implements Message ----------------------------------------------

  CSGroupAgreeJoinReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupAgreeJoinReq& from);
  void MergeFrom(const CSGroupAgreeJoinReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupAgreeJoinReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupAgreeJoinReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupMemberJoinNtf : public ::google::protobuf::Message {
 public:
  SCGroupMemberJoinNtf();
  virtual ~SCGroupMemberJoinNtf();

  SCGroupMemberJoinNtf(const SCGroupMemberJoinNtf& from);

  inline SCGroupMemberJoinNtf& operator=(const SCGroupMemberJoinNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupMemberJoinNtf& default_instance();

  void Swap(SCGroupMemberJoinNtf* other);

  // implements Message ----------------------------------------------

  SCGroupMemberJoinNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupMemberJoinNtf& from);
  void MergeFrom(const SCGroupMemberJoinNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required .sglib.publicproto.GroupMemberInfo member = 2;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::sglib::publicproto::GroupMemberInfo& member() const;
  inline ::sglib::publicproto::GroupMemberInfo* mutable_member();
  inline ::sglib::publicproto::GroupMemberInfo* release_member();
  inline void set_allocated_member(::sglib::publicproto::GroupMemberInfo* member);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupMemberJoinNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_member();
  inline void clear_has_member();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::sglib::publicproto::GroupMemberInfo* member_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupMemberJoinNtf* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupLeaveReq : public ::google::protobuf::Message {
 public:
  CSGroupLeaveReq();
  virtual ~CSGroupLeaveReq();

  CSGroupLeaveReq(const CSGroupLeaveReq& from);

  inline CSGroupLeaveReq& operator=(const CSGroupLeaveReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupLeaveReq& default_instance();

  void Swap(CSGroupLeaveReq* other);

  // implements Message ----------------------------------------------

  CSGroupLeaveReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupLeaveReq& from);
  void MergeFrom(const CSGroupLeaveReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupLeaveReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupLeaveReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupLeaveRsp : public ::google::protobuf::Message {
 public:
  SCGroupLeaveRsp();
  virtual ~SCGroupLeaveRsp();

  SCGroupLeaveRsp(const SCGroupLeaveRsp& from);

  inline SCGroupLeaveRsp& operator=(const SCGroupLeaveRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupLeaveRsp& default_instance();

  void Swap(SCGroupLeaveRsp* other);

  // implements Message ----------------------------------------------

  SCGroupLeaveRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupLeaveRsp& from);
  void MergeFrom(const SCGroupLeaveRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupLeaveRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupLeaveRsp* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupMemberLeaveNtf : public ::google::protobuf::Message {
 public:
  SCGroupMemberLeaveNtf();
  virtual ~SCGroupMemberLeaveNtf();

  SCGroupMemberLeaveNtf(const SCGroupMemberLeaveNtf& from);

  inline SCGroupMemberLeaveNtf& operator=(const SCGroupMemberLeaveNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupMemberLeaveNtf& default_instance();

  void Swap(SCGroupMemberLeaveNtf* other);

  // implements Message ----------------------------------------------

  SCGroupMemberLeaveNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupMemberLeaveNtf& from);
  void MergeFrom(const SCGroupMemberLeaveNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupMemberLeaveNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::std::string* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupMemberLeaveNtf* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupDeleteReq : public ::google::protobuf::Message {
 public:
  CSGroupDeleteReq();
  virtual ~CSGroupDeleteReq();

  CSGroupDeleteReq(const CSGroupDeleteReq& from);

  inline CSGroupDeleteReq& operator=(const CSGroupDeleteReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupDeleteReq& default_instance();

  void Swap(CSGroupDeleteReq* other);

  // implements Message ----------------------------------------------

  CSGroupDeleteReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupDeleteReq& from);
  void MergeFrom(const CSGroupDeleteReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupDeleteReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupDeleteReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupDeleteRsp : public ::google::protobuf::Message {
 public:
  SCGroupDeleteRsp();
  virtual ~SCGroupDeleteRsp();

  SCGroupDeleteRsp(const SCGroupDeleteRsp& from);

  inline SCGroupDeleteRsp& operator=(const SCGroupDeleteRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupDeleteRsp& default_instance();

  void Swap(SCGroupDeleteRsp* other);

  // implements Message ----------------------------------------------

  SCGroupDeleteRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupDeleteRsp& from);
  void MergeFrom(const SCGroupDeleteRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupDeleteRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupDeleteRsp* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupDeleteNtf : public ::google::protobuf::Message {
 public:
  SCGroupDeleteNtf();
  virtual ~SCGroupDeleteNtf();

  SCGroupDeleteNtf(const SCGroupDeleteNtf& from);

  inline SCGroupDeleteNtf& operator=(const SCGroupDeleteNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupDeleteNtf& default_instance();

  void Swap(SCGroupDeleteNtf* other);

  // implements Message ----------------------------------------------

  SCGroupDeleteNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupDeleteNtf& from);
  void MergeFrom(const SCGroupDeleteNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupDeleteNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupDeleteNtf* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupMessageReq : public ::google::protobuf::Message {
 public:
  CSGroupMessageReq();
  virtual ~CSGroupMessageReq();

  CSGroupMessageReq(const CSGroupMessageReq& from);

  inline CSGroupMessageReq& operator=(const CSGroupMessageReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupMessageReq& default_instance();

  void Swap(CSGroupMessageReq* other);

  // implements Message ----------------------------------------------

  CSGroupMessageReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupMessageReq& from);
  void MergeFrom(const CSGroupMessageReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupMessageReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupMessageReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupMessageNtf : public ::google::protobuf::Message {
 public:
  SCGroupMessageNtf();
  virtual ~SCGroupMessageNtf();

  SCGroupMessageNtf(const SCGroupMessageNtf& from);

  inline SCGroupMessageNtf& operator=(const SCGroupMessageNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupMessageNtf& default_instance();

  void Swap(SCGroupMessageNtf* other);

  // implements Message ----------------------------------------------

  SCGroupMessageNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupMessageNtf& from);
  void MergeFrom(const SCGroupMessageNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // required string sender = 3;
  inline bool has_sender() const;
  inline void clear_sender();
  static const int kSenderFieldNumber = 3;
  inline const ::std::string& sender() const;
  inline void set_sender(const ::std::string& value);
  inline void set_sender(const char* value);
  inline void set_sender(const char* value, size_t size);
  inline ::std::string* mutable_sender();
  inline ::std::string* release_sender();
  inline void set_allocated_sender(::std::string* sender);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupMessageNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_sender();
  inline void clear_has_sender();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::std::string* content_;
  ::std::string* sender_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupMessageNtf* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupMemberOnlineNtf : public ::google::protobuf::Message {
 public:
  SCGroupMemberOnlineNtf();
  virtual ~SCGroupMemberOnlineNtf();

  SCGroupMemberOnlineNtf(const SCGroupMemberOnlineNtf& from);

  inline SCGroupMemberOnlineNtf& operator=(const SCGroupMemberOnlineNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupMemberOnlineNtf& default_instance();

  void Swap(SCGroupMemberOnlineNtf* other);

  // implements Message ----------------------------------------------

  SCGroupMemberOnlineNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupMemberOnlineNtf& from);
  void MergeFrom(const SCGroupMemberOnlineNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupMemberOnlineNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::std::string* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupMemberOnlineNtf* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupMemberOfflineNtf : public ::google::protobuf::Message {
 public:
  SCGroupMemberOfflineNtf();
  virtual ~SCGroupMemberOfflineNtf();

  SCGroupMemberOfflineNtf(const SCGroupMemberOfflineNtf& from);

  inline SCGroupMemberOfflineNtf& operator=(const SCGroupMemberOfflineNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupMemberOfflineNtf& default_instance();

  void Swap(SCGroupMemberOfflineNtf* other);

  // implements Message ----------------------------------------------

  SCGroupMemberOfflineNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupMemberOfflineNtf& from);
  void MergeFrom(const SCGroupMemberOfflineNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string user = 2;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupMemberOfflineNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::std::string* user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupMemberOfflineNtf* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupCreateGameRoomReq : public ::google::protobuf::Message {
 public:
  CSGroupCreateGameRoomReq();
  virtual ~CSGroupCreateGameRoomReq();

  CSGroupCreateGameRoomReq(const CSGroupCreateGameRoomReq& from);

  inline CSGroupCreateGameRoomReq& operator=(const CSGroupCreateGameRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupCreateGameRoomReq& default_instance();

  void Swap(CSGroupCreateGameRoomReq* other);

  // implements Message ----------------------------------------------

  CSGroupCreateGameRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupCreateGameRoomReq& from);
  void MergeFrom(const CSGroupCreateGameRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 game = 2;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 2;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupCreateGameRoomReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_game();
  inline void clear_has_game();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 game_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupCreateGameRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupCreateGameRoomRsp : public ::google::protobuf::Message {
 public:
  SCGroupCreateGameRoomRsp();
  virtual ~SCGroupCreateGameRoomRsp();

  SCGroupCreateGameRoomRsp(const SCGroupCreateGameRoomRsp& from);

  inline SCGroupCreateGameRoomRsp& operator=(const SCGroupCreateGameRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupCreateGameRoomRsp& default_instance();

  void Swap(SCGroupCreateGameRoomRsp* other);

  // implements Message ----------------------------------------------

  SCGroupCreateGameRoomRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupCreateGameRoomRsp& from);
  void MergeFrom(const SCGroupCreateGameRoomRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 game = 3;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 3;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 roomid = 6;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 6;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional string password = 7;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 7;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupCreateGameRoomRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 game_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 roomid_;
  ::std::string* password_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupCreateGameRoomRsp* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupCreateGameRoomNtf : public ::google::protobuf::Message {
 public:
  SCGroupCreateGameRoomNtf();
  virtual ~SCGroupCreateGameRoomNtf();

  SCGroupCreateGameRoomNtf(const SCGroupCreateGameRoomNtf& from);

  inline SCGroupCreateGameRoomNtf& operator=(const SCGroupCreateGameRoomNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupCreateGameRoomNtf& default_instance();

  void Swap(SCGroupCreateGameRoomNtf* other);

  // implements Message ----------------------------------------------

  SCGroupCreateGameRoomNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupCreateGameRoomNtf& from);
  void MergeFrom(const SCGroupCreateGameRoomNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string creater = 1;
  inline bool has_creater() const;
  inline void clear_creater();
  static const int kCreaterFieldNumber = 1;
  inline const ::std::string& creater() const;
  inline void set_creater(const ::std::string& value);
  inline void set_creater(const char* value);
  inline void set_creater(const char* value, size_t size);
  inline ::std::string* mutable_creater();
  inline ::std::string* release_creater();
  inline void set_allocated_creater(::std::string* creater);

  // required int32 game = 2;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 2;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 roomid = 5;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 5;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional string password = 6;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 6;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // required uint64 groupid = 7;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 7;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupCreateGameRoomNtf)
 private:
  inline void set_has_creater();
  inline void clear_has_creater();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* creater_;
  ::std::string* ip_;
  ::google::protobuf::int32 game_;
  ::google::protobuf::int32 port_;
  ::std::string* password_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupCreateGameRoomNtf* default_instance_;
};
// -------------------------------------------------------------------

class CSGroupMessageHistoryReq : public ::google::protobuf::Message {
 public:
  CSGroupMessageHistoryReq();
  virtual ~CSGroupMessageHistoryReq();

  CSGroupMessageHistoryReq(const CSGroupMessageHistoryReq& from);

  inline CSGroupMessageHistoryReq& operator=(const CSGroupMessageHistoryReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSGroupMessageHistoryReq& default_instance();

  void Swap(CSGroupMessageHistoryReq* other);

  // implements Message ----------------------------------------------

  CSGroupMessageHistoryReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSGroupMessageHistoryReq& from);
  void MergeFrom(const CSGroupMessageHistoryReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int64 idxfrom = 2;
  inline bool has_idxfrom() const;
  inline void clear_idxfrom();
  static const int kIdxfromFieldNumber = 2;
  inline ::google::protobuf::int64 idxfrom() const;
  inline void set_idxfrom(::google::protobuf::int64 value);

  // required int32 limit = 3;
  inline bool has_limit() const;
  inline void clear_limit();
  static const int kLimitFieldNumber = 3;
  inline ::google::protobuf::int32 limit() const;
  inline void set_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.CSGroupMessageHistoryReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_idxfrom();
  inline void clear_has_idxfrom();
  inline void set_has_limit();
  inline void clear_has_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int64 idxfrom_;
  ::google::protobuf::int32 limit_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static CSGroupMessageHistoryReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupMessage : public ::google::protobuf::Message {
 public:
  GroupMessage();
  virtual ~GroupMessage();

  GroupMessage(const GroupMessage& from);

  inline GroupMessage& operator=(const GroupMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupMessage& default_instance();

  void Swap(GroupMessage* other);

  // implements Message ----------------------------------------------

  GroupMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupMessage& from);
  void MergeFrom(const GroupMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string user = 1;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // required int32 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // required int64 idx = 4;
  inline bool has_idx() const;
  inline void clear_idx();
  static const int kIdxFieldNumber = 4;
  inline ::google::protobuf::int64 idx() const;
  inline void set_idx(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupMessage)
 private:
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_idx();
  inline void clear_has_idx();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* user_;
  ::std::string* msg_;
  ::google::protobuf::int64 idx_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupMessage* default_instance_;
};
// -------------------------------------------------------------------

class SCGroupMessageHistoryRsp : public ::google::protobuf::Message {
 public:
  SCGroupMessageHistoryRsp();
  virtual ~SCGroupMessageHistoryRsp();

  SCGroupMessageHistoryRsp(const SCGroupMessageHistoryRsp& from);

  inline SCGroupMessageHistoryRsp& operator=(const SCGroupMessageHistoryRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SCGroupMessageHistoryRsp& default_instance();

  void Swap(SCGroupMessageHistoryRsp* other);

  // implements Message ----------------------------------------------

  SCGroupMessageHistoryRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SCGroupMessageHistoryRsp& from);
  void MergeFrom(const SCGroupMessageHistoryRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sglib.groupproto.GroupMessage messages = 1;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 1;
  inline const ::sglib::groupproto::GroupMessage& messages(int index) const;
  inline ::sglib::groupproto::GroupMessage* mutable_messages(int index);
  inline ::sglib::groupproto::GroupMessage* add_messages();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::groupproto::GroupMessage >&
      messages() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::groupproto::GroupMessage >*
      mutable_messages();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.SCGroupMessageHistoryRsp)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sglib::groupproto::GroupMessage > messages_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static SCGroupMessageHistoryRsp* default_instance_;
};
// -------------------------------------------------------------------

class GroupGateAddGroupNtf : public ::google::protobuf::Message {
 public:
  GroupGateAddGroupNtf();
  virtual ~GroupGateAddGroupNtf();

  GroupGateAddGroupNtf(const GroupGateAddGroupNtf& from);

  inline GroupGateAddGroupNtf& operator=(const GroupGateAddGroupNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGateAddGroupNtf& default_instance();

  void Swap(GroupGateAddGroupNtf* other);

  // implements Message ----------------------------------------------

  GroupGateAddGroupNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGateAddGroupNtf& from);
  void MergeFrom(const GroupGateAddGroupNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGateAddGroupNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGateAddGroupNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGateDelGroupNtf : public ::google::protobuf::Message {
 public:
  GroupGateDelGroupNtf();
  virtual ~GroupGateDelGroupNtf();

  GroupGateDelGroupNtf(const GroupGateDelGroupNtf& from);

  inline GroupGateDelGroupNtf& operator=(const GroupGateDelGroupNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGateDelGroupNtf& default_instance();

  void Swap(GroupGateDelGroupNtf* other);

  // implements Message ----------------------------------------------

  GroupGateDelGroupNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGateDelGroupNtf& from);
  void MergeFrom(const GroupGateDelGroupNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGateDelGroupNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGateDelGroupNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerGateCloseNtf : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerGateCloseNtf();
  virtual ~GroupGroupmanagerGateCloseNtf();

  GroupGroupmanagerGateCloseNtf(const GroupGroupmanagerGateCloseNtf& from);

  inline GroupGroupmanagerGateCloseNtf& operator=(const GroupGroupmanagerGateCloseNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerGateCloseNtf& default_instance();

  void Swap(GroupGroupmanagerGateCloseNtf* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerGateCloseNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerGateCloseNtf& from);
  void MergeFrom(const GroupGroupmanagerGateCloseNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::int32 gateid() const;
  inline void set_gateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerGateCloseNtf)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerGateCloseNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerCenterGateCloseNtf : public ::google::protobuf::Message {
 public:
  GroupmanagerCenterGateCloseNtf();
  virtual ~GroupmanagerCenterGateCloseNtf();

  GroupmanagerCenterGateCloseNtf(const GroupmanagerCenterGateCloseNtf& from);

  inline GroupmanagerCenterGateCloseNtf& operator=(const GroupmanagerCenterGateCloseNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerCenterGateCloseNtf& default_instance();

  void Swap(GroupmanagerCenterGateCloseNtf* other);

  // implements Message ----------------------------------------------

  GroupmanagerCenterGateCloseNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerCenterGateCloseNtf& from);
  void MergeFrom(const GroupmanagerCenterGateCloseNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::int32 gateid() const;
  inline void set_gateid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerCenterGateCloseNtf)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gateid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerCenterGateCloseNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerDynamicStartNtf : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerDynamicStartNtf();
  virtual ~GroupGroupmanagerDynamicStartNtf();

  GroupGroupmanagerDynamicStartNtf(const GroupGroupmanagerDynamicStartNtf& from);

  inline GroupGroupmanagerDynamicStartNtf& operator=(const GroupGroupmanagerDynamicStartNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerDynamicStartNtf& default_instance();

  void Swap(GroupGroupmanagerDynamicStartNtf* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerDynamicStartNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerDynamicStartNtf& from);
  void MergeFrom(const GroupGroupmanagerDynamicStartNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerDynamicStartNtf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerDynamicStartNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupDynamicServerStartNtf : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupDynamicServerStartNtf();
  virtual ~GroupmanagerGroupDynamicServerStartNtf();

  GroupmanagerGroupDynamicServerStartNtf(const GroupmanagerGroupDynamicServerStartNtf& from);

  inline GroupmanagerGroupDynamicServerStartNtf& operator=(const GroupmanagerGroupDynamicServerStartNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupDynamicServerStartNtf& default_instance();

  void Swap(GroupmanagerGroupDynamicServerStartNtf* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupDynamicServerStartNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupDynamicServerStartNtf& from);
  void MergeFrom(const GroupmanagerGroupDynamicServerStartNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupDynamicServerStartNtf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupDynamicServerStartNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerCenterGroupCloseNtf : public ::google::protobuf::Message {
 public:
  GroupmanagerCenterGroupCloseNtf();
  virtual ~GroupmanagerCenterGroupCloseNtf();

  GroupmanagerCenterGroupCloseNtf(const GroupmanagerCenterGroupCloseNtf& from);

  inline GroupmanagerCenterGroupCloseNtf& operator=(const GroupmanagerCenterGroupCloseNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerCenterGroupCloseNtf& default_instance();

  void Swap(GroupmanagerCenterGroupCloseNtf* other);

  // implements Message ----------------------------------------------

  GroupmanagerCenterGroupCloseNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerCenterGroupCloseNtf& from);
  void MergeFrom(const GroupmanagerCenterGroupCloseNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerCenterGroupCloseNtf)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerCenterGroupCloseNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerReportStatusInfo : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerReportStatusInfo();
  virtual ~GroupGroupmanagerReportStatusInfo();

  GroupGroupmanagerReportStatusInfo(const GroupGroupmanagerReportStatusInfo& from);

  inline GroupGroupmanagerReportStatusInfo& operator=(const GroupGroupmanagerReportStatusInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerReportStatusInfo& default_instance();

  void Swap(GroupGroupmanagerReportStatusInfo* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerReportStatusInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerReportStatusInfo& from);
  void MergeFrom(const GroupGroupmanagerReportStatusInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 serverid = 1;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 1;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required int32 totalgroup = 2;
  inline bool has_totalgroup() const;
  inline void clear_totalgroup();
  static const int kTotalgroupFieldNumber = 2;
  inline ::google::protobuf::int32 totalgroup() const;
  inline void set_totalgroup(::google::protobuf::int32 value);

  // required int32 totalmember = 3;
  inline bool has_totalmember() const;
  inline void clear_totalmember();
  static const int kTotalmemberFieldNumber = 3;
  inline ::google::protobuf::int32 totalmember() const;
  inline void set_totalmember(::google::protobuf::int32 value);

  // repeated .sglib.publicproto.GateServerInfo gateservers = 4;
  inline int gateservers_size() const;
  inline void clear_gateservers();
  static const int kGateserversFieldNumber = 4;
  inline const ::sglib::publicproto::GateServerInfo& gateservers(int index) const;
  inline ::sglib::publicproto::GateServerInfo* mutable_gateservers(int index);
  inline ::sglib::publicproto::GateServerInfo* add_gateservers();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
      gateservers() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
      mutable_gateservers();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerReportStatusInfo)
 private:
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_totalgroup();
  inline void clear_has_totalgroup();
  inline void set_has_totalmember();
  inline void clear_has_totalmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 serverid_;
  ::google::protobuf::int32 totalgroup_;
  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo > gateservers_;
  ::google::protobuf::int32 totalmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerReportStatusInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerCenterReportGroupGateInfo : public ::google::protobuf::Message {
 public:
  GroupmanagerCenterReportGroupGateInfo();
  virtual ~GroupmanagerCenterReportGroupGateInfo();

  GroupmanagerCenterReportGroupGateInfo(const GroupmanagerCenterReportGroupGateInfo& from);

  inline GroupmanagerCenterReportGroupGateInfo& operator=(const GroupmanagerCenterReportGroupGateInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerCenterReportGroupGateInfo& default_instance();

  void Swap(GroupmanagerCenterReportGroupGateInfo* other);

  // implements Message ----------------------------------------------

  GroupmanagerCenterReportGroupGateInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerCenterReportGroupGateInfo& from);
  void MergeFrom(const GroupmanagerCenterReportGroupGateInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sglib.publicproto.GateServerInfo gateservers = 1;
  inline int gateservers_size() const;
  inline void clear_gateservers();
  static const int kGateserversFieldNumber = 1;
  inline const ::sglib::publicproto::GateServerInfo& gateservers(int index) const;
  inline ::sglib::publicproto::GateServerInfo* mutable_gateservers(int index);
  inline ::sglib::publicproto::GateServerInfo* add_gateservers();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
      gateservers() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
      mutable_gateservers();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerCenterReportGroupGateInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo > gateservers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerCenterReportGroupGateInfo* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerUserLoginNtf : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerUserLoginNtf();
  virtual ~GroupGroupmanagerUserLoginNtf();

  GroupGroupmanagerUserLoginNtf(const GroupGroupmanagerUserLoginNtf& from);

  inline GroupGroupmanagerUserLoginNtf& operator=(const GroupGroupmanagerUserLoginNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerUserLoginNtf& default_instance();

  void Swap(GroupGroupmanagerUserLoginNtf* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerUserLoginNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerUserLoginNtf& from);
  void MergeFrom(const GroupGroupmanagerUserLoginNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gateresid = 1;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 1;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 2;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 3;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 3;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerUserLoginNtf)
 private:
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerUserLoginNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerUserLogoutNtf : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerUserLogoutNtf();
  virtual ~GroupGroupmanagerUserLogoutNtf();

  GroupGroupmanagerUserLogoutNtf(const GroupGroupmanagerUserLogoutNtf& from);

  inline GroupGroupmanagerUserLogoutNtf& operator=(const GroupGroupmanagerUserLogoutNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerUserLogoutNtf& default_instance();

  void Swap(GroupGroupmanagerUserLogoutNtf* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerUserLogoutNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerUserLogoutNtf& from);
  void MergeFrom(const GroupGroupmanagerUserLogoutNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gateresid = 1;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 1;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 2;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerUserLogoutNtf)
 private:
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerUserLogoutNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanageCreateGroupReq : public ::google::protobuf::Message {
 public:
  GroupGroupmanageCreateGroupReq();
  virtual ~GroupGroupmanageCreateGroupReq();

  GroupGroupmanageCreateGroupReq(const GroupGroupmanageCreateGroupReq& from);

  inline GroupGroupmanageCreateGroupReq& operator=(const GroupGroupmanageCreateGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanageCreateGroupReq& default_instance();

  void Swap(GroupGroupmanageCreateGroupReq* other);

  // implements Message ----------------------------------------------

  GroupGroupmanageCreateGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanageCreateGroupReq& from);
  void MergeFrom(const GroupGroupmanageCreateGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string head = 5;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 5;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanageCreateGroupReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* name_;
  ::std::string* head_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanageCreateGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanageGroupCreateGroupNtf : public ::google::protobuf::Message {
 public:
  GroupmanageGroupCreateGroupNtf();
  virtual ~GroupmanageGroupCreateGroupNtf();

  GroupmanageGroupCreateGroupNtf(const GroupmanageGroupCreateGroupNtf& from);

  inline GroupmanageGroupCreateGroupNtf& operator=(const GroupmanageGroupCreateGroupNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanageGroupCreateGroupNtf& default_instance();

  void Swap(GroupmanageGroupCreateGroupNtf* other);

  // implements Message ----------------------------------------------

  GroupmanageGroupCreateGroupNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanageGroupCreateGroupNtf& from);
  void MergeFrom(const GroupmanageGroupCreateGroupNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 groupid = 6;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 6;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string head = 7;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 7;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // required uint64 groupserverid = 8;
  inline bool has_groupserverid() const;
  inline void clear_groupserverid();
  static const int kGroupserveridFieldNumber = 8;
  inline ::google::protobuf::uint64 groupserverid() const;
  inline void set_groupserverid(::google::protobuf::uint64 value);

  // required string username = 9;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 9;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string userhead = 10;
  inline bool has_userhead() const;
  inline void clear_userhead();
  static const int kUserheadFieldNumber = 10;
  inline const ::std::string& userhead() const;
  inline void set_userhead(const ::std::string& value);
  inline void set_userhead(const char* value);
  inline void set_userhead(const char* value, size_t size);
  inline ::std::string* mutable_userhead();
  inline ::std::string* release_userhead();
  inline void set_allocated_userhead(::std::string* userhead);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanageGroupCreateGroupNtf)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_groupserverid();
  inline void clear_has_groupserverid();
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_userhead();
  inline void clear_has_userhead();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::std::string* name_;
  ::google::protobuf::uint64 groupid_;
  ::std::string* head_;
  ::google::protobuf::uint64 groupserverid_;
  ::std::string* username_;
  ::std::string* userhead_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanageGroupCreateGroupNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerCreateGroupResult : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerCreateGroupResult();
  virtual ~GroupGroupmanagerCreateGroupResult();

  GroupGroupmanagerCreateGroupResult(const GroupGroupmanagerCreateGroupResult& from);

  inline GroupGroupmanagerCreateGroupResult& operator=(const GroupGroupmanagerCreateGroupResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerCreateGroupResult& default_instance();

  void Swap(GroupGroupmanagerCreateGroupResult* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerCreateGroupResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerCreateGroupResult& from);
  void MergeFrom(const GroupGroupmanagerCreateGroupResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required string name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required uint64 groupid = 6;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 6;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string head = 7;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 7;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // required uint64 groupserverid = 8;
  inline bool has_groupserverid() const;
  inline void clear_groupserverid();
  static const int kGroupserveridFieldNumber = 8;
  inline ::google::protobuf::uint64 groupserverid() const;
  inline void set_groupserverid(::google::protobuf::uint64 value);

  // optional int32 serverid = 9;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 9;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerCreateGroupResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_groupserverid();
  inline void clear_has_groupserverid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::std::string* name_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::uint64 groupid_;
  ::std::string* head_;
  ::google::protobuf::uint64 groupserverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerCreateGroupResult* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupCreateGroupRsp : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupCreateGroupRsp();
  virtual ~GroupmanagerGroupCreateGroupRsp();

  GroupmanagerGroupCreateGroupRsp(const GroupmanagerGroupCreateGroupRsp& from);

  inline GroupmanagerGroupCreateGroupRsp& operator=(const GroupmanagerGroupCreateGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupCreateGroupRsp& default_instance();

  void Swap(GroupmanagerGroupCreateGroupRsp* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupCreateGroupRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupCreateGroupRsp& from);
  void MergeFrom(const GroupmanagerGroupCreateGroupRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 gateid = 2;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 2;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint64 groupid = 5;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 5;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required string head = 6;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 6;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // optional int32 serverid = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 7;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupCreateGroupRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_head();
  inline void clear_has_head();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* name_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 serverid_;
  ::google::protobuf::uint64 groupid_;
  ::std::string* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupCreateGroupRsp* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerAddMemberToGroupReq : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerAddMemberToGroupReq();
  virtual ~GroupGroupmanagerAddMemberToGroupReq();

  GroupGroupmanagerAddMemberToGroupReq(const GroupGroupmanagerAddMemberToGroupReq& from);

  inline GroupGroupmanagerAddMemberToGroupReq& operator=(const GroupGroupmanagerAddMemberToGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerAddMemberToGroupReq& default_instance();

  void Swap(GroupGroupmanagerAddMemberToGroupReq* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerAddMemberToGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerAddMemberToGroupReq& from);
  void MergeFrom(const GroupGroupmanagerAddMemberToGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required uint64 groupid = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 4;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // repeated string users = 5;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 5;
  inline const ::std::string& users(int index) const;
  inline ::std::string* mutable_users(int index);
  inline void set_users(int index, const ::std::string& value);
  inline void set_users(int index, const char* value);
  inline void set_users(int index, const char* value, size_t size);
  inline ::std::string* add_users();
  inline void add_users(const ::std::string& value);
  inline void add_users(const char* value);
  inline void add_users(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& users() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_users();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerAddMemberToGroupReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> users_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerAddMemberToGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupAddMemberToGroupRsp : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupAddMemberToGroupRsp();
  virtual ~GroupmanagerGroupAddMemberToGroupRsp();

  GroupmanagerGroupAddMemberToGroupRsp(const GroupmanagerGroupAddMemberToGroupRsp& from);

  inline GroupmanagerGroupAddMemberToGroupRsp& operator=(const GroupmanagerGroupAddMemberToGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupAddMemberToGroupRsp& default_instance();

  void Swap(GroupmanagerGroupAddMemberToGroupRsp* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupAddMemberToGroupRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupAddMemberToGroupRsp& from);
  void MergeFrom(const GroupmanagerGroupAddMemberToGroupRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::uint64 gateid() const;
  inline void set_gateid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required uint64 groupid = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 4;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // repeated .sglib.publicproto.GroupMemberPosInfo users = 5;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 5;
  inline const ::sglib::publicproto::GroupMemberPosInfo& users(int index) const;
  inline ::sglib::publicproto::GroupMemberPosInfo* mutable_users(int index);
  inline ::sglib::publicproto::GroupMemberPosInfo* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberPosInfo >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberPosInfo >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupAddMemberToGroupRsp)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 gateid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberPosInfo > users_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupAddMemberToGroupRsp* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerForAgreeJoinAskInfoReq : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerForAgreeJoinAskInfoReq();
  virtual ~GroupGroupmanagerForAgreeJoinAskInfoReq();

  GroupGroupmanagerForAgreeJoinAskInfoReq(const GroupGroupmanagerForAgreeJoinAskInfoReq& from);

  inline GroupGroupmanagerForAgreeJoinAskInfoReq& operator=(const GroupGroupmanagerForAgreeJoinAskInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerForAgreeJoinAskInfoReq& default_instance();

  void Swap(GroupGroupmanagerForAgreeJoinAskInfoReq* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerForAgreeJoinAskInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerForAgreeJoinAskInfoReq& from);
  void MergeFrom(const GroupGroupmanagerForAgreeJoinAskInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gateresid = 1;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 1;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 2;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required uint64 groupid = 3;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 3;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerForAgreeJoinAskInfoReq)
 private:
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerForAgreeJoinAskInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupForAgreeJoinAskInfoRsp : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupForAgreeJoinAskInfoRsp();
  virtual ~GroupmanagerGroupForAgreeJoinAskInfoRsp();

  GroupmanagerGroupForAgreeJoinAskInfoRsp(const GroupmanagerGroupForAgreeJoinAskInfoRsp& from);

  inline GroupmanagerGroupForAgreeJoinAskInfoRsp& operator=(const GroupmanagerGroupForAgreeJoinAskInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupForAgreeJoinAskInfoRsp& default_instance();

  void Swap(GroupmanagerGroupForAgreeJoinAskInfoRsp* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupForAgreeJoinAskInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupForAgreeJoinAskInfoRsp& from);
  void MergeFrom(const GroupmanagerGroupForAgreeJoinAskInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required uint64 groupid = 4;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 4;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // optional string user = 5;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 5;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string head = 7;
  inline bool has_head() const;
  inline void clear_head();
  static const int kHeadFieldNumber = 7;
  inline const ::std::string& head() const;
  inline void set_head(const ::std::string& value);
  inline void set_head(const char* value);
  inline void set_head(const char* value, size_t size);
  inline ::std::string* mutable_head();
  inline ::std::string* release_head();
  inline void set_allocated_head(::std::string* head);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupForAgreeJoinAskInfoRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_head();
  inline void clear_has_head();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 groupid_;
  ::std::string* user_;
  ::std::string* name_;
  ::std::string* head_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupForAgreeJoinAskInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupLoadGroupNtf : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupLoadGroupNtf();
  virtual ~GroupmanagerGroupLoadGroupNtf();

  GroupmanagerGroupLoadGroupNtf(const GroupmanagerGroupLoadGroupNtf& from);

  inline GroupmanagerGroupLoadGroupNtf& operator=(const GroupmanagerGroupLoadGroupNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupLoadGroupNtf& default_instance();

  void Swap(GroupmanagerGroupLoadGroupNtf* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupLoadGroupNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupLoadGroupNtf& from);
  void MergeFrom(const GroupmanagerGroupLoadGroupNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupLoadGroupNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupLoadGroupNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerLoadGroupResult : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerLoadGroupResult();
  virtual ~GroupGroupmanagerLoadGroupResult();

  GroupGroupmanagerLoadGroupResult(const GroupGroupmanagerLoadGroupResult& from);

  inline GroupGroupmanagerLoadGroupResult& operator=(const GroupGroupmanagerLoadGroupResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerLoadGroupResult& default_instance();

  void Swap(GroupGroupmanagerLoadGroupResult* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerLoadGroupResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerLoadGroupResult& from);
  void MergeFrom(const GroupGroupmanagerLoadGroupResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // optional int32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // required int32 totalgroup = 5;
  inline bool has_totalgroup() const;
  inline void clear_totalgroup();
  static const int kTotalgroupFieldNumber = 5;
  inline ::google::protobuf::int32 totalgroup() const;
  inline void set_totalgroup(::google::protobuf::int32 value);

  // required int32 totalmember = 6;
  inline bool has_totalmember() const;
  inline void clear_totalmember();
  static const int kTotalmemberFieldNumber = 6;
  inline ::google::protobuf::int32 totalmember() const;
  inline void set_totalmember(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerLoadGroupResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_user();
  inline void clear_has_user();
  inline void set_has_totalgroup();
  inline void clear_has_totalgroup();
  inline void set_has_totalmember();
  inline void clear_has_totalmember();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 serverid_;
  ::std::string* user_;
  ::google::protobuf::int32 totalgroup_;
  ::google::protobuf::int32 totalmember_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerLoadGroupResult* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupMemberOnlineNtf : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupMemberOnlineNtf();
  virtual ~GroupmanagerGroupMemberOnlineNtf();

  GroupmanagerGroupMemberOnlineNtf(const GroupmanagerGroupMemberOnlineNtf& from);

  inline GroupmanagerGroupMemberOnlineNtf& operator=(const GroupmanagerGroupMemberOnlineNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupMemberOnlineNtf& default_instance();

  void Swap(GroupmanagerGroupMemberOnlineNtf* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupMemberOnlineNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupMemberOnlineNtf& from);
  void MergeFrom(const GroupmanagerGroupMemberOnlineNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupMemberOnlineNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupMemberOnlineNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupMemberOfflineNtf : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupMemberOfflineNtf();
  virtual ~GroupmanagerGroupMemberOfflineNtf();

  GroupmanagerGroupMemberOfflineNtf(const GroupmanagerGroupMemberOfflineNtf& from);

  inline GroupmanagerGroupMemberOfflineNtf& operator=(const GroupmanagerGroupMemberOfflineNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupMemberOfflineNtf& default_instance();

  void Swap(GroupmanagerGroupMemberOfflineNtf* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupMemberOfflineNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupMemberOfflineNtf& from);
  void MergeFrom(const GroupmanagerGroupMemberOfflineNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required string user = 4;
  inline bool has_user() const;
  inline void clear_user();
  static const int kUserFieldNumber = 4;
  inline const ::std::string& user() const;
  inline void set_user(const ::std::string& value);
  inline void set_user(const char* value);
  inline void set_user(const char* value, size_t size);
  inline ::std::string* mutable_user();
  inline ::std::string* release_user();
  inline void set_allocated_user(::std::string* user);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupMemberOfflineNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_user();
  inline void clear_has_user();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* user_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupMemberOfflineNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerMemberLeaveNtf : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerMemberLeaveNtf();
  virtual ~GroupGroupmanagerMemberLeaveNtf();

  GroupGroupmanagerMemberLeaveNtf(const GroupGroupmanagerMemberLeaveNtf& from);

  inline GroupGroupmanagerMemberLeaveNtf& operator=(const GroupGroupmanagerMemberLeaveNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerMemberLeaveNtf& default_instance();

  void Swap(GroupGroupmanagerMemberLeaveNtf* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerMemberLeaveNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerMemberLeaveNtf& from);
  void MergeFrom(const GroupGroupmanagerMemberLeaveNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // repeated string user = 2;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 2;
  inline const ::std::string& user(int index) const;
  inline ::std::string* mutable_user(int index);
  inline void set_user(int index, const ::std::string& value);
  inline void set_user(int index, const char* value);
  inline void set_user(int index, const char* value, size_t size);
  inline ::std::string* add_user();
  inline void add_user(const ::std::string& value);
  inline void add_user(const char* value);
  inline void add_user(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& user() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_user();

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerMemberLeaveNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerMemberLeaveNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerGroupDeleteNtf : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerGroupDeleteNtf();
  virtual ~GroupGroupmanagerGroupDeleteNtf();

  GroupGroupmanagerGroupDeleteNtf(const GroupGroupmanagerGroupDeleteNtf& from);

  inline GroupGroupmanagerGroupDeleteNtf& operator=(const GroupGroupmanagerGroupDeleteNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerGroupDeleteNtf& default_instance();

  void Swap(GroupGroupmanagerGroupDeleteNtf* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerGroupDeleteNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerGroupDeleteNtf& from);
  void MergeFrom(const GroupGroupmanagerGroupDeleteNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerGroupDeleteNtf)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerGroupDeleteNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerCreateGameRoomReq : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerCreateGameRoomReq();
  virtual ~GroupGroupmanagerCreateGameRoomReq();

  GroupGroupmanagerCreateGameRoomReq(const GroupGroupmanagerCreateGameRoomReq& from);

  inline GroupGroupmanagerCreateGameRoomReq& operator=(const GroupGroupmanagerCreateGameRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerCreateGameRoomReq& default_instance();

  void Swap(GroupGroupmanagerCreateGameRoomReq* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerCreateGameRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerCreateGameRoomReq& from);
  void MergeFrom(const GroupGroupmanagerCreateGameRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 game = 4;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 4;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerCreateGameRoomReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_game();
  inline void clear_has_game();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::int32 game_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerCreateGameRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupCreateGameRoomRsp : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupCreateGameRoomRsp();
  virtual ~GroupmanagerGroupCreateGameRoomRsp();

  GroupmanagerGroupCreateGameRoomRsp(const GroupmanagerGroupCreateGameRoomRsp& from);

  inline GroupmanagerGroupCreateGameRoomRsp& operator=(const GroupmanagerGroupCreateGameRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupCreateGameRoomRsp& default_instance();

  void Swap(GroupmanagerGroupCreateGameRoomRsp* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupCreateGameRoomRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupCreateGameRoomRsp& from);
  void MergeFrom(const GroupmanagerGroupCreateGameRoomRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 3;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 3;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 4;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 4;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 game = 5;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 5;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // optional string ip = 6;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 6;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 7;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 7;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 roomid = 8;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 8;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional string password = 9;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 9;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupCreateGameRoomRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::uint64 clientid_;
  ::std::string* ip_;
  ::google::protobuf::int32 game_;
  ::google::protobuf::int32 port_;
  ::std::string* password_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupCreateGameRoomRsp* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGamemanagerCreateGameRoomReq : public ::google::protobuf::Message {
 public:
  GroupmanagerGamemanagerCreateGameRoomReq();
  virtual ~GroupmanagerGamemanagerCreateGameRoomReq();

  GroupmanagerGamemanagerCreateGameRoomReq(const GroupmanagerGamemanagerCreateGameRoomReq& from);

  inline GroupmanagerGamemanagerCreateGameRoomReq& operator=(const GroupmanagerGamemanagerCreateGameRoomReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGamemanagerCreateGameRoomReq& default_instance();

  void Swap(GroupmanagerGamemanagerCreateGameRoomReq* other);

  // implements Message ----------------------------------------------

  GroupmanagerGamemanagerCreateGameRoomReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGamemanagerCreateGameRoomReq& from);
  void MergeFrom(const GroupmanagerGamemanagerCreateGameRoomReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 game = 4;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 4;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // required int32 gameid = 5;
  inline bool has_gameid() const;
  inline void clear_gameid();
  static const int kGameidFieldNumber = 5;
  inline ::google::protobuf::int32 gameid() const;
  inline void set_gameid(::google::protobuf::int32 value);

  // required uint64 serverid = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 6;
  inline ::google::protobuf::uint64 serverid() const;
  inline void set_serverid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGamemanagerCreateGameRoomReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_gameid();
  inline void clear_has_gameid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::int32 game_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::int32 gameid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGamemanagerCreateGameRoomReq* default_instance_;
};
// -------------------------------------------------------------------

class GamemanagerGroupmanagerCreateGameRoomRsp : public ::google::protobuf::Message {
 public:
  GamemanagerGroupmanagerCreateGameRoomRsp();
  virtual ~GamemanagerGroupmanagerCreateGameRoomRsp();

  GamemanagerGroupmanagerCreateGameRoomRsp(const GamemanagerGroupmanagerCreateGameRoomRsp& from);

  inline GamemanagerGroupmanagerCreateGameRoomRsp& operator=(const GamemanagerGroupmanagerCreateGameRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GamemanagerGroupmanagerCreateGameRoomRsp& default_instance();

  void Swap(GamemanagerGroupmanagerCreateGameRoomRsp* other);

  // implements Message ----------------------------------------------

  GamemanagerGroupmanagerCreateGameRoomRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GamemanagerGroupmanagerCreateGameRoomRsp& from);
  void MergeFrom(const GamemanagerGroupmanagerCreateGameRoomRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 3;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 3;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 4;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 4;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 game = 5;
  inline bool has_game() const;
  inline void clear_game();
  static const int kGameFieldNumber = 5;
  inline ::google::protobuf::int32 game() const;
  inline void set_game(::google::protobuf::int32 value);

  // required uint64 serverid = 6;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 6;
  inline ::google::protobuf::uint64 serverid() const;
  inline void set_serverid(::google::protobuf::uint64 value);

  // optional string ip = 7;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 7;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 8;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 8;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional int32 roomid = 9;
  inline bool has_roomid() const;
  inline void clear_roomid();
  static const int kRoomidFieldNumber = 9;
  inline ::google::protobuf::int32 roomid() const;
  inline void set_roomid(::google::protobuf::int32 value);

  // optional string password = 10;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 10;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GamemanagerGroupmanagerCreateGameRoomRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_game();
  inline void clear_has_game();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_roomid();
  inline void clear_has_roomid();
  inline void set_has_password();
  inline void clear_has_password();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::uint64 serverid_;
  ::google::protobuf::int32 game_;
  ::google::protobuf::int32 port_;
  ::std::string* ip_;
  ::std::string* password_;
  ::google::protobuf::int32 roomid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GamemanagerGroupmanagerCreateGameRoomRsp* default_instance_;
};
// -------------------------------------------------------------------

class GroupGateLoginSuccessNtf : public ::google::protobuf::Message {
 public:
  GroupGateLoginSuccessNtf();
  virtual ~GroupGateLoginSuccessNtf();

  GroupGateLoginSuccessNtf(const GroupGateLoginSuccessNtf& from);

  inline GroupGateLoginSuccessNtf& operator=(const GroupGateLoginSuccessNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGateLoginSuccessNtf& default_instance();

  void Swap(GroupGateLoginSuccessNtf* other);

  // implements Message ----------------------------------------------

  GroupGateLoginSuccessNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGateLoginSuccessNtf& from);
  void MergeFrom(const GroupGateLoginSuccessNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 clientid = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGateLoginSuccessNtf)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGateLoginSuccessNtf* default_instance_;
};
// -------------------------------------------------------------------

class GroupGroupmanagerJoinGroupReq : public ::google::protobuf::Message {
 public:
  GroupGroupmanagerJoinGroupReq();
  virtual ~GroupGroupmanagerJoinGroupReq();

  GroupGroupmanagerJoinGroupReq(const GroupGroupmanagerJoinGroupReq& from);

  inline GroupGroupmanagerJoinGroupReq& operator=(const GroupGroupmanagerJoinGroupReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupGroupmanagerJoinGroupReq& default_instance();

  void Swap(GroupGroupmanagerJoinGroupReq* other);

  // implements Message ----------------------------------------------

  GroupGroupmanagerJoinGroupReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupGroupmanagerJoinGroupReq& from);
  void MergeFrom(const GroupGroupmanagerJoinGroupReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 groupid = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 1;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 2;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 2;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 3;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 3;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupGroupmanagerJoinGroupReq)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 gateresid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupGroupmanagerJoinGroupReq* default_instance_;
};
// -------------------------------------------------------------------

class GroupmanagerGroupJoinGroupRsp : public ::google::protobuf::Message {
 public:
  GroupmanagerGroupJoinGroupRsp();
  virtual ~GroupmanagerGroupJoinGroupRsp();

  GroupmanagerGroupJoinGroupRsp(const GroupmanagerGroupJoinGroupRsp& from);

  inline GroupmanagerGroupJoinGroupRsp& operator=(const GroupmanagerGroupJoinGroupRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupmanagerGroupJoinGroupRsp& default_instance();

  void Swap(GroupmanagerGroupJoinGroupRsp* other);

  // implements Message ----------------------------------------------

  GroupmanagerGroupJoinGroupRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupmanagerGroupJoinGroupRsp& from);
  void MergeFrom(const GroupmanagerGroupJoinGroupRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // required uint64 groupid = 2;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupidFieldNumber = 2;
  inline ::google::protobuf::uint64 groupid() const;
  inline void set_groupid(::google::protobuf::uint64 value);

  // required int32 gateresid = 3;
  inline bool has_gateresid() const;
  inline void clear_gateresid();
  static const int kGateresidFieldNumber = 3;
  inline ::google::protobuf::int32 gateresid() const;
  inline void set_gateresid(::google::protobuf::int32 value);

  // required uint64 clientid = 4;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 4;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.groupproto.GroupmanagerGroupJoinGroupRsp)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_gateresid();
  inline void clear_has_gateresid();
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 groupid_;
  ::google::protobuf::int32 result_;
  ::google::protobuf::int32 gateresid_;
  ::google::protobuf::uint64 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_group_2eproto();
  friend void protobuf_AssignDesc_group_2eproto();
  friend void protobuf_ShutdownFile_group_2eproto();

  void InitAsDefaultInstance();
  static GroupmanagerGroupJoinGroupRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// CSGroupUserLoginReq

// required string user = 1;
inline bool CSGroupUserLoginReq::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupUserLoginReq::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupUserLoginReq::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupUserLoginReq::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& CSGroupUserLoginReq::user() const {
  return *user_;
}
inline void CSGroupUserLoginReq::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CSGroupUserLoginReq::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void CSGroupUserLoginReq::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSGroupUserLoginReq::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* CSGroupUserLoginReq::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSGroupUserLoginReq::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string token = 2;
inline bool CSGroupUserLoginReq::has_token() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSGroupUserLoginReq::set_has_token() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSGroupUserLoginReq::clear_has_token() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSGroupUserLoginReq::clear_token() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    token_->clear();
  }
  clear_has_token();
}
inline const ::std::string& CSGroupUserLoginReq::token() const {
  return *token_;
}
inline void CSGroupUserLoginReq::set_token(const ::std::string& value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CSGroupUserLoginReq::set_token(const char* value) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(value);
}
inline void CSGroupUserLoginReq::set_token(const char* value, size_t size) {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  token_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSGroupUserLoginReq::mutable_token() {
  set_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    token_ = new ::std::string;
  }
  return token_;
}
inline ::std::string* CSGroupUserLoginReq::release_token() {
  clear_has_token();
  if (token_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = token_;
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSGroupUserLoginReq::set_allocated_token(::std::string* token) {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (token) {
    set_has_token();
    token_ = token;
  } else {
    clear_has_token();
    token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCGroupUserLoginRsp

// required int32 result = 1;
inline bool SCGroupUserLoginRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupUserLoginRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupUserLoginRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupUserLoginRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupUserLoginRsp::result() const {
  return result_;
}
inline void SCGroupUserLoginRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// SCGroupListUpdate

// repeated .sglib.publicproto.GroupInfo groups = 1;
inline int SCGroupListUpdate::groups_size() const {
  return groups_.size();
}
inline void SCGroupListUpdate::clear_groups() {
  groups_.Clear();
}
inline const ::sglib::publicproto::GroupInfo& SCGroupListUpdate::groups(int index) const {
  return groups_.Get(index);
}
inline ::sglib::publicproto::GroupInfo* SCGroupListUpdate::mutable_groups(int index) {
  return groups_.Mutable(index);
}
inline ::sglib::publicproto::GroupInfo* SCGroupListUpdate::add_groups() {
  return groups_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupInfo >&
SCGroupListUpdate::groups() const {
  return groups_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupInfo >*
SCGroupListUpdate::mutable_groups() {
  return &groups_;
}

// -------------------------------------------------------------------

// SCGroupInfoUpdate

// required uint64 id = 1;
inline bool SCGroupInfoUpdate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupInfoUpdate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupInfoUpdate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupInfoUpdate::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 SCGroupInfoUpdate::id() const {
  return id_;
}
inline void SCGroupInfoUpdate::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .sglib.publicproto.GroupMemberInfo members = 2;
inline int SCGroupInfoUpdate::members_size() const {
  return members_.size();
}
inline void SCGroupInfoUpdate::clear_members() {
  members_.Clear();
}
inline const ::sglib::publicproto::GroupMemberInfo& SCGroupInfoUpdate::members(int index) const {
  return members_.Get(index);
}
inline ::sglib::publicproto::GroupMemberInfo* SCGroupInfoUpdate::mutable_members(int index) {
  return members_.Mutable(index);
}
inline ::sglib::publicproto::GroupMemberInfo* SCGroupInfoUpdate::add_members() {
  return members_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberInfo >&
SCGroupInfoUpdate::members() const {
  return members_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberInfo >*
SCGroupInfoUpdate::mutable_members() {
  return &members_;
}

// -------------------------------------------------------------------

// CSGroupCreateReq

// required string name = 1;
inline bool CSGroupCreateReq::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupCreateReq::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupCreateReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupCreateReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CSGroupCreateReq::name() const {
  return *name_;
}
inline void CSGroupCreateReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSGroupCreateReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CSGroupCreateReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSGroupCreateReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CSGroupCreateReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSGroupCreateReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string head = 2;
inline bool CSGroupCreateReq::has_head() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSGroupCreateReq::set_has_head() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSGroupCreateReq::clear_has_head() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSGroupCreateReq::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& CSGroupCreateReq::head() const {
  return *head_;
}
inline void CSGroupCreateReq::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void CSGroupCreateReq::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void CSGroupCreateReq::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSGroupCreateReq::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* CSGroupCreateReq::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSGroupCreateReq::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCGroupCreateRsp

// required int32 result = 1;
inline bool SCGroupCreateRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupCreateRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupCreateRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupCreateRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupCreateRsp::result() const {
  return result_;
}
inline void SCGroupCreateRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required string name = 2;
inline bool SCGroupCreateRsp::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupCreateRsp::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupCreateRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupCreateRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SCGroupCreateRsp::name() const {
  return *name_;
}
inline void SCGroupCreateRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCGroupCreateRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SCGroupCreateRsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupCreateRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SCGroupCreateRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupCreateRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string head = 3;
inline bool SCGroupCreateRsp::has_head() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCGroupCreateRsp::set_has_head() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCGroupCreateRsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCGroupCreateRsp::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& SCGroupCreateRsp::head() const {
  return *head_;
}
inline void SCGroupCreateRsp::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void SCGroupCreateRsp::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void SCGroupCreateRsp::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupCreateRsp::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* SCGroupCreateRsp::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupCreateRsp::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 groupid = 4;
inline bool SCGroupCreateRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCGroupCreateRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCGroupCreateRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCGroupCreateRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupCreateRsp::groupid() const {
  return groupid_;
}
inline void SCGroupCreateRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// CSGroupSearchReq

// required uint64 groupid = 1;
inline bool CSGroupSearchReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupSearchReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupSearchReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupSearchReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupSearchReq::groupid() const {
  return groupid_;
}
inline void CSGroupSearchReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupSearchRsp

// required int32 result = 1;
inline bool SCGroupSearchRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupSearchRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupSearchRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupSearchRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupSearchRsp::result() const {
  return result_;
}
inline void SCGroupSearchRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// optional .sglib.publicproto.GroupInfo group = 2;
inline bool SCGroupSearchRsp::has_group() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupSearchRsp::set_has_group() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupSearchRsp::clear_has_group() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupSearchRsp::clear_group() {
  if (group_ != NULL) group_->::sglib::publicproto::GroupInfo::Clear();
  clear_has_group();
}
inline const ::sglib::publicproto::GroupInfo& SCGroupSearchRsp::group() const {
  return group_ != NULL ? *group_ : *default_instance_->group_;
}
inline ::sglib::publicproto::GroupInfo* SCGroupSearchRsp::mutable_group() {
  set_has_group();
  if (group_ == NULL) group_ = new ::sglib::publicproto::GroupInfo;
  return group_;
}
inline ::sglib::publicproto::GroupInfo* SCGroupSearchRsp::release_group() {
  clear_has_group();
  ::sglib::publicproto::GroupInfo* temp = group_;
  group_ = NULL;
  return temp;
}
inline void SCGroupSearchRsp::set_allocated_group(::sglib::publicproto::GroupInfo* group) {
  delete group_;
  group_ = group;
  if (group) {
    set_has_group();
  } else {
    clear_has_group();
  }
}

// -------------------------------------------------------------------

// CSGroupJoinReq

// required uint64 groupid = 1;
inline bool CSGroupJoinReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupJoinReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupJoinReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupJoinReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupJoinReq::groupid() const {
  return groupid_;
}
inline void CSGroupJoinReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupJoinRsp

// required int32 result = 1;
inline bool SCGroupJoinRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupJoinRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupJoinRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupJoinRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupJoinRsp::result() const {
  return result_;
}
inline void SCGroupJoinRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool SCGroupJoinRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupJoinRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupJoinRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupJoinRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupJoinRsp::groupid() const {
  return groupid_;
}
inline void SCGroupJoinRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// CSGroupAddMemberReq

// required uint64 groupid = 1;
inline bool CSGroupAddMemberReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupAddMemberReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupAddMemberReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupAddMemberReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupAddMemberReq::groupid() const {
  return groupid_;
}
inline void CSGroupAddMemberReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated string users = 2;
inline int CSGroupAddMemberReq::users_size() const {
  return users_.size();
}
inline void CSGroupAddMemberReq::clear_users() {
  users_.Clear();
}
inline const ::std::string& CSGroupAddMemberReq::users(int index) const {
  return users_.Get(index);
}
inline ::std::string* CSGroupAddMemberReq::mutable_users(int index) {
  return users_.Mutable(index);
}
inline void CSGroupAddMemberReq::set_users(int index, const ::std::string& value) {
  users_.Mutable(index)->assign(value);
}
inline void CSGroupAddMemberReq::set_users(int index, const char* value) {
  users_.Mutable(index)->assign(value);
}
inline void CSGroupAddMemberReq::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSGroupAddMemberReq::add_users() {
  return users_.Add();
}
inline void CSGroupAddMemberReq::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
}
inline void CSGroupAddMemberReq::add_users(const char* value) {
  users_.Add()->assign(value);
}
inline void CSGroupAddMemberReq::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CSGroupAddMemberReq::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CSGroupAddMemberReq::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// SCGroupAddMemberRsp

// required int32 result = 1;
inline bool SCGroupAddMemberRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupAddMemberRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupAddMemberRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupAddMemberRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupAddMemberRsp::result() const {
  return result_;
}
inline void SCGroupAddMemberRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool SCGroupAddMemberRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupAddMemberRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupAddMemberRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupAddMemberRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupAddMemberRsp::groupid() const {
  return groupid_;
}
inline void SCGroupAddMemberRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupAskJoinNtf

// required .sglib.publicproto.GroupInfo group = 1;
inline bool SCGroupAskJoinNtf::has_group() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupAskJoinNtf::set_has_group() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupAskJoinNtf::clear_has_group() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupAskJoinNtf::clear_group() {
  if (group_ != NULL) group_->::sglib::publicproto::GroupInfo::Clear();
  clear_has_group();
}
inline const ::sglib::publicproto::GroupInfo& SCGroupAskJoinNtf::group() const {
  return group_ != NULL ? *group_ : *default_instance_->group_;
}
inline ::sglib::publicproto::GroupInfo* SCGroupAskJoinNtf::mutable_group() {
  set_has_group();
  if (group_ == NULL) group_ = new ::sglib::publicproto::GroupInfo;
  return group_;
}
inline ::sglib::publicproto::GroupInfo* SCGroupAskJoinNtf::release_group() {
  clear_has_group();
  ::sglib::publicproto::GroupInfo* temp = group_;
  group_ = NULL;
  return temp;
}
inline void SCGroupAskJoinNtf::set_allocated_group(::sglib::publicproto::GroupInfo* group) {
  delete group_;
  group_ = group;
  if (group) {
    set_has_group();
  } else {
    clear_has_group();
  }
}

// -------------------------------------------------------------------

// CSGroupAgreeJoinReq

// required uint64 groupid = 1;
inline bool CSGroupAgreeJoinReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupAgreeJoinReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupAgreeJoinReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupAgreeJoinReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupAgreeJoinReq::groupid() const {
  return groupid_;
}
inline void CSGroupAgreeJoinReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupMemberJoinNtf

// required uint64 groupid = 1;
inline bool SCGroupMemberJoinNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupMemberJoinNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupMemberJoinNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupMemberJoinNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupMemberJoinNtf::groupid() const {
  return groupid_;
}
inline void SCGroupMemberJoinNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required .sglib.publicproto.GroupMemberInfo member = 2;
inline bool SCGroupMemberJoinNtf::has_member() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupMemberJoinNtf::set_has_member() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupMemberJoinNtf::clear_has_member() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupMemberJoinNtf::clear_member() {
  if (member_ != NULL) member_->::sglib::publicproto::GroupMemberInfo::Clear();
  clear_has_member();
}
inline const ::sglib::publicproto::GroupMemberInfo& SCGroupMemberJoinNtf::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::sglib::publicproto::GroupMemberInfo* SCGroupMemberJoinNtf::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::sglib::publicproto::GroupMemberInfo;
  return member_;
}
inline ::sglib::publicproto::GroupMemberInfo* SCGroupMemberJoinNtf::release_member() {
  clear_has_member();
  ::sglib::publicproto::GroupMemberInfo* temp = member_;
  member_ = NULL;
  return temp;
}
inline void SCGroupMemberJoinNtf::set_allocated_member(::sglib::publicproto::GroupMemberInfo* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}

// -------------------------------------------------------------------

// CSGroupLeaveReq

// required uint64 groupid = 1;
inline bool CSGroupLeaveReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupLeaveReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupLeaveReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupLeaveReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupLeaveReq::groupid() const {
  return groupid_;
}
inline void CSGroupLeaveReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupLeaveRsp

// required int32 result = 1;
inline bool SCGroupLeaveRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupLeaveRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupLeaveRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupLeaveRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupLeaveRsp::result() const {
  return result_;
}
inline void SCGroupLeaveRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool SCGroupLeaveRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupLeaveRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupLeaveRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupLeaveRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupLeaveRsp::groupid() const {
  return groupid_;
}
inline void SCGroupLeaveRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupMemberLeaveNtf

// required uint64 groupid = 1;
inline bool SCGroupMemberLeaveNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupMemberLeaveNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupMemberLeaveNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupMemberLeaveNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupMemberLeaveNtf::groupid() const {
  return groupid_;
}
inline void SCGroupMemberLeaveNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string user = 2;
inline bool SCGroupMemberLeaveNtf::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupMemberLeaveNtf::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupMemberLeaveNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupMemberLeaveNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SCGroupMemberLeaveNtf::user() const {
  return *user_;
}
inline void SCGroupMemberLeaveNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SCGroupMemberLeaveNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SCGroupMemberLeaveNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupMemberLeaveNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SCGroupMemberLeaveNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupMemberLeaveNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CSGroupDeleteReq

// required uint64 groupid = 1;
inline bool CSGroupDeleteReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupDeleteReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupDeleteReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupDeleteReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupDeleteReq::groupid() const {
  return groupid_;
}
inline void CSGroupDeleteReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupDeleteRsp

// required int32 result = 1;
inline bool SCGroupDeleteRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupDeleteRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupDeleteRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupDeleteRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupDeleteRsp::result() const {
  return result_;
}
inline void SCGroupDeleteRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool SCGroupDeleteRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupDeleteRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupDeleteRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupDeleteRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupDeleteRsp::groupid() const {
  return groupid_;
}
inline void SCGroupDeleteRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// SCGroupDeleteNtf

// required uint64 groupid = 1;
inline bool SCGroupDeleteNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupDeleteNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupDeleteNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupDeleteNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupDeleteNtf::groupid() const {
  return groupid_;
}
inline void SCGroupDeleteNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// CSGroupMessageReq

// required uint64 groupid = 1;
inline bool CSGroupMessageReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupMessageReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupMessageReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupMessageReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupMessageReq::groupid() const {
  return groupid_;
}
inline void CSGroupMessageReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string content = 2;
inline bool CSGroupMessageReq::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSGroupMessageReq::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSGroupMessageReq::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSGroupMessageReq::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CSGroupMessageReq::content() const {
  return *content_;
}
inline void CSGroupMessageReq::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CSGroupMessageReq::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CSGroupMessageReq::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CSGroupMessageReq::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* CSGroupMessageReq::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CSGroupMessageReq::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCGroupMessageNtf

// required uint64 groupid = 1;
inline bool SCGroupMessageNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupMessageNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupMessageNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupMessageNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupMessageNtf::groupid() const {
  return groupid_;
}
inline void SCGroupMessageNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string content = 2;
inline bool SCGroupMessageNtf::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupMessageNtf::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupMessageNtf::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupMessageNtf::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SCGroupMessageNtf::content() const {
  return *content_;
}
inline void SCGroupMessageNtf::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SCGroupMessageNtf::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SCGroupMessageNtf::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupMessageNtf::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SCGroupMessageNtf::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupMessageNtf::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string sender = 3;
inline bool SCGroupMessageNtf::has_sender() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCGroupMessageNtf::set_has_sender() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCGroupMessageNtf::clear_has_sender() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCGroupMessageNtf::clear_sender() {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    sender_->clear();
  }
  clear_has_sender();
}
inline const ::std::string& SCGroupMessageNtf::sender() const {
  return *sender_;
}
inline void SCGroupMessageNtf::set_sender(const ::std::string& value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void SCGroupMessageNtf::set_sender(const char* value) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(value);
}
inline void SCGroupMessageNtf::set_sender(const char* value, size_t size) {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  sender_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupMessageNtf::mutable_sender() {
  set_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    sender_ = new ::std::string;
  }
  return sender_;
}
inline ::std::string* SCGroupMessageNtf::release_sender() {
  clear_has_sender();
  if (sender_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sender_;
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupMessageNtf::set_allocated_sender(::std::string* sender) {
  if (sender_ != &::google::protobuf::internal::kEmptyString) {
    delete sender_;
  }
  if (sender) {
    set_has_sender();
    sender_ = sender;
  } else {
    clear_has_sender();
    sender_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCGroupMemberOnlineNtf

// required uint64 groupid = 1;
inline bool SCGroupMemberOnlineNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupMemberOnlineNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupMemberOnlineNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupMemberOnlineNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupMemberOnlineNtf::groupid() const {
  return groupid_;
}
inline void SCGroupMemberOnlineNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string user = 2;
inline bool SCGroupMemberOnlineNtf::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupMemberOnlineNtf::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupMemberOnlineNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupMemberOnlineNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SCGroupMemberOnlineNtf::user() const {
  return *user_;
}
inline void SCGroupMemberOnlineNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SCGroupMemberOnlineNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SCGroupMemberOnlineNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupMemberOnlineNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SCGroupMemberOnlineNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupMemberOnlineNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCGroupMemberOfflineNtf

// required uint64 groupid = 1;
inline bool SCGroupMemberOfflineNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupMemberOfflineNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupMemberOfflineNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupMemberOfflineNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupMemberOfflineNtf::groupid() const {
  return groupid_;
}
inline void SCGroupMemberOfflineNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string user = 2;
inline bool SCGroupMemberOfflineNtf::has_user() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupMemberOfflineNtf::set_has_user() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupMemberOfflineNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupMemberOfflineNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& SCGroupMemberOfflineNtf::user() const {
  return *user_;
}
inline void SCGroupMemberOfflineNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SCGroupMemberOfflineNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void SCGroupMemberOfflineNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupMemberOfflineNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* SCGroupMemberOfflineNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupMemberOfflineNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CSGroupCreateGameRoomReq

// required uint64 groupid = 1;
inline bool CSGroupCreateGameRoomReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupCreateGameRoomReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupCreateGameRoomReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupCreateGameRoomReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupCreateGameRoomReq::groupid() const {
  return groupid_;
}
inline void CSGroupCreateGameRoomReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 game = 2;
inline bool CSGroupCreateGameRoomReq::has_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSGroupCreateGameRoomReq::set_has_game() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSGroupCreateGameRoomReq::clear_has_game() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSGroupCreateGameRoomReq::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 CSGroupCreateGameRoomReq::game() const {
  return game_;
}
inline void CSGroupCreateGameRoomReq::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// -------------------------------------------------------------------

// SCGroupCreateGameRoomRsp

// required int32 result = 1;
inline bool SCGroupCreateGameRoomRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupCreateGameRoomRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupCreateGameRoomRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupCreateGameRoomRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 SCGroupCreateGameRoomRsp::result() const {
  return result_;
}
inline void SCGroupCreateGameRoomRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool SCGroupCreateGameRoomRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupCreateGameRoomRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupCreateGameRoomRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupCreateGameRoomRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupCreateGameRoomRsp::groupid() const {
  return groupid_;
}
inline void SCGroupCreateGameRoomRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 game = 3;
inline bool SCGroupCreateGameRoomRsp::has_game() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCGroupCreateGameRoomRsp::set_has_game() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCGroupCreateGameRoomRsp::clear_has_game() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCGroupCreateGameRoomRsp::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 SCGroupCreateGameRoomRsp::game() const {
  return game_;
}
inline void SCGroupCreateGameRoomRsp::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// optional string ip = 4;
inline bool SCGroupCreateGameRoomRsp::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCGroupCreateGameRoomRsp::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCGroupCreateGameRoomRsp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCGroupCreateGameRoomRsp::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SCGroupCreateGameRoomRsp::ip() const {
  return *ip_;
}
inline void SCGroupCreateGameRoomRsp::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SCGroupCreateGameRoomRsp::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SCGroupCreateGameRoomRsp::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupCreateGameRoomRsp::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SCGroupCreateGameRoomRsp::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupCreateGameRoomRsp::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 5;
inline bool SCGroupCreateGameRoomRsp::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCGroupCreateGameRoomRsp::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCGroupCreateGameRoomRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCGroupCreateGameRoomRsp::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 SCGroupCreateGameRoomRsp::port() const {
  return port_;
}
inline void SCGroupCreateGameRoomRsp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 roomid = 6;
inline bool SCGroupCreateGameRoomRsp::has_roomid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCGroupCreateGameRoomRsp::set_has_roomid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCGroupCreateGameRoomRsp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCGroupCreateGameRoomRsp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 SCGroupCreateGameRoomRsp::roomid() const {
  return roomid_;
}
inline void SCGroupCreateGameRoomRsp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional string password = 7;
inline bool SCGroupCreateGameRoomRsp::has_password() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCGroupCreateGameRoomRsp::set_has_password() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCGroupCreateGameRoomRsp::clear_has_password() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCGroupCreateGameRoomRsp::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SCGroupCreateGameRoomRsp::password() const {
  return *password_;
}
inline void SCGroupCreateGameRoomRsp::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SCGroupCreateGameRoomRsp::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SCGroupCreateGameRoomRsp::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupCreateGameRoomRsp::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SCGroupCreateGameRoomRsp::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupCreateGameRoomRsp::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SCGroupCreateGameRoomNtf

// required string creater = 1;
inline bool SCGroupCreateGameRoomNtf::has_creater() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SCGroupCreateGameRoomNtf::set_has_creater() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SCGroupCreateGameRoomNtf::clear_has_creater() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SCGroupCreateGameRoomNtf::clear_creater() {
  if (creater_ != &::google::protobuf::internal::kEmptyString) {
    creater_->clear();
  }
  clear_has_creater();
}
inline const ::std::string& SCGroupCreateGameRoomNtf::creater() const {
  return *creater_;
}
inline void SCGroupCreateGameRoomNtf::set_creater(const ::std::string& value) {
  set_has_creater();
  if (creater_ == &::google::protobuf::internal::kEmptyString) {
    creater_ = new ::std::string;
  }
  creater_->assign(value);
}
inline void SCGroupCreateGameRoomNtf::set_creater(const char* value) {
  set_has_creater();
  if (creater_ == &::google::protobuf::internal::kEmptyString) {
    creater_ = new ::std::string;
  }
  creater_->assign(value);
}
inline void SCGroupCreateGameRoomNtf::set_creater(const char* value, size_t size) {
  set_has_creater();
  if (creater_ == &::google::protobuf::internal::kEmptyString) {
    creater_ = new ::std::string;
  }
  creater_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupCreateGameRoomNtf::mutable_creater() {
  set_has_creater();
  if (creater_ == &::google::protobuf::internal::kEmptyString) {
    creater_ = new ::std::string;
  }
  return creater_;
}
inline ::std::string* SCGroupCreateGameRoomNtf::release_creater() {
  clear_has_creater();
  if (creater_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = creater_;
    creater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupCreateGameRoomNtf::set_allocated_creater(::std::string* creater) {
  if (creater_ != &::google::protobuf::internal::kEmptyString) {
    delete creater_;
  }
  if (creater) {
    set_has_creater();
    creater_ = creater;
  } else {
    clear_has_creater();
    creater_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 game = 2;
inline bool SCGroupCreateGameRoomNtf::has_game() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SCGroupCreateGameRoomNtf::set_has_game() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SCGroupCreateGameRoomNtf::clear_has_game() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SCGroupCreateGameRoomNtf::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 SCGroupCreateGameRoomNtf::game() const {
  return game_;
}
inline void SCGroupCreateGameRoomNtf::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// optional string ip = 3;
inline bool SCGroupCreateGameRoomNtf::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SCGroupCreateGameRoomNtf::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SCGroupCreateGameRoomNtf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SCGroupCreateGameRoomNtf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& SCGroupCreateGameRoomNtf::ip() const {
  return *ip_;
}
inline void SCGroupCreateGameRoomNtf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SCGroupCreateGameRoomNtf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void SCGroupCreateGameRoomNtf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupCreateGameRoomNtf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* SCGroupCreateGameRoomNtf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupCreateGameRoomNtf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 4;
inline bool SCGroupCreateGameRoomNtf::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SCGroupCreateGameRoomNtf::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SCGroupCreateGameRoomNtf::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SCGroupCreateGameRoomNtf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 SCGroupCreateGameRoomNtf::port() const {
  return port_;
}
inline void SCGroupCreateGameRoomNtf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 roomid = 5;
inline bool SCGroupCreateGameRoomNtf::has_roomid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SCGroupCreateGameRoomNtf::set_has_roomid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SCGroupCreateGameRoomNtf::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SCGroupCreateGameRoomNtf::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 SCGroupCreateGameRoomNtf::roomid() const {
  return roomid_;
}
inline void SCGroupCreateGameRoomNtf::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional string password = 6;
inline bool SCGroupCreateGameRoomNtf::has_password() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SCGroupCreateGameRoomNtf::set_has_password() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SCGroupCreateGameRoomNtf::clear_has_password() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SCGroupCreateGameRoomNtf::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& SCGroupCreateGameRoomNtf::password() const {
  return *password_;
}
inline void SCGroupCreateGameRoomNtf::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SCGroupCreateGameRoomNtf::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void SCGroupCreateGameRoomNtf::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SCGroupCreateGameRoomNtf::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* SCGroupCreateGameRoomNtf::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SCGroupCreateGameRoomNtf::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 groupid = 7;
inline bool SCGroupCreateGameRoomNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SCGroupCreateGameRoomNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SCGroupCreateGameRoomNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SCGroupCreateGameRoomNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 SCGroupCreateGameRoomNtf::groupid() const {
  return groupid_;
}
inline void SCGroupCreateGameRoomNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// CSGroupMessageHistoryReq

// required uint64 groupid = 1;
inline bool CSGroupMessageHistoryReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSGroupMessageHistoryReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSGroupMessageHistoryReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSGroupMessageHistoryReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 CSGroupMessageHistoryReq::groupid() const {
  return groupid_;
}
inline void CSGroupMessageHistoryReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int64 idxfrom = 2;
inline bool CSGroupMessageHistoryReq::has_idxfrom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSGroupMessageHistoryReq::set_has_idxfrom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSGroupMessageHistoryReq::clear_has_idxfrom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSGroupMessageHistoryReq::clear_idxfrom() {
  idxfrom_ = GOOGLE_LONGLONG(0);
  clear_has_idxfrom();
}
inline ::google::protobuf::int64 CSGroupMessageHistoryReq::idxfrom() const {
  return idxfrom_;
}
inline void CSGroupMessageHistoryReq::set_idxfrom(::google::protobuf::int64 value) {
  set_has_idxfrom();
  idxfrom_ = value;
}

// required int32 limit = 3;
inline bool CSGroupMessageHistoryReq::has_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSGroupMessageHistoryReq::set_has_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSGroupMessageHistoryReq::clear_has_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSGroupMessageHistoryReq::clear_limit() {
  limit_ = 0;
  clear_has_limit();
}
inline ::google::protobuf::int32 CSGroupMessageHistoryReq::limit() const {
  return limit_;
}
inline void CSGroupMessageHistoryReq::set_limit(::google::protobuf::int32 value) {
  set_has_limit();
  limit_ = value;
}

// -------------------------------------------------------------------

// GroupMessage

// required string user = 1;
inline bool GroupMessage::has_user() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupMessage::set_has_user() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupMessage::clear_has_user() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupMessage::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupMessage::user() const {
  return *user_;
}
inline void GroupMessage::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupMessage::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupMessage::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupMessage::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupMessage::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupMessage::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string msg = 2;
inline bool GroupMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupMessage::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& GroupMessage::msg() const {
  return *msg_;
}
inline void GroupMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GroupMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GroupMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* GroupMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupMessage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 time = 3;
inline bool GroupMessage::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupMessage::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupMessage::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupMessage::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 GroupMessage::time() const {
  return time_;
}
inline void GroupMessage::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// required int64 idx = 4;
inline bool GroupMessage::has_idx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupMessage::set_has_idx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupMessage::clear_has_idx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupMessage::clear_idx() {
  idx_ = GOOGLE_LONGLONG(0);
  clear_has_idx();
}
inline ::google::protobuf::int64 GroupMessage::idx() const {
  return idx_;
}
inline void GroupMessage::set_idx(::google::protobuf::int64 value) {
  set_has_idx();
  idx_ = value;
}

// -------------------------------------------------------------------

// SCGroupMessageHistoryRsp

// repeated .sglib.groupproto.GroupMessage messages = 1;
inline int SCGroupMessageHistoryRsp::messages_size() const {
  return messages_.size();
}
inline void SCGroupMessageHistoryRsp::clear_messages() {
  messages_.Clear();
}
inline const ::sglib::groupproto::GroupMessage& SCGroupMessageHistoryRsp::messages(int index) const {
  return messages_.Get(index);
}
inline ::sglib::groupproto::GroupMessage* SCGroupMessageHistoryRsp::mutable_messages(int index) {
  return messages_.Mutable(index);
}
inline ::sglib::groupproto::GroupMessage* SCGroupMessageHistoryRsp::add_messages() {
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::groupproto::GroupMessage >&
SCGroupMessageHistoryRsp::messages() const {
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::groupproto::GroupMessage >*
SCGroupMessageHistoryRsp::mutable_messages() {
  return &messages_;
}

// -------------------------------------------------------------------

// GroupGateAddGroupNtf

// required uint64 groupid = 1;
inline bool GroupGateAddGroupNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGateAddGroupNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGateAddGroupNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGateAddGroupNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGateAddGroupNtf::groupid() const {
  return groupid_;
}
inline void GroupGateAddGroupNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 serverid = 2;
inline bool GroupGateAddGroupNtf::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGateAddGroupNtf::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGateAddGroupNtf::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGateAddGroupNtf::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GroupGateAddGroupNtf::serverid() const {
  return serverid_;
}
inline void GroupGateAddGroupNtf::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// GroupGateDelGroupNtf

// required uint64 groupid = 1;
inline bool GroupGateDelGroupNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGateDelGroupNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGateDelGroupNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGateDelGroupNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGateDelGroupNtf::groupid() const {
  return groupid_;
}
inline void GroupGateDelGroupNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// GroupGroupmanagerGateCloseNtf

// required int32 gateid = 1;
inline bool GroupGroupmanagerGateCloseNtf::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerGateCloseNtf::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerGateCloseNtf::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerGateCloseNtf::clear_gateid() {
  gateid_ = 0;
  clear_has_gateid();
}
inline ::google::protobuf::int32 GroupGroupmanagerGateCloseNtf::gateid() const {
  return gateid_;
}
inline void GroupGroupmanagerGateCloseNtf::set_gateid(::google::protobuf::int32 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerCenterGateCloseNtf

// required int32 gateid = 1;
inline bool GroupmanagerCenterGateCloseNtf::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerCenterGateCloseNtf::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerCenterGateCloseNtf::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerCenterGateCloseNtf::clear_gateid() {
  gateid_ = 0;
  clear_has_gateid();
}
inline ::google::protobuf::int32 GroupmanagerCenterGateCloseNtf::gateid() const {
  return gateid_;
}
inline void GroupmanagerCenterGateCloseNtf::set_gateid(::google::protobuf::int32 value) {
  set_has_gateid();
  gateid_ = value;
}

// -------------------------------------------------------------------

// GroupGroupmanagerDynamicStartNtf

// required int32 id = 1;
inline bool GroupGroupmanagerDynamicStartNtf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerDynamicStartNtf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerDynamicStartNtf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerDynamicStartNtf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GroupGroupmanagerDynamicStartNtf::id() const {
  return id_;
}
inline void GroupGroupmanagerDynamicStartNtf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool GroupGroupmanagerDynamicStartNtf::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerDynamicStartNtf::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerDynamicStartNtf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerDynamicStartNtf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GroupGroupmanagerDynamicStartNtf::ip() const {
  return *ip_;
}
inline void GroupGroupmanagerDynamicStartNtf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GroupGroupmanagerDynamicStartNtf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GroupGroupmanagerDynamicStartNtf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerDynamicStartNtf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GroupGroupmanagerDynamicStartNtf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanagerDynamicStartNtf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool GroupGroupmanagerDynamicStartNtf::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerDynamicStartNtf::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerDynamicStartNtf::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerDynamicStartNtf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GroupGroupmanagerDynamicStartNtf::port() const {
  return port_;
}
inline void GroupGroupmanagerDynamicStartNtf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerGroupDynamicServerStartNtf

// required int32 id = 1;
inline bool GroupmanagerGroupDynamicServerStartNtf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupDynamicServerStartNtf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupDynamicServerStartNtf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GroupmanagerGroupDynamicServerStartNtf::id() const {
  return id_;
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool GroupmanagerGroupDynamicServerStartNtf::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupDynamicServerStartNtf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupDynamicServerStartNtf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GroupmanagerGroupDynamicServerStartNtf::ip() const {
  return *ip_;
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupDynamicServerStartNtf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GroupmanagerGroupDynamicServerStartNtf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool GroupmanagerGroupDynamicServerStartNtf::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupDynamicServerStartNtf::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupDynamicServerStartNtf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GroupmanagerGroupDynamicServerStartNtf::port() const {
  return port_;
}
inline void GroupmanagerGroupDynamicServerStartNtf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerCenterGroupCloseNtf

// required int32 serverid = 1;
inline bool GroupmanagerCenterGroupCloseNtf::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerCenterGroupCloseNtf::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerCenterGroupCloseNtf::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerCenterGroupCloseNtf::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GroupmanagerCenterGroupCloseNtf::serverid() const {
  return serverid_;
}
inline void GroupmanagerCenterGroupCloseNtf::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// GroupGroupmanagerReportStatusInfo

// required int32 serverid = 1;
inline bool GroupGroupmanagerReportStatusInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerReportStatusInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerReportStatusInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerReportStatusInfo::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GroupGroupmanagerReportStatusInfo::serverid() const {
  return serverid_;
}
inline void GroupGroupmanagerReportStatusInfo::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required int32 totalgroup = 2;
inline bool GroupGroupmanagerReportStatusInfo::has_totalgroup() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerReportStatusInfo::set_has_totalgroup() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerReportStatusInfo::clear_has_totalgroup() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerReportStatusInfo::clear_totalgroup() {
  totalgroup_ = 0;
  clear_has_totalgroup();
}
inline ::google::protobuf::int32 GroupGroupmanagerReportStatusInfo::totalgroup() const {
  return totalgroup_;
}
inline void GroupGroupmanagerReportStatusInfo::set_totalgroup(::google::protobuf::int32 value) {
  set_has_totalgroup();
  totalgroup_ = value;
}

// required int32 totalmember = 3;
inline bool GroupGroupmanagerReportStatusInfo::has_totalmember() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerReportStatusInfo::set_has_totalmember() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerReportStatusInfo::clear_has_totalmember() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerReportStatusInfo::clear_totalmember() {
  totalmember_ = 0;
  clear_has_totalmember();
}
inline ::google::protobuf::int32 GroupGroupmanagerReportStatusInfo::totalmember() const {
  return totalmember_;
}
inline void GroupGroupmanagerReportStatusInfo::set_totalmember(::google::protobuf::int32 value) {
  set_has_totalmember();
  totalmember_ = value;
}

// repeated .sglib.publicproto.GateServerInfo gateservers = 4;
inline int GroupGroupmanagerReportStatusInfo::gateservers_size() const {
  return gateservers_.size();
}
inline void GroupGroupmanagerReportStatusInfo::clear_gateservers() {
  gateservers_.Clear();
}
inline const ::sglib::publicproto::GateServerInfo& GroupGroupmanagerReportStatusInfo::gateservers(int index) const {
  return gateservers_.Get(index);
}
inline ::sglib::publicproto::GateServerInfo* GroupGroupmanagerReportStatusInfo::mutable_gateservers(int index) {
  return gateservers_.Mutable(index);
}
inline ::sglib::publicproto::GateServerInfo* GroupGroupmanagerReportStatusInfo::add_gateservers() {
  return gateservers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
GroupGroupmanagerReportStatusInfo::gateservers() const {
  return gateservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
GroupGroupmanagerReportStatusInfo::mutable_gateservers() {
  return &gateservers_;
}

// -------------------------------------------------------------------

// GroupmanagerCenterReportGroupGateInfo

// repeated .sglib.publicproto.GateServerInfo gateservers = 1;
inline int GroupmanagerCenterReportGroupGateInfo::gateservers_size() const {
  return gateservers_.size();
}
inline void GroupmanagerCenterReportGroupGateInfo::clear_gateservers() {
  gateservers_.Clear();
}
inline const ::sglib::publicproto::GateServerInfo& GroupmanagerCenterReportGroupGateInfo::gateservers(int index) const {
  return gateservers_.Get(index);
}
inline ::sglib::publicproto::GateServerInfo* GroupmanagerCenterReportGroupGateInfo::mutable_gateservers(int index) {
  return gateservers_.Mutable(index);
}
inline ::sglib::publicproto::GateServerInfo* GroupmanagerCenterReportGroupGateInfo::add_gateservers() {
  return gateservers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >&
GroupmanagerCenterReportGroupGateInfo::gateservers() const {
  return gateservers_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GateServerInfo >*
GroupmanagerCenterReportGroupGateInfo::mutable_gateservers() {
  return &gateservers_;
}

// -------------------------------------------------------------------

// GroupGroupmanagerUserLoginNtf

// required int32 gateresid = 1;
inline bool GroupGroupmanagerUserLoginNtf::has_gateresid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerUserLoginNtf::set_has_gateresid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerUserLoginNtf::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerUserLoginNtf::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupGroupmanagerUserLoginNtf::gateresid() const {
  return gateresid_;
}
inline void GroupGroupmanagerUserLoginNtf::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 2;
inline bool GroupGroupmanagerUserLoginNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerUserLoginNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerUserLoginNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerUserLoginNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerUserLoginNtf::clientid() const {
  return clientid_;
}
inline void GroupGroupmanagerUserLoginNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 3;
inline bool GroupGroupmanagerUserLoginNtf::has_user() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerUserLoginNtf::set_has_user() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerUserLoginNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerUserLoginNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupGroupmanagerUserLoginNtf::user() const {
  return *user_;
}
inline void GroupGroupmanagerUserLoginNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupGroupmanagerUserLoginNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupGroupmanagerUserLoginNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerUserLoginNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupGroupmanagerUserLoginNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanagerUserLoginNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupGroupmanagerUserLogoutNtf

// required int32 gateresid = 1;
inline bool GroupGroupmanagerUserLogoutNtf::has_gateresid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerUserLogoutNtf::set_has_gateresid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerUserLogoutNtf::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerUserLogoutNtf::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupGroupmanagerUserLogoutNtf::gateresid() const {
  return gateresid_;
}
inline void GroupGroupmanagerUserLogoutNtf::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 2;
inline bool GroupGroupmanagerUserLogoutNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerUserLogoutNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerUserLogoutNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerUserLogoutNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerUserLogoutNtf::clientid() const {
  return clientid_;
}
inline void GroupGroupmanagerUserLogoutNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// -------------------------------------------------------------------

// GroupGroupmanageCreateGroupReq

// required uint64 gateid = 1;
inline bool GroupGroupmanageCreateGroupReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanageCreateGroupReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanageCreateGroupReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanageCreateGroupReq::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 GroupGroupmanageCreateGroupReq::gateid() const {
  return gateid_;
}
inline void GroupGroupmanageCreateGroupReq::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupGroupmanageCreateGroupReq::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanageCreateGroupReq::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanageCreateGroupReq::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanageCreateGroupReq::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupGroupmanageCreateGroupReq::gateresid() const {
  return gateresid_;
}
inline void GroupGroupmanageCreateGroupReq::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupGroupmanageCreateGroupReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanageCreateGroupReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanageCreateGroupReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanageCreateGroupReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanageCreateGroupReq::clientid() const {
  return clientid_;
}
inline void GroupGroupmanageCreateGroupReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string name = 4;
inline bool GroupGroupmanageCreateGroupReq::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupGroupmanageCreateGroupReq::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupGroupmanageCreateGroupReq::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupGroupmanageCreateGroupReq::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupGroupmanageCreateGroupReq::name() const {
  return *name_;
}
inline void GroupGroupmanageCreateGroupReq::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupGroupmanageCreateGroupReq::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupGroupmanageCreateGroupReq::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanageCreateGroupReq::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GroupGroupmanageCreateGroupReq::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanageCreateGroupReq::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string head = 5;
inline bool GroupGroupmanageCreateGroupReq::has_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupGroupmanageCreateGroupReq::set_has_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupGroupmanageCreateGroupReq::clear_has_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupGroupmanageCreateGroupReq::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& GroupGroupmanageCreateGroupReq::head() const {
  return *head_;
}
inline void GroupGroupmanageCreateGroupReq::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupGroupmanageCreateGroupReq::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupGroupmanageCreateGroupReq::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanageCreateGroupReq::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* GroupGroupmanageCreateGroupReq::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanageCreateGroupReq::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupmanageGroupCreateGroupNtf

// required uint64 gateid = 1;
inline bool GroupmanageGroupCreateGroupNtf::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 GroupmanageGroupCreateGroupNtf::gateid() const {
  return gateid_;
}
inline void GroupmanageGroupCreateGroupNtf::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupmanageGroupCreateGroupNtf::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanageGroupCreateGroupNtf::gateresid() const {
  return gateresid_;
}
inline void GroupmanageGroupCreateGroupNtf::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanageGroupCreateGroupNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanageGroupCreateGroupNtf::clientid() const {
  return clientid_;
}
inline void GroupmanageGroupCreateGroupNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 4;
inline bool GroupmanageGroupCreateGroupNtf::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupmanageGroupCreateGroupNtf::user() const {
  return *user_;
}
inline void GroupmanageGroupCreateGroupNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanageGroupCreateGroupNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 5;
inline bool GroupmanageGroupCreateGroupNtf::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupmanageGroupCreateGroupNtf::name() const {
  return *name_;
}
inline void GroupmanageGroupCreateGroupNtf::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanageGroupCreateGroupNtf::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 groupid = 6;
inline bool GroupmanageGroupCreateGroupNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanageGroupCreateGroupNtf::groupid() const {
  return groupid_;
}
inline void GroupmanageGroupCreateGroupNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string head = 7;
inline bool GroupmanageGroupCreateGroupNtf::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& GroupmanageGroupCreateGroupNtf::head() const {
  return *head_;
}
inline void GroupmanageGroupCreateGroupNtf::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanageGroupCreateGroupNtf::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 groupserverid = 8;
inline bool GroupmanageGroupCreateGroupNtf::has_groupserverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_groupserverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_groupserverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_groupserverid() {
  groupserverid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupserverid();
}
inline ::google::protobuf::uint64 GroupmanageGroupCreateGroupNtf::groupserverid() const {
  return groupserverid_;
}
inline void GroupmanageGroupCreateGroupNtf::set_groupserverid(::google::protobuf::uint64 value) {
  set_has_groupserverid();
  groupserverid_ = value;
}

// required string username = 9;
inline bool GroupmanageGroupCreateGroupNtf::has_username() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_username() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_username() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_username() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& GroupmanageGroupCreateGroupNtf::username() const {
  return *username_;
}
inline void GroupmanageGroupCreateGroupNtf::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    username_ = new ::std::string;
  }
  return username_;
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanageGroupCreateGroupNtf::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string userhead = 10;
inline bool GroupmanageGroupCreateGroupNtf::has_userhead() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GroupmanageGroupCreateGroupNtf::set_has_userhead() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_has_userhead() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GroupmanageGroupCreateGroupNtf::clear_userhead() {
  if (userhead_ != &::google::protobuf::internal::kEmptyString) {
    userhead_->clear();
  }
  clear_has_userhead();
}
inline const ::std::string& GroupmanageGroupCreateGroupNtf::userhead() const {
  return *userhead_;
}
inline void GroupmanageGroupCreateGroupNtf::set_userhead(const ::std::string& value) {
  set_has_userhead();
  if (userhead_ == &::google::protobuf::internal::kEmptyString) {
    userhead_ = new ::std::string;
  }
  userhead_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_userhead(const char* value) {
  set_has_userhead();
  if (userhead_ == &::google::protobuf::internal::kEmptyString) {
    userhead_ = new ::std::string;
  }
  userhead_->assign(value);
}
inline void GroupmanageGroupCreateGroupNtf::set_userhead(const char* value, size_t size) {
  set_has_userhead();
  if (userhead_ == &::google::protobuf::internal::kEmptyString) {
    userhead_ = new ::std::string;
  }
  userhead_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::mutable_userhead() {
  set_has_userhead();
  if (userhead_ == &::google::protobuf::internal::kEmptyString) {
    userhead_ = new ::std::string;
  }
  return userhead_;
}
inline ::std::string* GroupmanageGroupCreateGroupNtf::release_userhead() {
  clear_has_userhead();
  if (userhead_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = userhead_;
    userhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanageGroupCreateGroupNtf::set_allocated_userhead(::std::string* userhead) {
  if (userhead_ != &::google::protobuf::internal::kEmptyString) {
    delete userhead_;
  }
  if (userhead) {
    set_has_userhead();
    userhead_ = userhead;
  } else {
    clear_has_userhead();
    userhead_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupGroupmanagerCreateGroupResult

// required int32 result = 1;
inline bool GroupGroupmanagerCreateGroupResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GroupGroupmanagerCreateGroupResult::result() const {
  return result_;
}
inline void GroupGroupmanagerCreateGroupResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 gateid = 2;
inline bool GroupGroupmanagerCreateGroupResult::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerCreateGroupResult::gateid() const {
  return gateid_;
}
inline void GroupGroupmanagerCreateGroupResult::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupGroupmanagerCreateGroupResult::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerCreateGroupResult::clientid() const {
  return clientid_;
}
inline void GroupGroupmanagerCreateGroupResult::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 4;
inline bool GroupGroupmanagerCreateGroupResult::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupGroupmanagerCreateGroupResult::user() const {
  return *user_;
}
inline void GroupGroupmanagerCreateGroupResult::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupGroupmanagerCreateGroupResult::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupGroupmanagerCreateGroupResult::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerCreateGroupResult::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupGroupmanagerCreateGroupResult::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanagerCreateGroupResult::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string name = 5;
inline bool GroupGroupmanagerCreateGroupResult::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupGroupmanagerCreateGroupResult::name() const {
  return *name_;
}
inline void GroupGroupmanagerCreateGroupResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupGroupmanagerCreateGroupResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupGroupmanagerCreateGroupResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerCreateGroupResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GroupGroupmanagerCreateGroupResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanagerCreateGroupResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 groupid = 6;
inline bool GroupGroupmanagerCreateGroupResult::has_groupid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_groupid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerCreateGroupResult::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerCreateGroupResult::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string head = 7;
inline bool GroupGroupmanagerCreateGroupResult::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& GroupGroupmanagerCreateGroupResult::head() const {
  return *head_;
}
inline void GroupGroupmanagerCreateGroupResult::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupGroupmanagerCreateGroupResult::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupGroupmanagerCreateGroupResult::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerCreateGroupResult::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* GroupGroupmanagerCreateGroupResult::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanagerCreateGroupResult::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint64 groupserverid = 8;
inline bool GroupGroupmanagerCreateGroupResult::has_groupserverid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_groupserverid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_groupserverid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_groupserverid() {
  groupserverid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupserverid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerCreateGroupResult::groupserverid() const {
  return groupserverid_;
}
inline void GroupGroupmanagerCreateGroupResult::set_groupserverid(::google::protobuf::uint64 value) {
  set_has_groupserverid();
  groupserverid_ = value;
}

// optional int32 serverid = 9;
inline bool GroupGroupmanagerCreateGroupResult::has_serverid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GroupGroupmanagerCreateGroupResult::set_has_serverid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GroupGroupmanagerCreateGroupResult::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GroupGroupmanagerCreateGroupResult::serverid() const {
  return serverid_;
}
inline void GroupGroupmanagerCreateGroupResult::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerGroupCreateGroupRsp

// required int32 result = 1;
inline bool GroupmanagerGroupCreateGroupRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupCreateGroupRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GroupmanagerGroupCreateGroupRsp::result() const {
  return result_;
}
inline void GroupmanagerGroupCreateGroupRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 gateid = 2;
inline bool GroupmanagerGroupCreateGroupRsp::has_gateid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupCreateGroupRsp::set_has_gateid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupCreateGroupRsp::gateid() const {
  return gateid_;
}
inline void GroupmanagerGroupCreateGroupRsp::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanagerGroupCreateGroupRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupCreateGroupRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupCreateGroupRsp::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupCreateGroupRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string name = 4;
inline bool GroupmanagerGroupCreateGroupRsp::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupCreateGroupRsp::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupmanagerGroupCreateGroupRsp::name() const {
  return *name_;
}
inline void GroupmanagerGroupCreateGroupRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupmanagerGroupCreateGroupRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupmanagerGroupCreateGroupRsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupCreateGroupRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GroupmanagerGroupCreateGroupRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupCreateGroupRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint64 groupid = 5;
inline bool GroupmanagerGroupCreateGroupRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupmanagerGroupCreateGroupRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupCreateGroupRsp::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupCreateGroupRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required string head = 6;
inline bool GroupmanagerGroupCreateGroupRsp::has_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupmanagerGroupCreateGroupRsp::set_has_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& GroupmanagerGroupCreateGroupRsp::head() const {
  return *head_;
}
inline void GroupmanagerGroupCreateGroupRsp::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupmanagerGroupCreateGroupRsp::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupmanagerGroupCreateGroupRsp::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupCreateGroupRsp::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* GroupmanagerGroupCreateGroupRsp::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupCreateGroupRsp::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 serverid = 7;
inline bool GroupmanagerGroupCreateGroupRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupmanagerGroupCreateGroupRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupmanagerGroupCreateGroupRsp::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GroupmanagerGroupCreateGroupRsp::serverid() const {
  return serverid_;
}
inline void GroupmanagerGroupCreateGroupRsp::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// GroupGroupmanagerAddMemberToGroupReq

// required uint64 gateid = 1;
inline bool GroupGroupmanagerAddMemberToGroupReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerAddMemberToGroupReq::gateid() const {
  return gateid_;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupGroupmanagerAddMemberToGroupReq::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupGroupmanagerAddMemberToGroupReq::gateresid() const {
  return gateresid_;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupGroupmanagerAddMemberToGroupReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerAddMemberToGroupReq::clientid() const {
  return clientid_;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required uint64 groupid = 4;
inline bool GroupGroupmanagerAddMemberToGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerAddMemberToGroupReq::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated string users = 5;
inline int GroupGroupmanagerAddMemberToGroupReq::users_size() const {
  return users_.size();
}
inline void GroupGroupmanagerAddMemberToGroupReq::clear_users() {
  users_.Clear();
}
inline const ::std::string& GroupGroupmanagerAddMemberToGroupReq::users(int index) const {
  return users_.Get(index);
}
inline ::std::string* GroupGroupmanagerAddMemberToGroupReq::mutable_users(int index) {
  return users_.Mutable(index);
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_users(int index, const ::std::string& value) {
  users_.Mutable(index)->assign(value);
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_users(int index, const char* value) {
  users_.Mutable(index)->assign(value);
}
inline void GroupGroupmanagerAddMemberToGroupReq::set_users(int index, const char* value, size_t size) {
  users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerAddMemberToGroupReq::add_users() {
  return users_.Add();
}
inline void GroupGroupmanagerAddMemberToGroupReq::add_users(const ::std::string& value) {
  users_.Add()->assign(value);
}
inline void GroupGroupmanagerAddMemberToGroupReq::add_users(const char* value) {
  users_.Add()->assign(value);
}
inline void GroupGroupmanagerAddMemberToGroupReq::add_users(const char* value, size_t size) {
  users_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupGroupmanagerAddMemberToGroupReq::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupGroupmanagerAddMemberToGroupReq::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// GroupmanagerGroupAddMemberToGroupRsp

// required uint64 gateid = 1;
inline bool GroupmanagerGroupAddMemberToGroupRsp::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_gateid() {
  gateid_ = GOOGLE_ULONGLONG(0);
  clear_has_gateid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupAddMemberToGroupRsp::gateid() const {
  return gateid_;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_gateid(::google::protobuf::uint64 value) {
  set_has_gateid();
  gateid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupmanagerGroupAddMemberToGroupRsp::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGroupAddMemberToGroupRsp::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanagerGroupAddMemberToGroupRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupAddMemberToGroupRsp::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required uint64 groupid = 4;
inline bool GroupmanagerGroupAddMemberToGroupRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupAddMemberToGroupRsp::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupAddMemberToGroupRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated .sglib.publicproto.GroupMemberPosInfo users = 5;
inline int GroupmanagerGroupAddMemberToGroupRsp::users_size() const {
  return users_.size();
}
inline void GroupmanagerGroupAddMemberToGroupRsp::clear_users() {
  users_.Clear();
}
inline const ::sglib::publicproto::GroupMemberPosInfo& GroupmanagerGroupAddMemberToGroupRsp::users(int index) const {
  return users_.Get(index);
}
inline ::sglib::publicproto::GroupMemberPosInfo* GroupmanagerGroupAddMemberToGroupRsp::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::sglib::publicproto::GroupMemberPosInfo* GroupmanagerGroupAddMemberToGroupRsp::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberPosInfo >&
GroupmanagerGroupAddMemberToGroupRsp::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::sglib::publicproto::GroupMemberPosInfo >*
GroupmanagerGroupAddMemberToGroupRsp::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// GroupGroupmanagerForAgreeJoinAskInfoReq

// required int32 gateresid = 1;
inline bool GroupGroupmanagerForAgreeJoinAskInfoReq::has_gateresid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::set_has_gateresid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupGroupmanagerForAgreeJoinAskInfoReq::gateresid() const {
  return gateresid_;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 2;
inline bool GroupGroupmanagerForAgreeJoinAskInfoReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerForAgreeJoinAskInfoReq::clientid() const {
  return clientid_;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required uint64 groupid = 3;
inline bool GroupGroupmanagerForAgreeJoinAskInfoReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerForAgreeJoinAskInfoReq::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerForAgreeJoinAskInfoReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerGroupForAgreeJoinAskInfoRsp

// required int32 result = 1;
inline bool GroupmanagerGroupForAgreeJoinAskInfoRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GroupmanagerGroupForAgreeJoinAskInfoRsp::result() const {
  return result_;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required int32 gateresid = 2;
inline bool GroupmanagerGroupForAgreeJoinAskInfoRsp::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGroupForAgreeJoinAskInfoRsp::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanagerGroupForAgreeJoinAskInfoRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupForAgreeJoinAskInfoRsp::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required uint64 groupid = 4;
inline bool GroupmanagerGroupForAgreeJoinAskInfoRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupForAgreeJoinAskInfoRsp::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional string user = 5;
inline bool GroupmanagerGroupForAgreeJoinAskInfoRsp::has_user() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_has_user() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_has_user() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupmanagerGroupForAgreeJoinAskInfoRsp::user() const {
  return *user_;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupForAgreeJoinAskInfoRsp::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupmanagerGroupForAgreeJoinAskInfoRsp::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name = 6;
inline bool GroupmanagerGroupForAgreeJoinAskInfoRsp::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GroupmanagerGroupForAgreeJoinAskInfoRsp::name() const {
  return *name_;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupForAgreeJoinAskInfoRsp::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* GroupmanagerGroupForAgreeJoinAskInfoRsp::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string head = 7;
inline bool GroupmanagerGroupForAgreeJoinAskInfoRsp::has_head() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_has_head() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_has_head() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::clear_head() {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    head_->clear();
  }
  clear_has_head();
}
inline const ::std::string& GroupmanagerGroupForAgreeJoinAskInfoRsp::head() const {
  return *head_;
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_head(const ::std::string& value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_head(const char* value) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(value);
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_head(const char* value, size_t size) {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  head_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupForAgreeJoinAskInfoRsp::mutable_head() {
  set_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    head_ = new ::std::string;
  }
  return head_;
}
inline ::std::string* GroupmanagerGroupForAgreeJoinAskInfoRsp::release_head() {
  clear_has_head();
  if (head_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = head_;
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupForAgreeJoinAskInfoRsp::set_allocated_head(::std::string* head) {
  if (head_ != &::google::protobuf::internal::kEmptyString) {
    delete head_;
  }
  if (head) {
    set_has_head();
    head_ = head;
  } else {
    clear_has_head();
    head_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupmanagerGroupLoadGroupNtf

// required uint64 groupid = 1;
inline bool GroupmanagerGroupLoadGroupNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupLoadGroupNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupLoadGroupNtf::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupLoadGroupNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupmanagerGroupLoadGroupNtf::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupLoadGroupNtf::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGroupLoadGroupNtf::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGroupLoadGroupNtf::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanagerGroupLoadGroupNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupLoadGroupNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupLoadGroupNtf::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupLoadGroupNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 4;
inline bool GroupmanagerGroupLoadGroupNtf::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupLoadGroupNtf::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupLoadGroupNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupmanagerGroupLoadGroupNtf::user() const {
  return *user_;
}
inline void GroupmanagerGroupLoadGroupNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupLoadGroupNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupLoadGroupNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupLoadGroupNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupmanagerGroupLoadGroupNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupLoadGroupNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupGroupmanagerLoadGroupResult

// required int32 result = 1;
inline bool GroupGroupmanagerLoadGroupResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerLoadGroupResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GroupGroupmanagerLoadGroupResult::result() const {
  return result_;
}
inline void GroupGroupmanagerLoadGroupResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool GroupGroupmanagerLoadGroupResult::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerLoadGroupResult::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerLoadGroupResult::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerLoadGroupResult::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// optional int32 serverid = 3;
inline bool GroupGroupmanagerLoadGroupResult::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerLoadGroupResult::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 GroupGroupmanagerLoadGroupResult::serverid() const {
  return serverid_;
}
inline void GroupGroupmanagerLoadGroupResult::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string user = 4;
inline bool GroupGroupmanagerLoadGroupResult::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupGroupmanagerLoadGroupResult::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupGroupmanagerLoadGroupResult::user() const {
  return *user_;
}
inline void GroupGroupmanagerLoadGroupResult::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupGroupmanagerLoadGroupResult::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupGroupmanagerLoadGroupResult::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerLoadGroupResult::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupGroupmanagerLoadGroupResult::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupGroupmanagerLoadGroupResult::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 totalgroup = 5;
inline bool GroupGroupmanagerLoadGroupResult::has_totalgroup() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupGroupmanagerLoadGroupResult::set_has_totalgroup() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_has_totalgroup() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_totalgroup() {
  totalgroup_ = 0;
  clear_has_totalgroup();
}
inline ::google::protobuf::int32 GroupGroupmanagerLoadGroupResult::totalgroup() const {
  return totalgroup_;
}
inline void GroupGroupmanagerLoadGroupResult::set_totalgroup(::google::protobuf::int32 value) {
  set_has_totalgroup();
  totalgroup_ = value;
}

// required int32 totalmember = 6;
inline bool GroupGroupmanagerLoadGroupResult::has_totalmember() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupGroupmanagerLoadGroupResult::set_has_totalmember() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_has_totalmember() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupGroupmanagerLoadGroupResult::clear_totalmember() {
  totalmember_ = 0;
  clear_has_totalmember();
}
inline ::google::protobuf::int32 GroupGroupmanagerLoadGroupResult::totalmember() const {
  return totalmember_;
}
inline void GroupGroupmanagerLoadGroupResult::set_totalmember(::google::protobuf::int32 value) {
  set_has_totalmember();
  totalmember_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerGroupMemberOnlineNtf

// required uint64 groupid = 1;
inline bool GroupmanagerGroupMemberOnlineNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupMemberOnlineNtf::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupmanagerGroupMemberOnlineNtf::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGroupMemberOnlineNtf::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanagerGroupMemberOnlineNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupMemberOnlineNtf::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 4;
inline bool GroupmanagerGroupMemberOnlineNtf::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupMemberOnlineNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupmanagerGroupMemberOnlineNtf::user() const {
  return *user_;
}
inline void GroupmanagerGroupMemberOnlineNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupMemberOnlineNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupMemberOnlineNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupMemberOnlineNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupmanagerGroupMemberOnlineNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupMemberOnlineNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupmanagerGroupMemberOfflineNtf

// required uint64 groupid = 1;
inline bool GroupmanagerGroupMemberOfflineNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupMemberOfflineNtf::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupmanagerGroupMemberOfflineNtf::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGroupMemberOfflineNtf::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanagerGroupMemberOfflineNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupMemberOfflineNtf::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required string user = 4;
inline bool GroupmanagerGroupMemberOfflineNtf::has_user() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_has_user() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_has_user() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupMemberOfflineNtf::clear_user() {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    user_->clear();
  }
  clear_has_user();
}
inline const ::std::string& GroupmanagerGroupMemberOfflineNtf::user() const {
  return *user_;
}
inline void GroupmanagerGroupMemberOfflineNtf::set_user(const ::std::string& value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupMemberOfflineNtf::set_user(const char* value) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(value);
}
inline void GroupmanagerGroupMemberOfflineNtf::set_user(const char* value, size_t size) {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  user_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupMemberOfflineNtf::mutable_user() {
  set_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    user_ = new ::std::string;
  }
  return user_;
}
inline ::std::string* GroupmanagerGroupMemberOfflineNtf::release_user() {
  clear_has_user();
  if (user_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = user_;
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupMemberOfflineNtf::set_allocated_user(::std::string* user) {
  if (user_ != &::google::protobuf::internal::kEmptyString) {
    delete user_;
  }
  if (user) {
    set_has_user();
    user_ = user;
  } else {
    clear_has_user();
    user_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupGroupmanagerMemberLeaveNtf

// required uint64 groupid = 1;
inline bool GroupGroupmanagerMemberLeaveNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerMemberLeaveNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerMemberLeaveNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerMemberLeaveNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerMemberLeaveNtf::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerMemberLeaveNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// repeated string user = 2;
inline int GroupGroupmanagerMemberLeaveNtf::user_size() const {
  return user_.size();
}
inline void GroupGroupmanagerMemberLeaveNtf::clear_user() {
  user_.Clear();
}
inline const ::std::string& GroupGroupmanagerMemberLeaveNtf::user(int index) const {
  return user_.Get(index);
}
inline ::std::string* GroupGroupmanagerMemberLeaveNtf::mutable_user(int index) {
  return user_.Mutable(index);
}
inline void GroupGroupmanagerMemberLeaveNtf::set_user(int index, const ::std::string& value) {
  user_.Mutable(index)->assign(value);
}
inline void GroupGroupmanagerMemberLeaveNtf::set_user(int index, const char* value) {
  user_.Mutable(index)->assign(value);
}
inline void GroupGroupmanagerMemberLeaveNtf::set_user(int index, const char* value, size_t size) {
  user_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupGroupmanagerMemberLeaveNtf::add_user() {
  return user_.Add();
}
inline void GroupGroupmanagerMemberLeaveNtf::add_user(const ::std::string& value) {
  user_.Add()->assign(value);
}
inline void GroupGroupmanagerMemberLeaveNtf::add_user(const char* value) {
  user_.Add()->assign(value);
}
inline void GroupGroupmanagerMemberLeaveNtf::add_user(const char* value, size_t size) {
  user_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GroupGroupmanagerMemberLeaveNtf::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GroupGroupmanagerMemberLeaveNtf::mutable_user() {
  return &user_;
}

// -------------------------------------------------------------------

// GroupGroupmanagerGroupDeleteNtf

// required uint64 groupid = 1;
inline bool GroupGroupmanagerGroupDeleteNtf::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerGroupDeleteNtf::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerGroupDeleteNtf::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerGroupDeleteNtf::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerGroupDeleteNtf::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerGroupDeleteNtf::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// GroupGroupmanagerCreateGameRoomReq

// required uint64 groupid = 1;
inline bool GroupGroupmanagerCreateGameRoomReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerCreateGameRoomReq::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupGroupmanagerCreateGameRoomReq::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupGroupmanagerCreateGameRoomReq::gateresid() const {
  return gateresid_;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupGroupmanagerCreateGameRoomReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerCreateGameRoomReq::clientid() const {
  return clientid_;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 game = 4;
inline bool GroupGroupmanagerCreateGameRoomReq::has_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_has_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_has_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupGroupmanagerCreateGameRoomReq::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 GroupGroupmanagerCreateGameRoomReq::game() const {
  return game_;
}
inline void GroupGroupmanagerCreateGameRoomReq::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerGroupCreateGameRoomRsp

// required int32 result = 1;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GroupmanagerGroupCreateGameRoomRsp::result() const {
  return result_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupCreateGameRoomRsp::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 3;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_gateresid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_gateresid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGroupCreateGameRoomRsp::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 4;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupCreateGameRoomRsp::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 game = 5;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_game() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_game() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_game() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 GroupmanagerGroupCreateGameRoomRsp::game() const {
  return game_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// optional string ip = 6;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_ip() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GroupmanagerGroupCreateGameRoomRsp::ip() const {
  return *ip_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupCreateGameRoomRsp::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GroupmanagerGroupCreateGameRoomRsp::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 7;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_port() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_port() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GroupmanagerGroupCreateGameRoomRsp::port() const {
  return port_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 roomid = 8;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_roomid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_roomid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 GroupmanagerGroupCreateGameRoomRsp::roomid() const {
  return roomid_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional string password = 9;
inline bool GroupmanagerGroupCreateGameRoomRsp::has_password() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_has_password() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_has_password() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GroupmanagerGroupCreateGameRoomRsp::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& GroupmanagerGroupCreateGameRoomRsp::password() const {
  return *password_;
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GroupmanagerGroupCreateGameRoomRsp::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* GroupmanagerGroupCreateGameRoomRsp::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GroupmanagerGroupCreateGameRoomRsp::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupmanagerGamemanagerCreateGameRoomReq

// required uint64 groupid = 1;
inline bool GroupmanagerGamemanagerCreateGameRoomReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGamemanagerCreateGameRoomReq::groupid() const {
  return groupid_;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupmanagerGamemanagerCreateGameRoomReq::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGamemanagerCreateGameRoomReq::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupmanagerGamemanagerCreateGameRoomReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGamemanagerCreateGameRoomReq::clientid() const {
  return clientid_;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 game = 4;
inline bool GroupmanagerGamemanagerCreateGameRoomReq::has_game() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_has_game() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_has_game() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 GroupmanagerGamemanagerCreateGameRoomReq::game() const {
  return game_;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// required int32 gameid = 5;
inline bool GroupmanagerGamemanagerCreateGameRoomReq::has_gameid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_has_gameid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_has_gameid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_gameid() {
  gameid_ = 0;
  clear_has_gameid();
}
inline ::google::protobuf::int32 GroupmanagerGamemanagerCreateGameRoomReq::gameid() const {
  return gameid_;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_gameid(::google::protobuf::int32 value) {
  set_has_gameid();
  gameid_ = value;
}

// required uint64 serverid = 6;
inline bool GroupmanagerGamemanagerCreateGameRoomReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::uint64 GroupmanagerGamemanagerCreateGameRoomReq::serverid() const {
  return serverid_;
}
inline void GroupmanagerGamemanagerCreateGameRoomReq::set_serverid(::google::protobuf::uint64 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// GamemanagerGroupmanagerCreateGameRoomRsp

// required int32 result = 1;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GamemanagerGroupmanagerCreateGameRoomRsp::result() const {
  return result_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GamemanagerGroupmanagerCreateGameRoomRsp::groupid() const {
  return groupid_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 3;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_gateresid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_gateresid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GamemanagerGroupmanagerCreateGameRoomRsp::gateresid() const {
  return gateresid_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 4;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GamemanagerGroupmanagerCreateGameRoomRsp::clientid() const {
  return clientid_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 game = 5;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_game() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_game() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_game() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_game() {
  game_ = 0;
  clear_has_game();
}
inline ::google::protobuf::int32 GamemanagerGroupmanagerCreateGameRoomRsp::game() const {
  return game_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_game(::google::protobuf::int32 value) {
  set_has_game();
  game_ = value;
}

// required uint64 serverid = 6;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_serverid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_serverid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_serverid() {
  serverid_ = GOOGLE_ULONGLONG(0);
  clear_has_serverid();
}
inline ::google::protobuf::uint64 GamemanagerGroupmanagerCreateGameRoomRsp::serverid() const {
  return serverid_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_serverid(::google::protobuf::uint64 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional string ip = 7;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_ip() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_ip() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_ip() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GamemanagerGroupmanagerCreateGameRoomRsp::ip() const {
  return *ip_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GamemanagerGroupmanagerCreateGameRoomRsp::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GamemanagerGroupmanagerCreateGameRoomRsp::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 8;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_port() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_port() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_port() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GamemanagerGroupmanagerCreateGameRoomRsp::port() const {
  return port_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 roomid = 9;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_roomid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_roomid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_roomid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_roomid() {
  roomid_ = 0;
  clear_has_roomid();
}
inline ::google::protobuf::int32 GamemanagerGroupmanagerCreateGameRoomRsp::roomid() const {
  return roomid_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_roomid(::google::protobuf::int32 value) {
  set_has_roomid();
  roomid_ = value;
}

// optional string password = 10;
inline bool GamemanagerGroupmanagerCreateGameRoomRsp::has_password() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_has_password() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_has_password() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::clear_password() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& GamemanagerGroupmanagerCreateGameRoomRsp::password() const {
  return *password_;
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(value);
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GamemanagerGroupmanagerCreateGameRoomRsp::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    password_ = new ::std::string;
  }
  return password_;
}
inline ::std::string* GamemanagerGroupmanagerCreateGameRoomRsp::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GamemanagerGroupmanagerCreateGameRoomRsp::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GroupGateLoginSuccessNtf

// required uint64 clientid = 1;
inline bool GroupGateLoginSuccessNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGateLoginSuccessNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGateLoginSuccessNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGateLoginSuccessNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGateLoginSuccessNtf::clientid() const {
  return clientid_;
}
inline void GroupGateLoginSuccessNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// -------------------------------------------------------------------

// GroupGroupmanagerJoinGroupReq

// required uint64 groupid = 1;
inline bool GroupGroupmanagerJoinGroupReq::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupGroupmanagerJoinGroupReq::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupGroupmanagerJoinGroupReq::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupGroupmanagerJoinGroupReq::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerJoinGroupReq::groupid() const {
  return groupid_;
}
inline void GroupGroupmanagerJoinGroupReq::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 2;
inline bool GroupGroupmanagerJoinGroupReq::has_gateresid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupGroupmanagerJoinGroupReq::set_has_gateresid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupGroupmanagerJoinGroupReq::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupGroupmanagerJoinGroupReq::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupGroupmanagerJoinGroupReq::gateresid() const {
  return gateresid_;
}
inline void GroupGroupmanagerJoinGroupReq::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 3;
inline bool GroupGroupmanagerJoinGroupReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupGroupmanagerJoinGroupReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupGroupmanagerJoinGroupReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupGroupmanagerJoinGroupReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupGroupmanagerJoinGroupReq::clientid() const {
  return clientid_;
}
inline void GroupGroupmanagerJoinGroupReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// -------------------------------------------------------------------

// GroupmanagerGroupJoinGroupRsp

// required int32 result = 1;
inline bool GroupmanagerGroupJoinGroupRsp::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupmanagerGroupJoinGroupRsp::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GroupmanagerGroupJoinGroupRsp::result() const {
  return result_;
}
inline void GroupmanagerGroupJoinGroupRsp::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// required uint64 groupid = 2;
inline bool GroupmanagerGroupJoinGroupRsp::has_groupid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupmanagerGroupJoinGroupRsp::set_has_groupid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_groupid() {
  groupid_ = GOOGLE_ULONGLONG(0);
  clear_has_groupid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupJoinGroupRsp::groupid() const {
  return groupid_;
}
inline void GroupmanagerGroupJoinGroupRsp::set_groupid(::google::protobuf::uint64 value) {
  set_has_groupid();
  groupid_ = value;
}

// required int32 gateresid = 3;
inline bool GroupmanagerGroupJoinGroupRsp::has_gateresid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupmanagerGroupJoinGroupRsp::set_has_gateresid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_has_gateresid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_gateresid() {
  gateresid_ = 0;
  clear_has_gateresid();
}
inline ::google::protobuf::int32 GroupmanagerGroupJoinGroupRsp::gateresid() const {
  return gateresid_;
}
inline void GroupmanagerGroupJoinGroupRsp::set_gateresid(::google::protobuf::int32 value) {
  set_has_gateresid();
  gateresid_ = value;
}

// required uint64 clientid = 4;
inline bool GroupmanagerGroupJoinGroupRsp::has_clientid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupmanagerGroupJoinGroupRsp::set_has_clientid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupmanagerGroupJoinGroupRsp::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GroupmanagerGroupJoinGroupRsp::clientid() const {
  return clientid_;
}
inline void GroupmanagerGroupJoinGroupRsp::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace groupproto
}  // namespace sglib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_group_2eproto__INCLUDED
