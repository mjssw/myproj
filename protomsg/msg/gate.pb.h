// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gate.proto

#ifndef PROTOBUF_gate_2eproto__INCLUDED
#define PROTOBUF_gate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace sglib {
namespace gateproto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_gate_2eproto();
void protobuf_AssignDesc_gate_2eproto();
void protobuf_ShutdownFile_gate_2eproto();

class ServerGateForwardMsgReq;
class ServerGateCloseClientReq;
class ServerGateSetForwardServerReq;
class GateServerForwardMsgReq;
class GateServerReportStatusReq;
class GateServerClientCloseNtf;
class ServerGateConnectNewServerNtf;

// ===================================================================

class ServerGateForwardMsgReq : public ::google::protobuf::Message {
 public:
  ServerGateForwardMsgReq();
  virtual ~ServerGateForwardMsgReq();

  ServerGateForwardMsgReq(const ServerGateForwardMsgReq& from);

  inline ServerGateForwardMsgReq& operator=(const ServerGateForwardMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGateForwardMsgReq& default_instance();

  void Swap(ServerGateForwardMsgReq* other);

  // implements Message ----------------------------------------------

  ServerGateForwardMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGateForwardMsgReq& from);
  void MergeFrom(const ServerGateForwardMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint64 clientid = 1;
  inline int clientid_size() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline ::google::protobuf::uint64 clientid(int index) const;
  inline void set_clientid(int index, ::google::protobuf::uint64 value);
  inline void add_clientid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      clientid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_clientid();

  // required bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sglib.gateproto.ServerGateForwardMsgReq)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > clientid_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static ServerGateForwardMsgReq* default_instance_;
};
// -------------------------------------------------------------------

class ServerGateCloseClientReq : public ::google::protobuf::Message {
 public:
  ServerGateCloseClientReq();
  virtual ~ServerGateCloseClientReq();

  ServerGateCloseClientReq(const ServerGateCloseClientReq& from);

  inline ServerGateCloseClientReq& operator=(const ServerGateCloseClientReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGateCloseClientReq& default_instance();

  void Swap(ServerGateCloseClientReq* other);

  // implements Message ----------------------------------------------

  ServerGateCloseClientReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGateCloseClientReq& from);
  void MergeFrom(const ServerGateCloseClientReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 clientid = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.gateproto.ServerGateCloseClientReq)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static ServerGateCloseClientReq* default_instance_;
};
// -------------------------------------------------------------------

class ServerGateSetForwardServerReq : public ::google::protobuf::Message {
 public:
  ServerGateSetForwardServerReq();
  virtual ~ServerGateSetForwardServerReq();

  ServerGateSetForwardServerReq(const ServerGateSetForwardServerReq& from);

  inline ServerGateSetForwardServerReq& operator=(const ServerGateSetForwardServerReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGateSetForwardServerReq& default_instance();

  void Swap(ServerGateSetForwardServerReq* other);

  // implements Message ----------------------------------------------

  ServerGateSetForwardServerReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGateSetForwardServerReq& from);
  void MergeFrom(const ServerGateSetForwardServerReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 clientid = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required int32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::int32 serverid() const;
  inline void set_serverid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gateproto.ServerGateSetForwardServerReq)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;
  ::google::protobuf::int32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static ServerGateSetForwardServerReq* default_instance_;
};
// -------------------------------------------------------------------

class GateServerForwardMsgReq : public ::google::protobuf::Message {
 public:
  GateServerForwardMsgReq();
  virtual ~GateServerForwardMsgReq();

  GateServerForwardMsgReq(const GateServerForwardMsgReq& from);

  inline GateServerForwardMsgReq& operator=(const GateServerForwardMsgReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateServerForwardMsgReq& default_instance();

  void Swap(GateServerForwardMsgReq* other);

  // implements Message ----------------------------------------------

  GateServerForwardMsgReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateServerForwardMsgReq& from);
  void MergeFrom(const GateServerForwardMsgReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 clientid = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // required bytes msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const void* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:sglib.gateproto.GateServerForwardMsgReq)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateServerForwardMsgReq* default_instance_;
};
// -------------------------------------------------------------------

class GateServerReportStatusReq : public ::google::protobuf::Message {
 public:
  GateServerReportStatusReq();
  virtual ~GateServerReportStatusReq();

  GateServerReportStatusReq(const GateServerReportStatusReq& from);

  inline GateServerReportStatusReq& operator=(const GateServerReportStatusReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateServerReportStatusReq& default_instance();

  void Swap(GateServerReportStatusReq* other);

  // implements Message ----------------------------------------------

  GateServerReportStatusReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateServerReportStatusReq& from);
  void MergeFrom(const GateServerReportStatusReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gateid = 1;
  inline bool has_gateid() const;
  inline void clear_gateid();
  static const int kGateidFieldNumber = 1;
  inline ::google::protobuf::int32 gateid() const;
  inline void set_gateid(::google::protobuf::int32 value);

  // required int32 cur_conn = 2;
  inline bool has_cur_conn() const;
  inline void clear_cur_conn();
  static const int kCurConnFieldNumber = 2;
  inline ::google::protobuf::int32 cur_conn() const;
  inline void set_cur_conn(::google::protobuf::int32 value);

  // required int32 max_conn = 3;
  inline bool has_max_conn() const;
  inline void clear_max_conn();
  static const int kMaxConnFieldNumber = 3;
  inline ::google::protobuf::int32 max_conn() const;
  inline void set_max_conn(::google::protobuf::int32 value);

  // optional string ip = 4;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 4;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional int32 port = 5;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 5;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gateproto.GateServerReportStatusReq)
 private:
  inline void set_has_gateid();
  inline void clear_has_gateid();
  inline void set_has_cur_conn();
  inline void clear_has_cur_conn();
  inline void set_has_max_conn();
  inline void clear_has_max_conn();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 gateid_;
  ::google::protobuf::int32 cur_conn_;
  ::std::string* ip_;
  ::google::protobuf::int32 max_conn_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateServerReportStatusReq* default_instance_;
};
// -------------------------------------------------------------------

class GateServerClientCloseNtf : public ::google::protobuf::Message {
 public:
  GateServerClientCloseNtf();
  virtual ~GateServerClientCloseNtf();

  GateServerClientCloseNtf(const GateServerClientCloseNtf& from);

  inline GateServerClientCloseNtf& operator=(const GateServerClientCloseNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GateServerClientCloseNtf& default_instance();

  void Swap(GateServerClientCloseNtf* other);

  // implements Message ----------------------------------------------

  GateServerClientCloseNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GateServerClientCloseNtf& from);
  void MergeFrom(const GateServerClientCloseNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 clientid = 1;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientidFieldNumber = 1;
  inline ::google::protobuf::uint64 clientid() const;
  inline void set_clientid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:sglib.gateproto.GateServerClientCloseNtf)
 private:
  inline void set_has_clientid();
  inline void clear_has_clientid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 clientid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static GateServerClientCloseNtf* default_instance_;
};
// -------------------------------------------------------------------

class ServerGateConnectNewServerNtf : public ::google::protobuf::Message {
 public:
  ServerGateConnectNewServerNtf();
  virtual ~ServerGateConnectNewServerNtf();

  ServerGateConnectNewServerNtf(const ServerGateConnectNewServerNtf& from);

  inline ServerGateConnectNewServerNtf& operator=(const ServerGateConnectNewServerNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerGateConnectNewServerNtf& default_instance();

  void Swap(ServerGateConnectNewServerNtf* other);

  // implements Message ----------------------------------------------

  ServerGateConnectNewServerNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerGateConnectNewServerNtf& from);
  void MergeFrom(const ServerGateConnectNewServerNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 port = 3;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 3;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sglib.gateproto.ServerGateConnectNewServerNtf)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 port_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_gate_2eproto();
  friend void protobuf_AssignDesc_gate_2eproto();
  friend void protobuf_ShutdownFile_gate_2eproto();

  void InitAsDefaultInstance();
  static ServerGateConnectNewServerNtf* default_instance_;
};
// ===================================================================


// ===================================================================

// ServerGateForwardMsgReq

// repeated uint64 clientid = 1;
inline int ServerGateForwardMsgReq::clientid_size() const {
  return clientid_.size();
}
inline void ServerGateForwardMsgReq::clear_clientid() {
  clientid_.Clear();
}
inline ::google::protobuf::uint64 ServerGateForwardMsgReq::clientid(int index) const {
  return clientid_.Get(index);
}
inline void ServerGateForwardMsgReq::set_clientid(int index, ::google::protobuf::uint64 value) {
  clientid_.Set(index, value);
}
inline void ServerGateForwardMsgReq::add_clientid(::google::protobuf::uint64 value) {
  clientid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
ServerGateForwardMsgReq::clientid() const {
  return clientid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
ServerGateForwardMsgReq::mutable_clientid() {
  return &clientid_;
}

// required bytes msg = 2;
inline bool ServerGateForwardMsgReq::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGateForwardMsgReq::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGateForwardMsgReq::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGateForwardMsgReq::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ServerGateForwardMsgReq::msg() const {
  return *msg_;
}
inline void ServerGateForwardMsgReq::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ServerGateForwardMsgReq::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void ServerGateForwardMsgReq::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerGateForwardMsgReq::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* ServerGateForwardMsgReq::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerGateForwardMsgReq::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ServerGateCloseClientReq

// required uint64 clientid = 1;
inline bool ServerGateCloseClientReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGateCloseClientReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGateCloseClientReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGateCloseClientReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 ServerGateCloseClientReq::clientid() const {
  return clientid_;
}
inline void ServerGateCloseClientReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// -------------------------------------------------------------------

// ServerGateSetForwardServerReq

// required uint64 clientid = 1;
inline bool ServerGateSetForwardServerReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGateSetForwardServerReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGateSetForwardServerReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGateSetForwardServerReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 ServerGateSetForwardServerReq::clientid() const {
  return clientid_;
}
inline void ServerGateSetForwardServerReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required int32 serverid = 2;
inline bool ServerGateSetForwardServerReq::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGateSetForwardServerReq::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGateSetForwardServerReq::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGateSetForwardServerReq::clear_serverid() {
  serverid_ = 0;
  clear_has_serverid();
}
inline ::google::protobuf::int32 ServerGateSetForwardServerReq::serverid() const {
  return serverid_;
}
inline void ServerGateSetForwardServerReq::set_serverid(::google::protobuf::int32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// GateServerForwardMsgReq

// required uint64 clientid = 1;
inline bool GateServerForwardMsgReq::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateServerForwardMsgReq::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateServerForwardMsgReq::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateServerForwardMsgReq::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GateServerForwardMsgReq::clientid() const {
  return clientid_;
}
inline void GateServerForwardMsgReq::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// required bytes msg = 2;
inline bool GateServerForwardMsgReq::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateServerForwardMsgReq::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateServerForwardMsgReq::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateServerForwardMsgReq::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& GateServerForwardMsgReq::msg() const {
  return *msg_;
}
inline void GateServerForwardMsgReq::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GateServerForwardMsgReq::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void GateServerForwardMsgReq::set_msg(const void* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GateServerForwardMsgReq::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* GateServerForwardMsgReq::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GateServerForwardMsgReq::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GateServerReportStatusReq

// required int32 gateid = 1;
inline bool GateServerReportStatusReq::has_gateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateServerReportStatusReq::set_has_gateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateServerReportStatusReq::clear_has_gateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateServerReportStatusReq::clear_gateid() {
  gateid_ = 0;
  clear_has_gateid();
}
inline ::google::protobuf::int32 GateServerReportStatusReq::gateid() const {
  return gateid_;
}
inline void GateServerReportStatusReq::set_gateid(::google::protobuf::int32 value) {
  set_has_gateid();
  gateid_ = value;
}

// required int32 cur_conn = 2;
inline bool GateServerReportStatusReq::has_cur_conn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GateServerReportStatusReq::set_has_cur_conn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GateServerReportStatusReq::clear_has_cur_conn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GateServerReportStatusReq::clear_cur_conn() {
  cur_conn_ = 0;
  clear_has_cur_conn();
}
inline ::google::protobuf::int32 GateServerReportStatusReq::cur_conn() const {
  return cur_conn_;
}
inline void GateServerReportStatusReq::set_cur_conn(::google::protobuf::int32 value) {
  set_has_cur_conn();
  cur_conn_ = value;
}

// required int32 max_conn = 3;
inline bool GateServerReportStatusReq::has_max_conn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GateServerReportStatusReq::set_has_max_conn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GateServerReportStatusReq::clear_has_max_conn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GateServerReportStatusReq::clear_max_conn() {
  max_conn_ = 0;
  clear_has_max_conn();
}
inline ::google::protobuf::int32 GateServerReportStatusReq::max_conn() const {
  return max_conn_;
}
inline void GateServerReportStatusReq::set_max_conn(::google::protobuf::int32 value) {
  set_has_max_conn();
  max_conn_ = value;
}

// optional string ip = 4;
inline bool GateServerReportStatusReq::has_ip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GateServerReportStatusReq::set_has_ip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GateServerReportStatusReq::clear_has_ip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GateServerReportStatusReq::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& GateServerReportStatusReq::ip() const {
  return *ip_;
}
inline void GateServerReportStatusReq::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GateServerReportStatusReq::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void GateServerReportStatusReq::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GateServerReportStatusReq::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* GateServerReportStatusReq::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GateServerReportStatusReq::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 port = 5;
inline bool GateServerReportStatusReq::has_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GateServerReportStatusReq::set_has_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GateServerReportStatusReq::clear_has_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GateServerReportStatusReq::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 GateServerReportStatusReq::port() const {
  return port_;
}
inline void GateServerReportStatusReq::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// GateServerClientCloseNtf

// required uint64 clientid = 1;
inline bool GateServerClientCloseNtf::has_clientid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GateServerClientCloseNtf::set_has_clientid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GateServerClientCloseNtf::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GateServerClientCloseNtf::clear_clientid() {
  clientid_ = GOOGLE_ULONGLONG(0);
  clear_has_clientid();
}
inline ::google::protobuf::uint64 GateServerClientCloseNtf::clientid() const {
  return clientid_;
}
inline void GateServerClientCloseNtf::set_clientid(::google::protobuf::uint64 value) {
  set_has_clientid();
  clientid_ = value;
}

// -------------------------------------------------------------------

// ServerGateConnectNewServerNtf

// required int32 id = 1;
inline bool ServerGateConnectNewServerNtf::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerGateConnectNewServerNtf::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerGateConnectNewServerNtf::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerGateConnectNewServerNtf::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ServerGateConnectNewServerNtf::id() const {
  return id_;
}
inline void ServerGateConnectNewServerNtf::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required string ip = 2;
inline bool ServerGateConnectNewServerNtf::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerGateConnectNewServerNtf::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerGateConnectNewServerNtf::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerGateConnectNewServerNtf::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ServerGateConnectNewServerNtf::ip() const {
  return *ip_;
}
inline void ServerGateConnectNewServerNtf::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerGateConnectNewServerNtf::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void ServerGateConnectNewServerNtf::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ServerGateConnectNewServerNtf::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* ServerGateConnectNewServerNtf::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ServerGateConnectNewServerNtf::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 port = 3;
inline bool ServerGateConnectNewServerNtf::has_port() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerGateConnectNewServerNtf::set_has_port() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerGateConnectNewServerNtf::clear_has_port() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerGateConnectNewServerNtf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ServerGateConnectNewServerNtf::port() const {
  return port_;
}
inline void ServerGateConnectNewServerNtf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gateproto
}  // namespace sglib

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gate_2eproto__INCLUDED
