// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gamemanager.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gamemanager.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sglib {
namespace gamemanagerproto {

namespace {

const ::google::protobuf::Descriptor* GamemanagerCenterReportGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerCenterReportGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGamemanagerReportGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGamemanagerReportGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGamemanagerEnterGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGamemanagerEnterGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamemanagerServerEnterGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerServerEnterGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGamemanagerGateCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGamemanagerGateCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamemanagerCenterGateCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerCenterGateCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGamemanagerDynamicStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGamemanagerDynamicStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamemanagerServerDynamicServerStartNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerServerDynamicServerStartNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamemanagerCenterServerCloseNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerCenterServerCloseNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamemanagerGroupmanagerReportGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerGroupmanagerReportGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GamemanagerServerCreateGameRoomReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GamemanagerServerCreateGameRoomReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerGamemanagerCreateGameRoomRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerGamemanagerCreateGameRoomRsp_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_gamemanager_2eproto() {
  protobuf_AddDesc_gamemanager_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "gamemanager.proto");
  GOOGLE_CHECK(file != NULL);
  GamemanagerCenterReportGameInfo_descriptor_ = file->message_type(0);
  static const int GamemanagerCenterReportGameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterReportGameInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterReportGameInfo, gameservers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterReportGameInfo, gateservers_),
  };
  GamemanagerCenterReportGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerCenterReportGameInfo_descriptor_,
      GamemanagerCenterReportGameInfo::default_instance_,
      GamemanagerCenterReportGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterReportGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterReportGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerCenterReportGameInfo));
  ServerGamemanagerReportGameInfo_descriptor_ = file->message_type(1);
  static const int ServerGamemanagerReportGameInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerReportGameInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerReportGameInfo, gameserver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerReportGameInfo, gateservers_),
  };
  ServerGamemanagerReportGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGamemanagerReportGameInfo_descriptor_,
      ServerGamemanagerReportGameInfo::default_instance_,
      ServerGamemanagerReportGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerReportGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerReportGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGamemanagerReportGameInfo));
  ServerGamemanagerEnterGameReq_descriptor_ = file->message_type(2);
  static const int ServerGamemanagerEnterGameReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerEnterGameReq, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerEnterGameReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerEnterGameReq, gameid_),
  };
  ServerGamemanagerEnterGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGamemanagerEnterGameReq_descriptor_,
      ServerGamemanagerEnterGameReq::default_instance_,
      ServerGamemanagerEnterGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerEnterGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerEnterGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGamemanagerEnterGameReq));
  GamemanagerServerEnterGameRsp_descriptor_ = file->message_type(3);
  static const int GamemanagerServerEnterGameRsp_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, serverid_),
  };
  GamemanagerServerEnterGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerServerEnterGameRsp_descriptor_,
      GamemanagerServerEnterGameRsp::default_instance_,
      GamemanagerServerEnterGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerEnterGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerServerEnterGameRsp));
  ServerGamemanagerGateCloseNtf_descriptor_ = file->message_type(4);
  static const int ServerGamemanagerGateCloseNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerGateCloseNtf, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerGateCloseNtf, gateid_),
  };
  ServerGamemanagerGateCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGamemanagerGateCloseNtf_descriptor_,
      ServerGamemanagerGateCloseNtf::default_instance_,
      ServerGamemanagerGateCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerGateCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerGateCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGamemanagerGateCloseNtf));
  GamemanagerCenterGateCloseNtf_descriptor_ = file->message_type(5);
  static const int GamemanagerCenterGateCloseNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterGateCloseNtf, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterGateCloseNtf, gateid_),
  };
  GamemanagerCenterGateCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerCenterGateCloseNtf_descriptor_,
      GamemanagerCenterGateCloseNtf::default_instance_,
      GamemanagerCenterGateCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterGateCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterGateCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerCenterGateCloseNtf));
  ServerGamemanagerDynamicStartNtf_descriptor_ = file->message_type(6);
  static const int ServerGamemanagerDynamicStartNtf_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerDynamicStartNtf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerDynamicStartNtf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerDynamicStartNtf, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerDynamicStartNtf, gameid_),
  };
  ServerGamemanagerDynamicStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGamemanagerDynamicStartNtf_descriptor_,
      ServerGamemanagerDynamicStartNtf::default_instance_,
      ServerGamemanagerDynamicStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerDynamicStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerDynamicStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGamemanagerDynamicStartNtf));
  GamemanagerServerDynamicServerStartNtf_descriptor_ = file->message_type(7);
  static const int GamemanagerServerDynamicServerStartNtf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerDynamicServerStartNtf, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerDynamicServerStartNtf, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerDynamicServerStartNtf, port_),
  };
  GamemanagerServerDynamicServerStartNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerServerDynamicServerStartNtf_descriptor_,
      GamemanagerServerDynamicServerStartNtf::default_instance_,
      GamemanagerServerDynamicServerStartNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerDynamicServerStartNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerDynamicServerStartNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerServerDynamicServerStartNtf));
  GamemanagerCenterServerCloseNtf_descriptor_ = file->message_type(8);
  static const int GamemanagerCenterServerCloseNtf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterServerCloseNtf, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterServerCloseNtf, serverid_),
  };
  GamemanagerCenterServerCloseNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerCenterServerCloseNtf_descriptor_,
      GamemanagerCenterServerCloseNtf::default_instance_,
      GamemanagerCenterServerCloseNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterServerCloseNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerCenterServerCloseNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerCenterServerCloseNtf));
  GamemanagerGroupmanagerReportGameInfo_descriptor_ = file->message_type(9);
  static const int GamemanagerGroupmanagerReportGameInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerReportGameInfo, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerReportGameInfo, count_),
  };
  GamemanagerGroupmanagerReportGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerGroupmanagerReportGameInfo_descriptor_,
      GamemanagerGroupmanagerReportGameInfo::default_instance_,
      GamemanagerGroupmanagerReportGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerReportGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerGroupmanagerReportGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerGroupmanagerReportGameInfo));
  GamemanagerServerCreateGameRoomReq_descriptor_ = file->message_type(10);
  static const int GamemanagerServerCreateGameRoomReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerCreateGameRoomReq, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerCreateGameRoomReq, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerCreateGameRoomReq, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerCreateGameRoomReq, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerCreateGameRoomReq, serverid_),
  };
  GamemanagerServerCreateGameRoomReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GamemanagerServerCreateGameRoomReq_descriptor_,
      GamemanagerServerCreateGameRoomReq::default_instance_,
      GamemanagerServerCreateGameRoomReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerCreateGameRoomReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GamemanagerServerCreateGameRoomReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GamemanagerServerCreateGameRoomReq));
  ServerGamemanagerCreateGameRoomRsp_descriptor_ = file->message_type(11);
  static const int ServerGamemanagerCreateGameRoomRsp_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, gateresid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, game_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, gameid_),
  };
  ServerGamemanagerCreateGameRoomRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerGamemanagerCreateGameRoomRsp_descriptor_,
      ServerGamemanagerCreateGameRoomRsp::default_instance_,
      ServerGamemanagerCreateGameRoomRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerGamemanagerCreateGameRoomRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerGamemanagerCreateGameRoomRsp));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_gamemanager_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerCenterReportGameInfo_descriptor_, &GamemanagerCenterReportGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGamemanagerReportGameInfo_descriptor_, &ServerGamemanagerReportGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGamemanagerEnterGameReq_descriptor_, &ServerGamemanagerEnterGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerServerEnterGameRsp_descriptor_, &GamemanagerServerEnterGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGamemanagerGateCloseNtf_descriptor_, &ServerGamemanagerGateCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerCenterGateCloseNtf_descriptor_, &GamemanagerCenterGateCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGamemanagerDynamicStartNtf_descriptor_, &ServerGamemanagerDynamicStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerServerDynamicServerStartNtf_descriptor_, &GamemanagerServerDynamicServerStartNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerCenterServerCloseNtf_descriptor_, &GamemanagerCenterServerCloseNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerGroupmanagerReportGameInfo_descriptor_, &GamemanagerGroupmanagerReportGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GamemanagerServerCreateGameRoomReq_descriptor_, &GamemanagerServerCreateGameRoomReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerGamemanagerCreateGameRoomRsp_descriptor_, &ServerGamemanagerCreateGameRoomRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_gamemanager_2eproto() {
  delete GamemanagerCenterReportGameInfo::default_instance_;
  delete GamemanagerCenterReportGameInfo_reflection_;
  delete ServerGamemanagerReportGameInfo::default_instance_;
  delete ServerGamemanagerReportGameInfo_reflection_;
  delete ServerGamemanagerEnterGameReq::default_instance_;
  delete ServerGamemanagerEnterGameReq_reflection_;
  delete GamemanagerServerEnterGameRsp::default_instance_;
  delete GamemanagerServerEnterGameRsp_reflection_;
  delete ServerGamemanagerGateCloseNtf::default_instance_;
  delete ServerGamemanagerGateCloseNtf_reflection_;
  delete GamemanagerCenterGateCloseNtf::default_instance_;
  delete GamemanagerCenterGateCloseNtf_reflection_;
  delete ServerGamemanagerDynamicStartNtf::default_instance_;
  delete ServerGamemanagerDynamicStartNtf_reflection_;
  delete GamemanagerServerDynamicServerStartNtf::default_instance_;
  delete GamemanagerServerDynamicServerStartNtf_reflection_;
  delete GamemanagerCenterServerCloseNtf::default_instance_;
  delete GamemanagerCenterServerCloseNtf_reflection_;
  delete GamemanagerGroupmanagerReportGameInfo::default_instance_;
  delete GamemanagerGroupmanagerReportGameInfo_reflection_;
  delete GamemanagerServerCreateGameRoomReq::default_instance_;
  delete GamemanagerServerCreateGameRoomReq_reflection_;
  delete ServerGamemanagerCreateGameRoomRsp::default_instance_;
  delete ServerGamemanagerCreateGameRoomRsp_reflection_;
}

void protobuf_AddDesc_gamemanager_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::sglib::publicproto::protobuf_AddDesc_public_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021gamemanager.proto\022\026sglib.gamemanagerpr"
    "oto\032\014public.proto\"\241\001\n\037GamemanagerCenterR"
    "eportGameInfo\022\016\n\006gameid\030\001 \002(\005\0226\n\013gameser"
    "vers\030\002 \003(\0132!.sglib.publicproto.GameServe"
    "rInfo\0226\n\013gateservers\030\003 \003(\0132!.sglib.publi"
    "cproto.GateServerInfo\"\240\001\n\037ServerGamemana"
    "gerReportGameInfo\022\016\n\006gameid\030\001 \002(\005\0225\n\ngam"
    "eserver\030\002 \002(\0132!.sglib.publicproto.GameSe"
    "rverInfo\0226\n\013gateservers\030\003 \003(\0132!.sglib.pu"
    "blicproto.GateServerInfo\"Q\n\035ServerGamema"
    "nagerEnterGameReq\022\016\n\006gateid\030\001 \002(\004\022\020\n\010cli"
    "entid\030\002 \002(\004\022\016\n\006gameid\030\003 \002(\005\"\215\001\n\035Gamemana"
    "gerServerEnterGameRsp\022\016\n\006result\030\001 \002(\005\022\016\n"
    "\006gateid\030\002 \002(\004\022\020\n\010clientid\030\003 \002(\004\022\016\n\006gamei"
    "d\030\004 \002(\005\022\n\n\002ip\030\005 \001(\t\022\014\n\004port\030\006 \001(\005\022\020\n\010ser"
    "verid\030\007 \001(\005\"\?\n\035ServerGamemanagerGateClos"
    "eNtf\022\016\n\006gameid\030\001 \002(\005\022\016\n\006gateid\030\002 \002(\005\"\?\n\035"
    "GamemanagerCenterGateCloseNtf\022\016\n\006gameid\030"
    "\001 \002(\005\022\016\n\006gateid\030\002 \002(\005\"X\n ServerGamemanag"
    "erDynamicStartNtf\022\n\n\002id\030\001 \002(\005\022\n\n\002ip\030\002 \002("
    "\t\022\014\n\004port\030\003 \002(\005\022\016\n\006gameid\030\004 \002(\005\"N\n&Gamem"
    "anagerServerDynamicServerStartNtf\022\n\n\002id\030"
    "\001 \002(\005\022\n\n\002ip\030\002 \002(\t\022\014\n\004port\030\003 \002(\005\"C\n\037Gamem"
    "anagerCenterServerCloseNtf\022\016\n\006gameid\030\001 \002"
    "(\005\022\020\n\010serverid\030\002 \002(\005\"F\n%GamemanagerGroup"
    "managerReportGameInfo\022\016\n\006gameid\030\001 \002(\005\022\r\n"
    "\005count\030\002 \002(\005\"z\n\"GamemanagerServerCreateG"
    "ameRoomReq\022\017\n\007groupid\030\001 \002(\004\022\021\n\tgateresid"
    "\030\002 \002(\005\022\020\n\010clientid\030\003 \002(\004\022\014\n\004game\030\004 \002(\005\022\020"
    "\n\010serverid\030\005 \002(\004\"\274\001\n\"ServerGamemanagerCr"
    "eateGameRoomRsp\022\016\n\006result\030\001 \002(\005\022\017\n\007group"
    "id\030\002 \002(\004\022\021\n\tgateresid\030\003 \002(\005\022\020\n\010clientid\030"
    "\004 \002(\004\022\014\n\004game\030\005 \002(\005\022\020\n\010serverid\030\006 \002(\004\022\016\n"
    "\006roomid\030\007 \001(\005\022\020\n\010password\030\010 \001(\t\022\016\n\006gamei"
    "d\030\t \002(\005", 1367);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gamemanager.proto", &protobuf_RegisterTypes);
  GamemanagerCenterReportGameInfo::default_instance_ = new GamemanagerCenterReportGameInfo();
  ServerGamemanagerReportGameInfo::default_instance_ = new ServerGamemanagerReportGameInfo();
  ServerGamemanagerEnterGameReq::default_instance_ = new ServerGamemanagerEnterGameReq();
  GamemanagerServerEnterGameRsp::default_instance_ = new GamemanagerServerEnterGameRsp();
  ServerGamemanagerGateCloseNtf::default_instance_ = new ServerGamemanagerGateCloseNtf();
  GamemanagerCenterGateCloseNtf::default_instance_ = new GamemanagerCenterGateCloseNtf();
  ServerGamemanagerDynamicStartNtf::default_instance_ = new ServerGamemanagerDynamicStartNtf();
  GamemanagerServerDynamicServerStartNtf::default_instance_ = new GamemanagerServerDynamicServerStartNtf();
  GamemanagerCenterServerCloseNtf::default_instance_ = new GamemanagerCenterServerCloseNtf();
  GamemanagerGroupmanagerReportGameInfo::default_instance_ = new GamemanagerGroupmanagerReportGameInfo();
  GamemanagerServerCreateGameRoomReq::default_instance_ = new GamemanagerServerCreateGameRoomReq();
  ServerGamemanagerCreateGameRoomRsp::default_instance_ = new ServerGamemanagerCreateGameRoomRsp();
  GamemanagerCenterReportGameInfo::default_instance_->InitAsDefaultInstance();
  ServerGamemanagerReportGameInfo::default_instance_->InitAsDefaultInstance();
  ServerGamemanagerEnterGameReq::default_instance_->InitAsDefaultInstance();
  GamemanagerServerEnterGameRsp::default_instance_->InitAsDefaultInstance();
  ServerGamemanagerGateCloseNtf::default_instance_->InitAsDefaultInstance();
  GamemanagerCenterGateCloseNtf::default_instance_->InitAsDefaultInstance();
  ServerGamemanagerDynamicStartNtf::default_instance_->InitAsDefaultInstance();
  GamemanagerServerDynamicServerStartNtf::default_instance_->InitAsDefaultInstance();
  GamemanagerCenterServerCloseNtf::default_instance_->InitAsDefaultInstance();
  GamemanagerGroupmanagerReportGameInfo::default_instance_->InitAsDefaultInstance();
  GamemanagerServerCreateGameRoomReq::default_instance_->InitAsDefaultInstance();
  ServerGamemanagerCreateGameRoomRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_gamemanager_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_gamemanager_2eproto {
  StaticDescriptorInitializer_gamemanager_2eproto() {
    protobuf_AddDesc_gamemanager_2eproto();
  }
} static_descriptor_initializer_gamemanager_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GamemanagerCenterReportGameInfo::kGameidFieldNumber;
const int GamemanagerCenterReportGameInfo::kGameserversFieldNumber;
const int GamemanagerCenterReportGameInfo::kGateserversFieldNumber;
#endif  // !_MSC_VER

GamemanagerCenterReportGameInfo::GamemanagerCenterReportGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerCenterReportGameInfo::InitAsDefaultInstance() {
}

GamemanagerCenterReportGameInfo::GamemanagerCenterReportGameInfo(const GamemanagerCenterReportGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerCenterReportGameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerCenterReportGameInfo::~GamemanagerCenterReportGameInfo() {
  SharedDtor();
}

void GamemanagerCenterReportGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamemanagerCenterReportGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerCenterReportGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerCenterReportGameInfo_descriptor_;
}

const GamemanagerCenterReportGameInfo& GamemanagerCenterReportGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

GamemanagerCenterReportGameInfo* GamemanagerCenterReportGameInfo::default_instance_ = NULL;

GamemanagerCenterReportGameInfo* GamemanagerCenterReportGameInfo::New() const {
  return new GamemanagerCenterReportGameInfo;
}

void GamemanagerCenterReportGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
  }
  gameservers_.Clear();
  gateservers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerCenterReportGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameservers;
        break;
      }

      // repeated .sglib.publicproto.GameServerInfo gameservers = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gameservers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameservers;
        if (input->ExpectTag(26)) goto parse_gateservers;
        break;
      }

      // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gateservers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gateservers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerCenterReportGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // repeated .sglib.publicproto.GameServerInfo gameservers = 2;
  for (int i = 0; i < this->gameservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gameservers(i), output);
  }

  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  for (int i = 0; i < this->gateservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gateservers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerCenterReportGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // repeated .sglib.publicproto.GameServerInfo gameservers = 2;
  for (int i = 0; i < this->gameservers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gameservers(i), target);
  }

  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  for (int i = 0; i < this->gateservers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gateservers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerCenterReportGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  // repeated .sglib.publicproto.GameServerInfo gameservers = 2;
  total_size += 1 * this->gameservers_size();
  for (int i = 0; i < this->gameservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gameservers(i));
  }

  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  total_size += 1 * this->gateservers_size();
  for (int i = 0; i < this->gateservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gateservers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerCenterReportGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerCenterReportGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerCenterReportGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerCenterReportGameInfo::MergeFrom(const GamemanagerCenterReportGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gameservers_.MergeFrom(from.gameservers_);
  gateservers_.MergeFrom(from.gateservers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerCenterReportGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerCenterReportGameInfo::CopyFrom(const GamemanagerCenterReportGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerCenterReportGameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < gameservers_size(); i++) {
    if (!this->gameservers(i).IsInitialized()) return false;
  }
  for (int i = 0; i < gateservers_size(); i++) {
    if (!this->gateservers(i).IsInitialized()) return false;
  }
  return true;
}

void GamemanagerCenterReportGameInfo::Swap(GamemanagerCenterReportGameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    gameservers_.Swap(&other->gameservers_);
    gateservers_.Swap(&other->gateservers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerCenterReportGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerCenterReportGameInfo_descriptor_;
  metadata.reflection = GamemanagerCenterReportGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGamemanagerReportGameInfo::kGameidFieldNumber;
const int ServerGamemanagerReportGameInfo::kGameserverFieldNumber;
const int ServerGamemanagerReportGameInfo::kGateserversFieldNumber;
#endif  // !_MSC_VER

ServerGamemanagerReportGameInfo::ServerGamemanagerReportGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGamemanagerReportGameInfo::InitAsDefaultInstance() {
  gameserver_ = const_cast< ::sglib::publicproto::GameServerInfo*>(&::sglib::publicproto::GameServerInfo::default_instance());
}

ServerGamemanagerReportGameInfo::ServerGamemanagerReportGameInfo(const ServerGamemanagerReportGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGamemanagerReportGameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gameserver_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGamemanagerReportGameInfo::~ServerGamemanagerReportGameInfo() {
  SharedDtor();
}

void ServerGamemanagerReportGameInfo::SharedDtor() {
  if (this != default_instance_) {
    delete gameserver_;
  }
}

void ServerGamemanagerReportGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGamemanagerReportGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGamemanagerReportGameInfo_descriptor_;
}

const ServerGamemanagerReportGameInfo& ServerGamemanagerReportGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

ServerGamemanagerReportGameInfo* ServerGamemanagerReportGameInfo::default_instance_ = NULL;

ServerGamemanagerReportGameInfo* ServerGamemanagerReportGameInfo::New() const {
  return new ServerGamemanagerReportGameInfo;
}

void ServerGamemanagerReportGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    if (has_gameserver()) {
      if (gameserver_ != NULL) gameserver_->::sglib::publicproto::GameServerInfo::Clear();
    }
  }
  gateservers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGamemanagerReportGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_gameserver;
        break;
      }

      // required .sglib.publicproto.GameServerInfo gameserver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gameserver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gameserver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gateservers;
        break;
      }

      // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gateservers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gateservers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_gateservers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGamemanagerReportGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required .sglib.publicproto.GameServerInfo gameserver = 2;
  if (has_gameserver()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gameserver(), output);
  }

  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  for (int i = 0; i < this->gateservers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gateservers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGamemanagerReportGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required .sglib.publicproto.GameServerInfo gameserver = 2;
  if (has_gameserver()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gameserver(), target);
  }

  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  for (int i = 0; i < this->gateservers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gateservers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGamemanagerReportGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required .sglib.publicproto.GameServerInfo gameserver = 2;
    if (has_gameserver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gameserver());
    }

  }
  // repeated .sglib.publicproto.GateServerInfo gateservers = 3;
  total_size += 1 * this->gateservers_size();
  for (int i = 0; i < this->gateservers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gateservers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGamemanagerReportGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGamemanagerReportGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGamemanagerReportGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGamemanagerReportGameInfo::MergeFrom(const ServerGamemanagerReportGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  gateservers_.MergeFrom(from.gateservers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gameserver()) {
      mutable_gameserver()->::sglib::publicproto::GameServerInfo::MergeFrom(from.gameserver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGamemanagerReportGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGamemanagerReportGameInfo::CopyFrom(const ServerGamemanagerReportGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGamemanagerReportGameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_gameserver()) {
    if (!this->gameserver().IsInitialized()) return false;
  }
  for (int i = 0; i < gateservers_size(); i++) {
    if (!this->gateservers(i).IsInitialized()) return false;
  }
  return true;
}

void ServerGamemanagerReportGameInfo::Swap(ServerGamemanagerReportGameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gameserver_, other->gameserver_);
    gateservers_.Swap(&other->gateservers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGamemanagerReportGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGamemanagerReportGameInfo_descriptor_;
  metadata.reflection = ServerGamemanagerReportGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGamemanagerEnterGameReq::kGateidFieldNumber;
const int ServerGamemanagerEnterGameReq::kClientidFieldNumber;
const int ServerGamemanagerEnterGameReq::kGameidFieldNumber;
#endif  // !_MSC_VER

ServerGamemanagerEnterGameReq::ServerGamemanagerEnterGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGamemanagerEnterGameReq::InitAsDefaultInstance() {
}

ServerGamemanagerEnterGameReq::ServerGamemanagerEnterGameReq(const ServerGamemanagerEnterGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGamemanagerEnterGameReq::SharedCtor() {
  _cached_size_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGamemanagerEnterGameReq::~ServerGamemanagerEnterGameReq() {
  SharedDtor();
}

void ServerGamemanagerEnterGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerGamemanagerEnterGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGamemanagerEnterGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGamemanagerEnterGameReq_descriptor_;
}

const ServerGamemanagerEnterGameReq& ServerGamemanagerEnterGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

ServerGamemanagerEnterGameReq* ServerGamemanagerEnterGameReq::default_instance_ = NULL;

ServerGamemanagerEnterGameReq* ServerGamemanagerEnterGameReq::New() const {
  return new ServerGamemanagerEnterGameReq;
}

void ServerGamemanagerEnterGameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGamemanagerEnterGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 gateid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGamemanagerEnterGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gateid(), output);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->clientid(), output);
  }

  // required int32 gameid = 3;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGamemanagerEnterGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 gateid = 1;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gateid(), target);
  }

  // required uint64 clientid = 2;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->clientid(), target);
  }

  // required int32 gameid = 3;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGamemanagerEnterGameReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 gateid = 1;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 2;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 gameid = 3;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGamemanagerEnterGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGamemanagerEnterGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGamemanagerEnterGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGamemanagerEnterGameReq::MergeFrom(const ServerGamemanagerEnterGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGamemanagerEnterGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGamemanagerEnterGameReq::CopyFrom(const ServerGamemanagerEnterGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGamemanagerEnterGameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ServerGamemanagerEnterGameReq::Swap(ServerGamemanagerEnterGameReq* other) {
  if (other != this) {
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGamemanagerEnterGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGamemanagerEnterGameReq_descriptor_;
  metadata.reflection = ServerGamemanagerEnterGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamemanagerServerEnterGameRsp::kResultFieldNumber;
const int GamemanagerServerEnterGameRsp::kGateidFieldNumber;
const int GamemanagerServerEnterGameRsp::kClientidFieldNumber;
const int GamemanagerServerEnterGameRsp::kGameidFieldNumber;
const int GamemanagerServerEnterGameRsp::kIpFieldNumber;
const int GamemanagerServerEnterGameRsp::kPortFieldNumber;
const int GamemanagerServerEnterGameRsp::kServeridFieldNumber;
#endif  // !_MSC_VER

GamemanagerServerEnterGameRsp::GamemanagerServerEnterGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerServerEnterGameRsp::InitAsDefaultInstance() {
}

GamemanagerServerEnterGameRsp::GamemanagerServerEnterGameRsp(const GamemanagerServerEnterGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerServerEnterGameRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  gateid_ = GOOGLE_ULONGLONG(0);
  clientid_ = GOOGLE_ULONGLONG(0);
  gameid_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerServerEnterGameRsp::~GamemanagerServerEnterGameRsp() {
  SharedDtor();
}

void GamemanagerServerEnterGameRsp::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GamemanagerServerEnterGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerServerEnterGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerServerEnterGameRsp_descriptor_;
}

const GamemanagerServerEnterGameRsp& GamemanagerServerEnterGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

GamemanagerServerEnterGameRsp* GamemanagerServerEnterGameRsp::default_instance_ = NULL;

GamemanagerServerEnterGameRsp* GamemanagerServerEnterGameRsp::New() const {
  return new GamemanagerServerEnterGameRsp;
}

void GamemanagerServerEnterGameRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    gateid_ = GOOGLE_ULONGLONG(0);
    clientid_ = GOOGLE_ULONGLONG(0);
    gameid_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerServerEnterGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required uint64 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ip;
        break;
      }

      // optional string ip = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_port;
        break;
      }

      // optional int32 port = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_serverid;
        break;
      }

      // optional int32 serverid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerServerEnterGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->gateid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required int32 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gameid(), output);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ip(), output);
  }

  // optional int32 port = 6;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->port(), output);
  }

  // optional int32 serverid = 7;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerServerEnterGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->gateid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required int32 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gameid(), target);
  }

  // optional string ip = 5;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ip(), target);
  }

  // optional int32 port = 6;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->port(), target);
  }

  // optional int32 serverid = 7;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerServerEnterGameRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gateid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // optional string ip = 5;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 6;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 serverid = 7;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerServerEnterGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerServerEnterGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerServerEnterGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerServerEnterGameRsp::MergeFrom(const GamemanagerServerEnterGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerServerEnterGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerServerEnterGameRsp::CopyFrom(const GamemanagerServerEnterGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerServerEnterGameRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GamemanagerServerEnterGameRsp::Swap(GamemanagerServerEnterGameRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(gateid_, other->gateid_);
    std::swap(clientid_, other->clientid_);
    std::swap(gameid_, other->gameid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerServerEnterGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerServerEnterGameRsp_descriptor_;
  metadata.reflection = GamemanagerServerEnterGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGamemanagerGateCloseNtf::kGameidFieldNumber;
const int ServerGamemanagerGateCloseNtf::kGateidFieldNumber;
#endif  // !_MSC_VER

ServerGamemanagerGateCloseNtf::ServerGamemanagerGateCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGamemanagerGateCloseNtf::InitAsDefaultInstance() {
}

ServerGamemanagerGateCloseNtf::ServerGamemanagerGateCloseNtf(const ServerGamemanagerGateCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGamemanagerGateCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGamemanagerGateCloseNtf::~ServerGamemanagerGateCloseNtf() {
  SharedDtor();
}

void ServerGamemanagerGateCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServerGamemanagerGateCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGamemanagerGateCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGamemanagerGateCloseNtf_descriptor_;
}

const ServerGamemanagerGateCloseNtf& ServerGamemanagerGateCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

ServerGamemanagerGateCloseNtf* ServerGamemanagerGateCloseNtf::default_instance_ = NULL;

ServerGamemanagerGateCloseNtf* ServerGamemanagerGateCloseNtf::New() const {
  return new ServerGamemanagerGateCloseNtf;
}

void ServerGamemanagerGateCloseNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGamemanagerGateCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required int32 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGamemanagerGateCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGamemanagerGateCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGamemanagerGateCloseNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGamemanagerGateCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGamemanagerGateCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGamemanagerGateCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGamemanagerGateCloseNtf::MergeFrom(const ServerGamemanagerGateCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGamemanagerGateCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGamemanagerGateCloseNtf::CopyFrom(const ServerGamemanagerGateCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGamemanagerGateCloseNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ServerGamemanagerGateCloseNtf::Swap(ServerGamemanagerGateCloseNtf* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gateid_, other->gateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGamemanagerGateCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGamemanagerGateCloseNtf_descriptor_;
  metadata.reflection = ServerGamemanagerGateCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamemanagerCenterGateCloseNtf::kGameidFieldNumber;
const int GamemanagerCenterGateCloseNtf::kGateidFieldNumber;
#endif  // !_MSC_VER

GamemanagerCenterGateCloseNtf::GamemanagerCenterGateCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerCenterGateCloseNtf::InitAsDefaultInstance() {
}

GamemanagerCenterGateCloseNtf::GamemanagerCenterGateCloseNtf(const GamemanagerCenterGateCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerCenterGateCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  gateid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerCenterGateCloseNtf::~GamemanagerCenterGateCloseNtf() {
  SharedDtor();
}

void GamemanagerCenterGateCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamemanagerCenterGateCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerCenterGateCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerCenterGateCloseNtf_descriptor_;
}

const GamemanagerCenterGateCloseNtf& GamemanagerCenterGateCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

GamemanagerCenterGateCloseNtf* GamemanagerCenterGateCloseNtf::default_instance_ = NULL;

GamemanagerCenterGateCloseNtf* GamemanagerCenterGateCloseNtf::New() const {
  return new GamemanagerCenterGateCloseNtf;
}

void GamemanagerCenterGateCloseNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    gateid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerCenterGateCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateid;
        break;
      }

      // required int32 gateid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerCenterGateCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 gateid = 2;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerCenterGateCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 gateid = 2;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerCenterGateCloseNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 gateid = 2;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerCenterGateCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerCenterGateCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerCenterGateCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerCenterGateCloseNtf::MergeFrom(const GamemanagerCenterGateCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerCenterGateCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerCenterGateCloseNtf::CopyFrom(const GamemanagerCenterGateCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerCenterGateCloseNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GamemanagerCenterGateCloseNtf::Swap(GamemanagerCenterGateCloseNtf* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(gateid_, other->gateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerCenterGateCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerCenterGateCloseNtf_descriptor_;
  metadata.reflection = GamemanagerCenterGateCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGamemanagerDynamicStartNtf::kIdFieldNumber;
const int ServerGamemanagerDynamicStartNtf::kIpFieldNumber;
const int ServerGamemanagerDynamicStartNtf::kPortFieldNumber;
const int ServerGamemanagerDynamicStartNtf::kGameidFieldNumber;
#endif  // !_MSC_VER

ServerGamemanagerDynamicStartNtf::ServerGamemanagerDynamicStartNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGamemanagerDynamicStartNtf::InitAsDefaultInstance() {
}

ServerGamemanagerDynamicStartNtf::ServerGamemanagerDynamicStartNtf(const ServerGamemanagerDynamicStartNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGamemanagerDynamicStartNtf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGamemanagerDynamicStartNtf::~ServerGamemanagerDynamicStartNtf() {
  SharedDtor();
}

void ServerGamemanagerDynamicStartNtf::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ServerGamemanagerDynamicStartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGamemanagerDynamicStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGamemanagerDynamicStartNtf_descriptor_;
}

const ServerGamemanagerDynamicStartNtf& ServerGamemanagerDynamicStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

ServerGamemanagerDynamicStartNtf* ServerGamemanagerDynamicStartNtf::default_instance_ = NULL;

ServerGamemanagerDynamicStartNtf* ServerGamemanagerDynamicStartNtf::New() const {
  return new ServerGamemanagerDynamicStartNtf;
}

void ServerGamemanagerDynamicStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGamemanagerDynamicStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGamemanagerDynamicStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  // required int32 gameid = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGamemanagerDynamicStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  // required int32 gameid = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGamemanagerDynamicStartNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // required int32 gameid = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGamemanagerDynamicStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGamemanagerDynamicStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGamemanagerDynamicStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGamemanagerDynamicStartNtf::MergeFrom(const ServerGamemanagerDynamicStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGamemanagerDynamicStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGamemanagerDynamicStartNtf::CopyFrom(const ServerGamemanagerDynamicStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGamemanagerDynamicStartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ServerGamemanagerDynamicStartNtf::Swap(ServerGamemanagerDynamicStartNtf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGamemanagerDynamicStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGamemanagerDynamicStartNtf_descriptor_;
  metadata.reflection = ServerGamemanagerDynamicStartNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamemanagerServerDynamicServerStartNtf::kIdFieldNumber;
const int GamemanagerServerDynamicServerStartNtf::kIpFieldNumber;
const int GamemanagerServerDynamicServerStartNtf::kPortFieldNumber;
#endif  // !_MSC_VER

GamemanagerServerDynamicServerStartNtf::GamemanagerServerDynamicServerStartNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerServerDynamicServerStartNtf::InitAsDefaultInstance() {
}

GamemanagerServerDynamicServerStartNtf::GamemanagerServerDynamicServerStartNtf(const GamemanagerServerDynamicServerStartNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerServerDynamicServerStartNtf::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerServerDynamicServerStartNtf::~GamemanagerServerDynamicServerStartNtf() {
  SharedDtor();
}

void GamemanagerServerDynamicServerStartNtf::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void GamemanagerServerDynamicServerStartNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerServerDynamicServerStartNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerServerDynamicServerStartNtf_descriptor_;
}

const GamemanagerServerDynamicServerStartNtf& GamemanagerServerDynamicServerStartNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

GamemanagerServerDynamicServerStartNtf* GamemanagerServerDynamicServerStartNtf::default_instance_ = NULL;

GamemanagerServerDynamicServerStartNtf* GamemanagerServerDynamicServerStartNtf::New() const {
  return new GamemanagerServerDynamicServerStartNtf;
}

void GamemanagerServerDynamicServerStartNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerServerDynamicServerStartNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ip;
        break;
      }

      // required string ip = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required int32 port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerServerDynamicServerStartNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ip(), output);
  }

  // required int32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerServerDynamicServerStartNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required string ip = 2;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ip(), target);
  }

  // required int32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerServerDynamicServerStartNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required string ip = 2;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerServerDynamicServerStartNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerServerDynamicServerStartNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerServerDynamicServerStartNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerServerDynamicServerStartNtf::MergeFrom(const GamemanagerServerDynamicServerStartNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerServerDynamicServerStartNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerServerDynamicServerStartNtf::CopyFrom(const GamemanagerServerDynamicServerStartNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerServerDynamicServerStartNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GamemanagerServerDynamicServerStartNtf::Swap(GamemanagerServerDynamicServerStartNtf* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerServerDynamicServerStartNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerServerDynamicServerStartNtf_descriptor_;
  metadata.reflection = GamemanagerServerDynamicServerStartNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamemanagerCenterServerCloseNtf::kGameidFieldNumber;
const int GamemanagerCenterServerCloseNtf::kServeridFieldNumber;
#endif  // !_MSC_VER

GamemanagerCenterServerCloseNtf::GamemanagerCenterServerCloseNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerCenterServerCloseNtf::InitAsDefaultInstance() {
}

GamemanagerCenterServerCloseNtf::GamemanagerCenterServerCloseNtf(const GamemanagerCenterServerCloseNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerCenterServerCloseNtf::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  serverid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerCenterServerCloseNtf::~GamemanagerCenterServerCloseNtf() {
  SharedDtor();
}

void GamemanagerCenterServerCloseNtf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamemanagerCenterServerCloseNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerCenterServerCloseNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerCenterServerCloseNtf_descriptor_;
}

const GamemanagerCenterServerCloseNtf& GamemanagerCenterServerCloseNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

GamemanagerCenterServerCloseNtf* GamemanagerCenterServerCloseNtf::default_instance_ = NULL;

GamemanagerCenterServerCloseNtf* GamemanagerCenterServerCloseNtf::New() const {
  return new GamemanagerCenterServerCloseNtf;
}

void GamemanagerCenterServerCloseNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    serverid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerCenterServerCloseNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerCenterServerCloseNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerCenterServerCloseNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerCenterServerCloseNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerCenterServerCloseNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerCenterServerCloseNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerCenterServerCloseNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerCenterServerCloseNtf::MergeFrom(const GamemanagerCenterServerCloseNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerCenterServerCloseNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerCenterServerCloseNtf::CopyFrom(const GamemanagerCenterServerCloseNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerCenterServerCloseNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GamemanagerCenterServerCloseNtf::Swap(GamemanagerCenterServerCloseNtf* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerCenterServerCloseNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerCenterServerCloseNtf_descriptor_;
  metadata.reflection = GamemanagerCenterServerCloseNtf_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamemanagerGroupmanagerReportGameInfo::kGameidFieldNumber;
const int GamemanagerGroupmanagerReportGameInfo::kCountFieldNumber;
#endif  // !_MSC_VER

GamemanagerGroupmanagerReportGameInfo::GamemanagerGroupmanagerReportGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerGroupmanagerReportGameInfo::InitAsDefaultInstance() {
}

GamemanagerGroupmanagerReportGameInfo::GamemanagerGroupmanagerReportGameInfo(const GamemanagerGroupmanagerReportGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerGroupmanagerReportGameInfo::SharedCtor() {
  _cached_size_ = 0;
  gameid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerGroupmanagerReportGameInfo::~GamemanagerGroupmanagerReportGameInfo() {
  SharedDtor();
}

void GamemanagerGroupmanagerReportGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamemanagerGroupmanagerReportGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerGroupmanagerReportGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerGroupmanagerReportGameInfo_descriptor_;
}

const GamemanagerGroupmanagerReportGameInfo& GamemanagerGroupmanagerReportGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

GamemanagerGroupmanagerReportGameInfo* GamemanagerGroupmanagerReportGameInfo::default_instance_ = NULL;

GamemanagerGroupmanagerReportGameInfo* GamemanagerGroupmanagerReportGameInfo::New() const {
  return new GamemanagerGroupmanagerReportGameInfo;
}

void GamemanagerGroupmanagerReportGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gameid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerGroupmanagerReportGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gameid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerGroupmanagerReportGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gameid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerGroupmanagerReportGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 gameid = 1;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gameid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerGroupmanagerReportGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gameid = 1;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerGroupmanagerReportGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerGroupmanagerReportGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerGroupmanagerReportGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerGroupmanagerReportGameInfo::MergeFrom(const GamemanagerGroupmanagerReportGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerGroupmanagerReportGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerGroupmanagerReportGameInfo::CopyFrom(const GamemanagerGroupmanagerReportGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerGroupmanagerReportGameInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GamemanagerGroupmanagerReportGameInfo::Swap(GamemanagerGroupmanagerReportGameInfo* other) {
  if (other != this) {
    std::swap(gameid_, other->gameid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerGroupmanagerReportGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerGroupmanagerReportGameInfo_descriptor_;
  metadata.reflection = GamemanagerGroupmanagerReportGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GamemanagerServerCreateGameRoomReq::kGroupidFieldNumber;
const int GamemanagerServerCreateGameRoomReq::kGateresidFieldNumber;
const int GamemanagerServerCreateGameRoomReq::kClientidFieldNumber;
const int GamemanagerServerCreateGameRoomReq::kGameFieldNumber;
const int GamemanagerServerCreateGameRoomReq::kServeridFieldNumber;
#endif  // !_MSC_VER

GamemanagerServerCreateGameRoomReq::GamemanagerServerCreateGameRoomReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GamemanagerServerCreateGameRoomReq::InitAsDefaultInstance() {
}

GamemanagerServerCreateGameRoomReq::GamemanagerServerCreateGameRoomReq(const GamemanagerServerCreateGameRoomReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GamemanagerServerCreateGameRoomReq::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GamemanagerServerCreateGameRoomReq::~GamemanagerServerCreateGameRoomReq() {
  SharedDtor();
}

void GamemanagerServerCreateGameRoomReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GamemanagerServerCreateGameRoomReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GamemanagerServerCreateGameRoomReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GamemanagerServerCreateGameRoomReq_descriptor_;
}

const GamemanagerServerCreateGameRoomReq& GamemanagerServerCreateGameRoomReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

GamemanagerServerCreateGameRoomReq* GamemanagerServerCreateGameRoomReq::default_instance_ = NULL;

GamemanagerServerCreateGameRoomReq* GamemanagerServerCreateGameRoomReq::New() const {
  return new GamemanagerServerCreateGameRoomReq;
}

void GamemanagerServerCreateGameRoomReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
    serverid_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GamemanagerServerCreateGameRoomReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 groupid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_game;
        break;
      }

      // required int32 game = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_serverid;
        break;
      }

      // required uint64 serverid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GamemanagerServerCreateGameRoomReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->groupid(), output);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gateresid(), output);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->clientid(), output);
  }

  // required int32 game = 4;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->game(), output);
  }

  // required uint64 serverid = 5;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->serverid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GamemanagerServerCreateGameRoomReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 groupid = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->groupid(), target);
  }

  // required int32 gateresid = 2;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gateresid(), target);
  }

  // required uint64 clientid = 3;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->clientid(), target);
  }

  // required int32 game = 4;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->game(), target);
  }

  // required uint64 serverid = 5;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->serverid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GamemanagerServerCreateGameRoomReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 groupid = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 2;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 3;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 game = 4;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

    // required uint64 serverid = 5;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GamemanagerServerCreateGameRoomReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GamemanagerServerCreateGameRoomReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GamemanagerServerCreateGameRoomReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GamemanagerServerCreateGameRoomReq::MergeFrom(const GamemanagerServerCreateGameRoomReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GamemanagerServerCreateGameRoomReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GamemanagerServerCreateGameRoomReq::CopyFrom(const GamemanagerServerCreateGameRoomReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GamemanagerServerCreateGameRoomReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void GamemanagerServerCreateGameRoomReq::Swap(GamemanagerServerCreateGameRoomReq* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(game_, other->game_);
    std::swap(serverid_, other->serverid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GamemanagerServerCreateGameRoomReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GamemanagerServerCreateGameRoomReq_descriptor_;
  metadata.reflection = GamemanagerServerCreateGameRoomReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ServerGamemanagerCreateGameRoomRsp::kResultFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kGroupidFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kGateresidFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kClientidFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kGameFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kServeridFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kRoomidFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kPasswordFieldNumber;
const int ServerGamemanagerCreateGameRoomRsp::kGameidFieldNumber;
#endif  // !_MSC_VER

ServerGamemanagerCreateGameRoomRsp::ServerGamemanagerCreateGameRoomRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerGamemanagerCreateGameRoomRsp::InitAsDefaultInstance() {
}

ServerGamemanagerCreateGameRoomRsp::ServerGamemanagerCreateGameRoomRsp(const ServerGamemanagerCreateGameRoomRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerGamemanagerCreateGameRoomRsp::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  groupid_ = GOOGLE_ULONGLONG(0);
  gateresid_ = 0;
  clientid_ = GOOGLE_ULONGLONG(0);
  game_ = 0;
  serverid_ = GOOGLE_ULONGLONG(0);
  roomid_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gameid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerGamemanagerCreateGameRoomRsp::~ServerGamemanagerCreateGameRoomRsp() {
  SharedDtor();
}

void ServerGamemanagerCreateGameRoomRsp::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ServerGamemanagerCreateGameRoomRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerGamemanagerCreateGameRoomRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerGamemanagerCreateGameRoomRsp_descriptor_;
}

const ServerGamemanagerCreateGameRoomRsp& ServerGamemanagerCreateGameRoomRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_gamemanager_2eproto();
  return *default_instance_;
}

ServerGamemanagerCreateGameRoomRsp* ServerGamemanagerCreateGameRoomRsp::default_instance_ = NULL;

ServerGamemanagerCreateGameRoomRsp* ServerGamemanagerCreateGameRoomRsp::New() const {
  return new ServerGamemanagerCreateGameRoomRsp;
}

void ServerGamemanagerCreateGameRoomRsp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
    groupid_ = GOOGLE_ULONGLONG(0);
    gateresid_ = 0;
    clientid_ = GOOGLE_ULONGLONG(0);
    game_ = 0;
    serverid_ = GOOGLE_ULONGLONG(0);
    roomid_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gameid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerGamemanagerCreateGameRoomRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_groupid;
        break;
      }

      // required uint64 groupid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gateresid;
        break;
      }

      // required int32 gateresid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateresid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateresid_)));
          set_has_gateresid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_clientid;
        break;
      }

      // required uint64 clientid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &clientid_)));
          set_has_clientid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_game;
        break;
      }

      // required int32 game = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_)));
          set_has_game();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_serverid;
        break;
      }

      // required uint64 serverid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_password;
        break;
      }

      // optional string password = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_gameid;
        break;
      }

      // required int32 gameid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerGamemanagerCreateGameRoomRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->groupid(), output);
  }

  // required int32 gateresid = 3;
  if (has_gateresid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gateresid(), output);
  }

  // required uint64 clientid = 4;
  if (has_clientid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->clientid(), output);
  }

  // required int32 game = 5;
  if (has_game()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->game(), output);
  }

  // required uint64 serverid = 6;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->serverid(), output);
  }

  // optional int32 roomid = 7;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->roomid(), output);
  }

  // optional string password = 8;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->password(), output);
  }

  // required int32 gameid = 9;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->gameid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerGamemanagerCreateGameRoomRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // required uint64 groupid = 2;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->groupid(), target);
  }

  // required int32 gateresid = 3;
  if (has_gateresid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gateresid(), target);
  }

  // required uint64 clientid = 4;
  if (has_clientid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->clientid(), target);
  }

  // required int32 game = 5;
  if (has_game()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->game(), target);
  }

  // required uint64 serverid = 6;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->serverid(), target);
  }

  // optional int32 roomid = 7;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->roomid(), target);
  }

  // optional string password = 8;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->password(), target);
  }

  // required int32 gameid = 9;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->gameid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerGamemanagerCreateGameRoomRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

    // required uint64 groupid = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->groupid());
    }

    // required int32 gateresid = 3;
    if (has_gateresid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateresid());
    }

    // required uint64 clientid = 4;
    if (has_clientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->clientid());
    }

    // required int32 game = 5;
    if (has_game()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game());
    }

    // required uint64 serverid = 6;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->serverid());
    }

    // optional int32 roomid = 7;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional string password = 8;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 gameid = 9;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gameid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerGamemanagerCreateGameRoomRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerGamemanagerCreateGameRoomRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerGamemanagerCreateGameRoomRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerGamemanagerCreateGameRoomRsp::MergeFrom(const ServerGamemanagerCreateGameRoomRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_gateresid()) {
      set_gateresid(from.gateresid());
    }
    if (from.has_clientid()) {
      set_clientid(from.clientid());
    }
    if (from.has_game()) {
      set_game(from.game());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerGamemanagerCreateGameRoomRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerGamemanagerCreateGameRoomRsp::CopyFrom(const ServerGamemanagerCreateGameRoomRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerGamemanagerCreateGameRoomRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000013f) != 0x0000013f) return false;

  return true;
}

void ServerGamemanagerCreateGameRoomRsp::Swap(ServerGamemanagerCreateGameRoomRsp* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(groupid_, other->groupid_);
    std::swap(gateresid_, other->gateresid_);
    std::swap(clientid_, other->clientid_);
    std::swap(game_, other->game_);
    std::swap(serverid_, other->serverid_);
    std::swap(roomid_, other->roomid_);
    std::swap(password_, other->password_);
    std::swap(gameid_, other->gameid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerGamemanagerCreateGameRoomRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerGamemanagerCreateGameRoomRsp_descriptor_;
  metadata.reflection = ServerGamemanagerCreateGameRoomRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gamemanagerproto
}  // namespace sglib

// @@protoc_insertion_point(global_scope)
